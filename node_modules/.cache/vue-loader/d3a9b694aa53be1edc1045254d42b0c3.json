{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit3.vue?vue&type=template&id=853a63f6&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit3.vue","mtime":1601215714035},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "unit2" }, [
    _vm._m(0),
    _c("section", { staticClass: "dark-grey-text mb-4 p-3 mx-4" }, [
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 3.1 Bisection Method ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
            _vm._v("Intended learning outcomes")
          ]),
          _vm._v(" By the end of this section, you will be able to "),
          _vm._m(1),
          _vm._v(
            " The Bisection method is a root finding algorithm which is based on the "
          ),
          _c("deep", [_vm._v("Intermediate Value Theorem")]),
          _vm._v(". "),
          _c(
            "div",
            { staticClass: "theorem my-3 p-3 " },
            [
              _c("theorem-color", [_vm._v("Theorem 3.1")]),
              _vm._v(" "),
              _c("deep", [_vm._v("Intermediate-Value Theorem (IVT)")]),
              _c("br"),
              _vm._v(" If a function "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" is "),
              _c("i", [_vm._v("continuous")]),
              _vm._v(" on "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "K",
                    expression: "'K'"
                  }
                ]
              }),
              _vm._v(" is a number between "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(a)",
                    expression: "'f(a)'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(b)",
                    expression: "'f(b)'"
                  }
                ]
              }),
              _vm._v(", then there exist a number "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c",
                    expression: "'c'"
                  }
                ]
              }),
              _vm._v(" in "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(a,b)",
                    expression: "'(a,b)'"
                  }
                ]
              }),
              _vm._v(" for which "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(c)=K",
                    expression: "'f(c)=K'"
                  }
                ]
              }),
              _vm._v(". ")
            ],
            1
          ),
          _vm._v(
            " The figure below shows one choice for the number that is guaranteed by the IVT. "
          ),
          _c(
            "div",
            {
              staticClass: " my-3 p-3 ",
              staticStyle: { "background-color": "coral", "font-size": "30px" }
            },
            [_vm._v(" Diagram needed ")]
          ),
          _c("deep", [_vm._v("NB:")]),
          _vm._v(" If a function "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(a)",
                expression: "'f(a)'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(b)",
                expression: "'f(b)'"
              }
            ]
          }),
          _vm._v(" have opposite signs i.e if "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(a)f(b) < 0",
                expression: "'f(a)f(b) < 0'"
              }
            ]
          }),
          _vm._v(", by the IVT "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\exists",
                expression: "'\\\\exists'"
              }
            ]
          }),
          _vm._v(" a number "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "c",
                expression: "'c'"
              }
            ]
          }),
          _vm._v(" in "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(a,b)",
                expression: "'(a,b)'"
              }
            ]
          }),
          _vm._v(" for which "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(c) = 0",
                expression: "'f(c) = 0'"
              }
            ]
          }),
          _c(
            "div",
            { staticClass: "theorem my-3 p-3 " },
            [
              _c("theorem-color", [_vm._v("Theorem 3.2")]),
              _vm._v(" Let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(
                " be a real valued function, defined and continuous on a bounded closed interval "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v(". Assume further that "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(a)f(b) < 0",
                    expression: "'f(a)f(b) < 0'"
                  }
                ]
              }),
              _vm._v(", then, there exists "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\xi",
                    expression: "'\\\\xi'"
                  }
                ]
              }),
              _vm._v(" in "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v(" such that "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(\\xi)=0",
                    expression: "'f(\\\\xi)=0'"
                  }
                ]
              }),
              _vm._v(". ")
            ],
            1
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 3.1")
              ]),
              _vm._v(" Examples of the application of the IVT "),
              _c("ol", [
                _c("li", [
                  _vm._v(" Does the function "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x^5 - 2x^3 + 3x^2 - 1 = 0",
                        expression: "'x^5 - 2x^3 + 3x^2 - 1 = 0'"
                      }
                    ]
                  }),
                  _vm._v(" have a solution in [0,1]?"),
                  _c("br"),
                  _vm._v(" Answer: Consider "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x) = x^5 - 2x^3 + 3x^2 - 1",
                        expression: "'f(x) = x^5 - 2x^3 + 3x^2 - 1'"
                      }
                    ]
                  }),
                  _vm._v(", we have"),
                  _c("br"),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "f(0) = -1 < 0  \\text{ and } f(1) = 1 > 0",
                        expression:
                          "'f(0) = -1 < 0  \\\\text{ and } f(1) = 1 > 0'",
                        arg: "display"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)",
                        expression: "'f(x)'"
                      }
                    ]
                  }),
                  _vm._v(
                    " is continuous. Hence the IVT implies that a number "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x",
                        expression: "'x'"
                      }
                    ]
                  }),
                  _vm._v(" exists with "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "0 < x < 1",
                        expression: "'0 < x < 1'"
                      }
                    ]
                  }),
                  _vm._v(" for which "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x) = 0",
                        expression: "'f(x) = 0'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("br")
                ]),
                _c("li", [
                  _vm._v(" Does "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h(x) = x \\sin x - 1",
                        expression: "'h(x) = x \\\\sin x - 1'"
                      }
                    ]
                  }),
                  _vm._v(" have a solution in [0, 2]."),
                  _c("br"),
                  _vm._v(" Answer: Compute "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h(0)",
                        expression: "'h(0)'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h(1)",
                        expression: "'h(1)'"
                      }
                    ]
                  }),
                  _vm._v(". "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "h(0) = -1.000000~~~\\text{ and } ~~~h(2) = 0.818595",
                        expression:
                          "'h(0) = -1.000000~~~\\\\text{ and } ~~~h(2) = 0.818595'",
                        arg: "display"
                      }
                    ]
                  }),
                  _vm._v(" Since "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h(0)h(1) < 0",
                        expression: "'h(0)h(1) < 0'"
                      }
                    ]
                  }),
                  _vm._v(" there is a root in (0,2) ")
                ])
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: "my-4" },
            [
              _c("h5", { staticClass: "h5-responsive mt-4 mb-2" }, [
                _vm._v(" 3.1.1 Bisection method algorithm ")
              ]),
              _vm._v(
                " The bisection method algorithm calls for the repeated halving of subintervals of "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v(" and, at each step, locating the half containing "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c",
                    expression: "'c'"
                  }
                ]
              }),
              _vm._v(". This is summarized below:"),
              _c("br"),
              _c("deep", [
                _vm._v("Bisection Method Algorithm to find root in "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[a,b]",
                      expression: "'[a,b]'"
                    }
                  ]
                })
              ]),
              _c("ol", [
                _c("li", [
                  _vm._v(" Bisect "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[a,b]",
                        expression: "'[a,b]'"
                      }
                    ]
                  }),
                  _vm._v(" into two halves "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[a,c]",
                        expression: "'[a,c]'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[c,b]",
                        expression: "'[c,b]'"
                      }
                    ]
                  }),
                  _vm._v(" where "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\displaystyle{c=\\frac{a + b}{2}}",
                        expression: "'\\\\displaystyle{c=\\\\frac{a + b}{2}}'"
                      }
                    ]
                  })
                ]),
                _c("li", [
                  _vm._v(
                    " Identify the interval containing the root by checking the signs of "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(a)f(c)",
                        expression: "'f(a)f(c)'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(c)f(b)",
                        expression: "'f(c)f(b)'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ]),
                _c("li", [
                  _vm._v(" If "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(a)f(c) < 0",
                        expression: "'f(a)f(c) < 0'"
                      }
                    ]
                  }),
                  _vm._v(" then interval "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[a,c]",
                        expression: "'[a,c]'"
                      }
                    ]
                  }),
                  _vm._v(" has the root. Otherwise the other interval "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[c,b]",
                        expression: "'[c,b]'"
                      }
                    ]
                  }),
                  _vm._v(" has the root. ")
                ]),
                _c("li", [
                  _vm._v(
                    " Bisect the new interval that contains the root and repeat steps 1-3. "
                  )
                ]),
                _c("li", [
                  _vm._v(
                    " At each step take the midpoint of the interval as the most updated approximation of the root. "
                  )
                ]),
                _c("li", [
                  _vm._v(
                    " Stop the procedure after a specified number of iterations or when the width of the interval containing the root is less than a given tolerance "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\varepsilon",
                        expression: "'\\\\varepsilon'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ])
              ]),
              _vm._v(" To begin, we set "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "a_1 = a",
                    expression: "'a_1 = a'"
                  }
                ]
              }),
              _vm._v(", and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "b_1 = b",
                    expression: "'b_1 = b'"
                  }
                ]
              }),
              _vm._v(", and let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_1",
                    expression: "'c_1'"
                  }
                ]
              }),
              _vm._v(" be the midpoint of "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v("; that is "),
              _c("div", { staticClass: "container" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "c_1 = a_1 + \\frac{b_1 - a_1}{2} = \\frac{a_1 + b_1}{2}",
                          expression:
                            "'c_1 = a_1 + \\\\frac{b_1 - a_1}{2} = \\\\frac{a_1 + b_1}{2}'",
                          arg: "display"
                        }
                      ]
                    })
                  ]),
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "(3.1)",
                          expression: "'(3.1)'",
                          arg: "display"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _c("p", [
                _vm._v(" If "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(c_1) = 0",
                      expression: "'f(c_1) = 0'"
                    }
                  ]
                }),
                _vm._v(", then "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c = c_1",
                      expression: "'c = c_1'"
                    }
                  ]
                }),
                _vm._v(", and we are done. If "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(c_1) \\neq 0",
                      expression: "'f(c_1) \\\\neq 0'"
                    }
                  ]
                }),
                _vm._v(", then "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(c_1)",
                      expression: "'f(c_1)'"
                    }
                  ]
                }),
                _vm._v(" has the same sign as either "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(a_1)",
                      expression: "'f(a_1)'"
                    }
                  ]
                }),
                _vm._v(" or "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(b_1)",
                      expression: "'f(b_1)'"
                    }
                  ]
                }),
                _vm._v(". When "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(c_1)",
                      expression: "'f(c_1)'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(a_1)",
                      expression: "'f(a_1)'"
                    }
                  ]
                }),
                _vm._v(" have the same sign, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c \\in (c_1,b_1)",
                      expression: "'c \\\\in (c_1,b_1)'"
                    }
                  ]
                }),
                _vm._v(" and we set "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "a_2=c_1",
                      expression: "'a_2=c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "b_2=b_1",
                      expression: "'b_2=b_1'"
                    }
                  ]
                }),
                _vm._v(". When "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(c_1)",
                      expression: "'f(c_1)'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(a_1)",
                      expression: "'f(a_1)'"
                    }
                  ]
                }),
                _vm._v(" have opposite signs, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c \\in (a_1,c_1)",
                      expression: "'c \\\\in (a_1,c_1)'"
                    }
                  ]
                }),
                _vm._v(", and we set "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "a_2=a_1",
                      expression: "'a_2=a_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "b_2=c_1",
                      expression: "'b_2=c_1'"
                    }
                  ]
                }),
                _vm._v(". We then reapply the process to the interval "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[a_2,b_2]",
                      expression: "'[a_2,b_2]'"
                    }
                  ]
                }),
                _vm._v(". This procedure is illustrated in the figure below ")
              ]),
              _c(
                "svg",
                {
                  attrs: {
                    version: "1.0",
                    xmlns: "http://www.w3.org/2000/svg",
                    width: "",
                    height: "",
                    viewBox: "0 0 805.000000 279.000000",
                    preserveAspectRatio: "xMidYMid meet"
                  }
                },
                [
                  _c(
                    "g",
                    {
                      attrs: {
                        transform:
                          "translate(0.000000,279.000000) scale(0.100000,-0.100000)",
                        fill: "#000000",
                        stroke: "none"
                      }
                    },
                    [
                      _c("path", {
                        attrs: {
                          d:
                            "M7396 2616 c3 -7 -2 -41 -10 -74 -20 -77 -20 -106 1 -123 15 -13 15\n-12 4 6 -11 17 -11 29 0 65 7 25 14 52 15 60 2 8 6 30 9 48 5 25 2 32 -9 32\n-9 0 -13 -6 -10 -14z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M414 2572 c-31 -21 -45 -91 -21 -110 10 -9 12 -4 9 23 -2 19 3 48 11\n64 9 17 15 31 14 31 -1 0 -7 -4 -13 -8z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M475 2570 c-3 -5 -4 -10 -1 -10 3 0 -1 -20 -8 -45 -12 -39 -12 -46 2\n-57 9 -7 13 -8 9 -2 -3 6 0 36 7 67 12 51 8 74 -9 47z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3901 2554 c-22 -28 -28 -78 -11 -89 6 -4 10 7 10 25 0 17 7 44 15\n60 19 37 13 38 -14 4z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3977 2566 c-4 -10 -5 -21 -2 -24 9 -9 17 6 13 25 -3 17 -4 17 -11\n-1z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M570 2543 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M4040 2543 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M7451 2533 c10 -17 10 -29 -4 -64 -19 -48 -16 -62 6 -27 27 42 29 64\n7 89 -18 21 -19 21 -9 2z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M7530 2503 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M502 2188 l3 -53 3495 0 3495 0 3 53 c3 47 1 52 -17 52 -17 0 -21 -6\n-21 -35 l0 -35 -1720 0 -1720 0 0 35 c0 28 -4 35 -20 35 -16 0 -20 -7 -20 -35\nl0 -35 -1725 0 -1725 0 0 35 c0 25 -4 35 -16 35 -12 0 -14 -10 -12 -52z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3907 1752 c9 -5 7 -27 -7 -86 -12 -51 -15 -87 -10 -100 8 -19 9 -19\n9 6 1 22 19 107 37 171 4 13 0 17 -18 17 -14 0 -18 -3 -11 -8z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M414 1702 c-31 -21 -45 -91 -21 -110 10 -9 12 -4 9 23 -2 19 3 48 11\n64 9 17 15 31 14 31 -1 0 -7 -4 -13 -8z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M475 1700 c-3 -5 -4 -10 -1 -10 3 0 -1 -20 -8 -45 -12 -39 -12 -46 2\n-57 9 -7 13 -8 9 -2 -3 6 0 36 7 67 12 51 8 74 -9 47z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M2162 1687 c-13 -14 -22 -36 -22 -55 0 -43 16 -49 17 -6 1 19 8 46\n17 59 21 31 16 32 -12 2z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M2237 1693 c-4 -3 -7 -11 -7 -17 0 -6 5 -5 12 2 6 6 9 14 7 17 -3 3\n-9 2 -12 -2z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M580 1683 c17 -6 40 -32 40 -45 0 -5 -19 -29 -41 -53 l-42 -45 47 0\nc25 0 46 5 46 10 0 6 -14 10 -32 10 l-32 0 37 34 c20 18 37 38 37 43 0 20 -33\n53 -53 52 -15 0 -17 -2 -7 -6z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M2282 1678 c-14 -14 -16 -48 -2 -48 5 0 9 10 7 23 -2 17 3 22 23 22\n20 0 26 -6 28 -29 3 -22 -5 -37 -34 -67 l-38 -39 47 0 c32 0 47 4 47 13 0 9\n-10 12 -32 9 l-33 -4 33 32 c36 35 42 74 13 90 -26 13 -44 13 -59 -2z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M546 1664 c-8 -22 -7 -34 3 -34 5 0 9 11 9 25 0 29 -3 31 -12 9z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3965 1630 c0 -34 -6 -55 -20 -70 l-20 -23 22 14 c39 23 57 95 31\n117 -10 8 -13 -1 -13 -38z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M4032 1637 c-15 -18 -19 -35 -7 -33 5 0 10 8 10 16 0 21 35 19 49 -3\n9 -13 7 -25 -7 -50 l-19 -32 26 24 c31 29 33 52 8 74 -22 20 -46 22 -60 4z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M4100 1531 c0 -8 -12 -11 -37 -9 -22 2 -38 -2 -41 -10 -6 -20 74 -16\n82 4 4 9 4 19 1 22 -3 3 -5 0 -5 -7z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M502 1318 l3 -53 1735 -3 c954 -1 1745 0 1758 3 19 5 22 12 22 55 0\n43 -3 50 -20 50 -16 0 -20 -7 -20 -35 l0 -35 -855 0 -855 0 0 35 c0 24 -5 35\n-15 35 -10 0 -15 -11 -15 -35 l0 -35 -855 0 -855 0 0 35 c0 25 -4 35 -16 35\n-12 0 -14 -10 -12 -52z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3907 882 c10 -6 8 -26 -6 -87 -12 -50 -16 -86 -11 -99 8 -19 9 -19\n9 6 1 22 19 107 37 171 4 13 0 17 -18 17 -15 0 -19 -3 -11 -8z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M2141 814 c-23 -29 -27 -60 -11 -84 8 -12 10 -9 10 13 0 15 7 43 14\n62 18 42 14 44 -13 9z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M2220 823 c-1 -10 -7 -35 -14 -56 -12 -33 -12 -38 3 -46 13 -8 16 -4\n16 22 0 18 4 47 9 65 5 21 4 32 -3 32 -6 0 -11 -8 -11 -17z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3032 817 c-13 -14 -22 -36 -22 -55 0 -43 16 -49 17 -6 1 19 8 46 17\n59 21 31 16 32 -12 2z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3107 823 c-4 -3 -7 -11 -7 -17 0 -6 5 -5 12 2 6 6 9 14 7 17 -3 3\n-9 2 -12 -2z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M2303 814 c-7 -3 -13 -15 -13 -26 0 -12 3 -18 8 -14 4 4 7 13 7 19 0\n7 9 12 20 12 30 0 33 -43 4 -53 l-23 -9 22 -5 c16 -4 22 -14 22 -32 0 -21 -5\n-26 -25 -26 -16 0 -25 6 -25 15 0 8 -5 15 -11 15 -14 0 -7 -21 13 -33 20 -13\n64 -1 72 20 4 9 0 23 -8 31 -11 12 -12 19 -3 33 21 34 -20 70 -60 53z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3150 801 c-13 -25 -13 -31 0 -31 6 0 10 9 10 20 0 13 7 20 19 20 35\n0 37 -59 2 -61 -11 0 -8 -3 7 -10 32 -12 26 -51 -8 -60 l-25 -7 25 -1 c45 -2\n69 47 34 67 -14 8 -14 10 0 21 20 17 20 26 0 45 -21 22 -51 20 -64 -3z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3965 760 c0 -34 -6 -55 -20 -70 l-20 -23 22 14 c39 23 57 95 31 117\n-10 8 -13 -1 -13 -38z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M4032 768 c-15 -15 -16 -38 -2 -38 6 0 10 8 8 18 -2 11 4 18 20 20\n18 3 22 -1 22 -23 0 -17 -7 -29 -22 -35 l-23 -9 22 0 c22 -1 40 -32 28 -51\n-10 -16 -55 -12 -55 6 0 8 -5 12 -10 9 -20 -12 12 -36 43 -33 40 4 58 32 35\n54 -13 13 -14 20 -5 35 23 36 -30 78 -61 47z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M3140 694 c0 -8 5 -12 10 -9 6 3 10 10 10 16 0 5 -4 9 -10 9 -5 0\n-10 -7 -10 -16z"
                        }
                      }),
                      _c("path", {
                        attrs: {
                          d:
                            "M2242 448 l3 -53 865 -3 c476 -1 875 0 888 3 19 5 22 12 22 55 0 43\n-3 50 -20 50 -17 0 -20 -7 -20 -40 l0 -40 -420 0 -420 0 0 40 c0 29 -4 40 -15\n40 -11 0 -15 -11 -15 -40 l0 -40 -420 0 -420 0 0 40 c0 29 -4 40 -16 40 -12 0\n-14 -10 -12 -52z"
                        }
                      })
                    ]
                  )
                ]
              ),
              _c(
                "div",
                { staticClass: "algorithm p-3" },
                [
                  _c("deep", [
                    _vm._v("Bisection method algorithm over "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "N_0",
                          expression: "'N_0'"
                        }
                      ]
                    }),
                    _vm._v(" iterations")
                  ]),
                  _c("hr", {
                    staticClass: "mt-0 black",
                    staticStyle: { width: "360px" }
                  }),
                  _vm._v(" INPUTS: the function "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)",
                        expression: "'f(x)'"
                      }
                    ]
                  }),
                  _vm._v(", "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[a,b]",
                        expression: "'[a,b]'"
                      }
                    ]
                  }),
                  _vm._v(", the number of iterations "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "N_0",
                        expression: "'N_0'"
                      }
                    ]
                  }),
                  _c("br"),
                  _vm._v(" OUTPUT: the approximate solution "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "c",
                        expression: "'c'"
                      }
                    ]
                  }),
                  _c("br"),
                  _vm._v(" for "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "i = 1: N_0",
                        expression: "'i = 1: N_0'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~~~\\displaystyle{c = \\frac{a+b}{2}}",
                        expression:
                          "'~~~~\\\\displaystyle{c = \\\\frac{a+b}{2}}'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~~~if (f(c) == 0)",
                        expression: "'~~~~if (f(c) == 0)'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~~~~~\\text{break};",
                        expression: "'~~~~~~\\\\text{break};'"
                      }
                    ]
                  }),
                  _vm._v(" "),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: " ~~~~\\text{elseif} (f(a)*f(c) < 0 )",
                        expression: "' ~~~~\\\\text{elseif} (f(a)*f(c) < 0 )'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~~~~~b = c;",
                        expression: "'~~~~~~b = c;'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~~~\\text{else}",
                        expression: "'~~~~\\\\text{else}'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~~~~~a = c;",
                        expression: "'~~~~~~a = c;'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~~~\\text{end}",
                        expression: "'~~~~\\\\text{end}'"
                      }
                    ]
                  }),
                  _c("br"),
                  _vm._v(" end ")
                ],
                1
              ),
              _c(
                "div",
                {
                  staticClass: "my-3 mb-4 p-3",
                  staticStyle: { "background-color": "#e2e3e5" }
                },
                [
                  _c("span", { staticClass: "font-weight-bold" }, [
                    _vm._v("Example 3.2")
                  ]),
                  _vm._v(" The root of "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "e^x - 2 = 0",
                        expression: "'e^x - 2 = 0'"
                      }
                    ]
                  }),
                  _vm._v(
                    " is known to exist in [0,2]. Use 8 iterations to find an approximate value of the root (or find an approximate value of the root to within a tolerance of "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\varepsilon",
                        expression: "'\\\\varepsilon'"
                      }
                    ]
                  }),
                  _vm._v(") "),
                  _c("div", { staticClass: "container mb-4" }, [
                    _c("div", { staticClass: "row" }, [
                      _c("div", { staticClass: "col th" }, [_vm._v("iter.#")]),
                      _c("div", { staticClass: "col th" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "a",
                              expression: "'a'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("div", { staticClass: "col th" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "c",
                              expression: "'c'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("div", { staticClass: "col th" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "b",
                              expression: "'b'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("div", { staticClass: "col th" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "f(a)",
                              expression: "'f(a)'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("div", { staticClass: "col th" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "f(c)",
                              expression: "'f(c)'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("div", { staticClass: "col th" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "f(b)",
                              expression: "'f(b)'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("div", { staticClass: "col th" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "\\varepsilon",
                              expression: "'\\\\varepsilon'",
                              arg: "display"
                            }
                          ]
                        })
                      ])
                    ]),
                    _vm._m(2),
                    _vm._m(3),
                    _vm._m(4),
                    _vm._m(5),
                    _vm._m(6),
                    _vm._m(7),
                    _vm._m(8),
                    _vm._m(9)
                  ]),
                  _vm._v(" where "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\varepsilon",
                        expression: "'\\\\varepsilon'"
                      }
                    ]
                  }),
                  _vm._v(" = Error bound ")
                ]
              ),
              _vm._v(
                " The results given above were generated using the following matlab codes."
              ),
              _c("br"),
              _vm._v(" The MATLAB function f1.m defines the function "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f1(x) = e^x - 2",
                    expression: "'f1(x) = e^x - 2'"
                  }
                ]
              }),
              _vm._v(" whose root is being sought. "),
              _vm._m(10),
              _vm._v(
                " The MATLAB function bisect1.m perfoms the bisection procedure over [0,2] for "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "N_0",
                    expression: "'N_0'"
                  }
                ]
              }),
              _vm._v(" iterations. "),
              _c(
                "div",
                {
                  staticClass: "my-4",
                  staticStyle: { "font-style": "oblique" }
                },
                [
                  _vm._v(" %% -- bisect1.m "),
                  _c("br"),
                  _vm._v(
                    " %% This program is used for finding a root of f(x) = 0 "
                  ),
                  _c("br"),
                  _vm._v(" %% between [a,b] after N0 iterations."),
                  _c("br"),
                  _vm._v(" %% The program uses the function f1.m"),
                  _c("br"),
                  _vm._v(" N0 = 8; "),
                  _c("br"),
                  _vm._v(" a = 0;"),
                  _c("br"),
                  _vm._v(" b = 2;"),
                  _c("br"),
                  _vm._v(" for i = 1: N0"),
                  _c("br"),
                  _vm._v(" c = (a+b)/2;"),
                  _c("br"),
                  _vm._v(
                    " fprintf('%10.0f %10.4f %10.7f %10.6f %10.4f %10.4f %10.4f %10.7f\\n',i,a,c,b,f1(a),f1(c),f1(b),b-a)"
                  ),
                  _c("br"),
                  _vm._v(" if (f1(c) == 0)"),
                  _c("br"),
                  _vm._v(" break;"),
                  _c("br"),
                  _vm._v(" elseif (f1(a)*f1(c) < 0 )"),
                  _c("br"),
                  _vm._v(" b = c;"),
                  _c("br"),
                  _vm._v(" else"),
                  _c("br"),
                  _vm._v(" a = c;"),
                  _c("br"),
                  _c("move-right", [_vm._v("end")]),
                  _c("br"),
                  _c("br"),
                  _vm._v(" end"),
                  _c("br")
                ],
                1
              )
            ],
            1
          ),
          _c(
            "div",
            { staticClass: "my-4" },
            [
              _c("h5", { staticClass: "h5-responsive mt-4 mb-2" }, [
                _vm._v(" 3.1.2 Convergence Analysis of Bisection Method ")
              ]),
              _c(
                "div",
                { staticClass: "theorem my-3 p-3 " },
                [
                  _c("theorem-color", [_vm._v("Theorem 3.3")]),
                  _vm._v(" Assume that "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f \\in C[a,b]",
                        expression: "'f \\\\in C[a,b]'"
                      }
                    ]
                  }),
                  _vm._v(" and there exists a number "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "r \\in [a,b]",
                        expression: "'r \\\\in [a,b]'"
                      }
                    ]
                  }),
                  _vm._v(" such that "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(r) = 0",
                        expression: "'f(r) = 0'"
                      }
                    ]
                  }),
                  _vm._v(". If "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(a)",
                        expression: "'f(a)'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(b)",
                        expression: "'f(b)'"
                      }
                    ]
                  }),
                  _vm._v(" have opposite signs, and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\left\\{c_n \\right\\}_{n=0}^{\\infty}",
                        expression:
                          "'\\\\left\\\\{c_n \\\\right\\\\}_{n=0}^{\\\\infty}'"
                      }
                    ]
                  }),
                  _vm._v(
                    " represents the sequence of midpoints generated by the bisection process, then "
                  ),
                  _c("div", { staticClass: "container" }, [
                    _c("div", { staticClass: "row" }, [
                      _c("div", { staticClass: "col" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value:
                                " |r - c_n| \\leq \\frac{b - a}{2^{n+1}}~~~~~\\rm{for}~~n = 0, 1, \\ldots",
                              expression:
                                "' |r - c_n| \\\\leq \\\\frac{b - a}{2^{n+1}}~~~~~\\\\rm{for}~~n = 0, 1, \\\\ldots'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("div", { staticClass: "col" }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "(3.2)",
                              expression: "'(3.2)'",
                              arg: "display"
                            }
                          ]
                        })
                      ])
                    ])
                  ]),
                  _vm._v(" and therefore the sequence converges to the root "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "r",
                        expression: "'r'"
                      }
                    ]
                  }),
                  _vm._v(", that is "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: " \\lim_{n\\rightarrow \\infty} c_n = r",
                        expression:
                          "' \\\\lim_{n\\\\rightarrow \\\\infty} c_n = r'",
                        arg: "display"
                      }
                    ]
                  })
                ],
                1
              ),
              _vm._v(" Proof."),
              _c("br"),
              _vm._v(" Suppose "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f",
                    expression: "'f'"
                  }
                ]
              }),
              _vm._v(
                " is a continuous function that takes values of opposite sign at the ends of an interval "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a_0,b_0]",
                    expression: "'[a_0,b_0]'"
                  }
                ]
              }),
              _vm._v(". Then there is a root "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "r",
                    expression: "'r'"
                  }
                ]
              }),
              _vm._v(" in "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a_0,b_0]",
                    expression: "'[a_0,b_0]'"
                  }
                ]
              }),
              _vm._v(", and if we use the midpoint "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle{c_0=\frac{a_0+b_0}{2}}",
                    expression: "'\\\\displaystyle{c_0=\\frac{a_0+b_0}{2}}'"
                  }
                ]
              }),
              _vm._v(" as our estimate of "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "r",
                    expression: "'r'"
                  }
                ]
              }),
              _vm._v(", we have "),
              _c("div", { staticClass: "container" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: " |r - c_0| \\leq \\frac{b_0 - a_0}{2}",
                          expression:
                            "' |r - c_0| \\\\leq \\\\frac{b_0 - a_0}{2}'",
                          arg: "display"
                        }
                      ]
                    })
                  ]),
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "(3.3)",
                          expression: "'(3.3)'",
                          arg: "display"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _vm._v(" as illustrated in the Figure below. "),
              _c("div", { staticClass: "my-3" }, [
                _c(
                  "svg",
                  {
                    staticClass: "my-3",
                    attrs: {
                      version: "1.0",
                      xmlns: "http://www.w3.org/2000/svg",
                      width: "",
                      height: "",
                      viewBox: "0 0 1158.000000 334.000000",
                      preserveAspectRatio: "xMidYMid meet"
                    }
                  },
                  [
                    _c(
                      "g",
                      {
                        attrs: {
                          transform:
                            "translate(0.000000,334.000000) scale(0.100000,-0.100000)",
                          fill: "#000000",
                          stroke: "none"
                        }
                      },
                      [
                        _c("path", {
                          attrs: {
                            d:
                              "M2911 3067 c-9 -79 -6 -112 11 -115 24 -5 60 35 56 61 -2 12 -13 27\n-26 32 -17 7 -22 16 -19 33 2 12 -1 22 -7 22 -6 0 -13 -15 -15 -33z m49 -55\nc0 -30 -16 -52 -37 -52 -16 0 -17 34 -3 61 16 29 40 24 40 -9z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3338 3033 c-8 -10 -18 -25 -21 -35 -7 -21 16 -52 34 -45 10 4 9 6\n-3 6 -22 1 -24 39 -4 66 19 26 50 13 40 -17 -12 -40 -10 -53 10 -53 11 0 21 7\n23 15 4 13 3 13 -6 0 -16 -23 -23 -5 -13 33 9 32 8 36 -12 41 -30 8 -31 8 -48\n-11z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3012 3018 c-7 -7 -12 -26 -12 -43 0 -56 51 -77 72 -30 13 29 1 77\n-20 81 -7 1 -8 0 -2 -3 5 -2 10 -25 10 -49 0 -37 -3 -44 -20 -44 -25 0 -37 42\n-21 76 12 27 11 30 -7 12z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3462 3018 c-18 -18 -15 -74 6 -89 14 -11 15 -11 5 1 -16 18 -17 72\n-1 88 7 7 10 12 7 12 -3 0 -10 -5 -17 -12z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3511 2975 c1 -43 2 -46 10 -24 6 16 6 35 0 50 -8 20 -10 16 -10 -26z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3173 3003 c20 -2 54 -2 75 0 20 2 3 4 -38 4 -41 0 -58 -2 -37 -4z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3037 2903 c94 -2 252 -2 350 0 98 1 21 2 -172 2 -192 1 -273 -1\n-178 -2z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3182 2858 c-14 -14 -16 -48 -2 -48 5 0 9 10 7 23 -2 17 3 22 23 22\n20 0 26 -6 28 -29 3 -22 -5 -37 -34 -67 l-38 -39 47 0 c32 0 47 4 47 13 0 9\n-10 12 -32 9 l-33 -4 33 32 c36 35 42 74 13 90 -26 13 -44 13 -59 -2z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M671 2499 c-30 -10 -56 -21 -58 -23 -2 -2 24 -13 59 -25 44 -14 57\n-16 44 -6 -18 13 275 15 2498 15 1838 0 2515 -3 2510 -11 -7 -12 15 -7 71 15\nl30 12 -65 22 c-45 15 -59 17 -46 7 18 -13 -275 -15 -2493 -15 -2233 0 -2512\n2 -2501 15 7 8 11 15 9 14 -2 0 -28 -9 -58 -20z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4084 1950 c0 -85 2 -120 3 -77 2 42 2 112 0 155 -1 42 -3 7 -3 -78z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4950 1945 c0 -90 4 -145 10 -145 6 0 10 55 10 145 0 90 -4 145 -10\n145 -6 0 -10 -55 -10 -145z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4169 2001 c12 -8 12 -17 -2 -65 -8 -31 -12 -58 -8 -61 4 -2 15 21\n24 53 16 57 11 82 -17 82 -6 0 -5 -4 3 -9z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4243 1988 c-2 -16 1 -18 10 -9 7 7 8 14 1 21 -6 6 -10 2 -11 -12z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4695 1986 c-32 -32 -42 -73 -23 -92 13 -13 14 -12 11 13 -3 19 4 41\n21 66 29 43 26 48 -9 13z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4756 1981 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4811 1966 c-19 -22 -23 -78 -9 -106 28 -54 88 -23 88 45 0 58 -50\n96 -79 61z m54 -61 c0 -51 -3 -60 -19 -63 -24 -5 -36 14 -36 60 0 52 9 70 34\n66 19 -3 21 -9 21 -63z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M4413 1943 c26 -2 68 -2 95 0 26 2 4 3 -48 3 -52 0 -74 -1 -47 -3z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3276 1626 l-59 -23 62 -21 c48 -16 60 -18 51 -7 -11 13 135 15 1195\n15 1089 0 1206 -2 1195 -16 -10 -12 -1 -10 41 6 30 12 55 23 57 25 2 1 -25 12\n-60 24 -44 14 -57 16 -44 6 18 -13 -121 -15 -1188 -15 -1073 0 -1207 2 -1196\n15 15 18 18 19 -54 -9z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M562 768 c-7 -7 -12 -24 -12 -38 0 -14 5 -31 12 -38 19 -19 66 -14\n80 8 13 20 24 20 1263 20 1239 0 1250 0 1263 -20 8 -13 23 -20 42 -20 19 0 34\n7 42 20 13 20 24 20 1268 20 1244 0 1255 0 1268 -20 16 -27 68 -27 84 0 13 20\n24 20 2568 20 2544 0 2555 0 2568 -20 14 -22 61 -27 80 -8 15 15 15 61 0 76\n-17 17 -63 15 -78 -3 -11 -13 -309 -15 -2570 -15 -2261 0 -2559 2 -2570 15\n-16 19 -64 19 -80 0 -11 -13 -164 -15 -1270 -15 -1106 0 -1259 2 -1270 15 -16\n19 -64 19 -80 0 -11 -13 -164 -15 -1265 -15 -1101 0 -1254 2 -1265 15 -15 18\n-61 20 -78 3z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M10966 596 c3 -7 -2 -41 -10 -74 -20 -77 -20 -106 1 -123 15 -13 15\n-12 4 6 -11 17 -11 29 0 65 7 25 14 52 15 60 2 8 6 30 9 48 5 25 2 32 -9 32\n-9 0 -13 -6 -10 -14z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M504 552 c-29 -19 -46 -94 -24 -107 6 -4 10 7 10 27 0 18 7 45 14 61\n16 30 16 30 0 19z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M565 550 c-3 -5 -4 -10 -1 -10 3 0 -1 -20 -8 -45 -12 -39 -12 -46 2\n-57 9 -7 13 -8 9 -2 -3 6 0 36 7 67 12 51 8 74 -9 47z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M5731 534 c-23 -29 -27 -60 -11 -84 7 -11 10 -7 10 18 0 18 7 46 15\n62 19 37 13 38 -14 4z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M5807 546 c-4 -10 -5 -21 -2 -24 9 -9 17 6 13 25 -3 17 -4 17 -11 -1z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3187 539 c8 -8 7 -25 -3 -62 -16 -62 -17 -75 -5 -61 5 5 15 32 24\n61 14 51 9 73 -17 73 -6 0 -6 -4 1 -11z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M3256 531 c-4 -7 -5 -15 -2 -18 9 -9 19 4 14 18 -4 11 -6 11 -12 0z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M668 523 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M5850 511 c-15 -30 -12 -97 6 -115 34 -35 74 -6 74 54 0 71 -15 79\n-20 10 -4 -57 -8 -65 -25 -65 -18 0 -20 8 -23 62 -3 57 -1 62 20 66 23 4 23 4\n1 6 -13 0 -27 -7 -33 -18z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M11021 513 c10 -17 10 -29 -4 -64 -19 -48 -16 -62 6 -27 27 42 29 64\n7 89 -18 21 -19 21 -9 2z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M638 507 c-11 -27 -10 -85 2 -108 25 -45 80 -10 80 51 0 71 -15 79\n-20 10 -4 -57 -8 -65 -25 -65 -17 0 -21 8 -25 65 -3 42 -8 59 -12 47z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M11108 493 c7 -3 16 -2 19 1 4 3 -2 6 -13 5 -11 0 -14 -3 -6 -6z"
                          }
                        }),
                        _c("path", {
                          attrs: {
                            d:
                              "M11078 477 c-11 -27 -10 -85 2 -108 25 -45 80 -10 80 51 0 71 -15 79\n-20 10 -4 -57 -8 -65 -25 -65 -17 0 -21 8 -25 65 -3 42 -8 59 -12 47z"
                          }
                        })
                      ]
                    )
                  ]
                )
              ]),
              _vm._v(
                " If the bisection algorithm is now applied and if the computed quantities are denoted "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "a_0, b_0, c_0, a_1, b_1, c_1",
                    expression: "'a_0, b_0, c_0, a_1, b_1, c_1'"
                  }
                ]
              }),
              _vm._v(" and so on, then by the same reasoning, "),
              _c("div", { staticClass: "container" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "  |r - c_n| \\leq \\frac{b_n - a_n}{2}",
                          expression:
                            "'  |r - c_n| \\\\leq \\\\frac{b_n - a_n}{2}'",
                          arg: "display"
                        }
                      ]
                    })
                  ]),
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "(3.4)",
                          expression: "'(3.4)'",
                          arg: "display"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _vm._v(
                " Observe that the successive interval widths form the pattern "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "b_1 - a_1 = \\frac{b_0 - a_0}{2}",
                    expression: "'b_1 - a_1 = \\\\frac{b_0 - a_0}{2}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "~~~~~~~~~~~~~~~~~~~b_2 - a_2 = \\frac{b_1 - a_1}{2} = \\frac{b_0 - a_0}{2^2}",
                    expression:
                      "'~~~~~~~~~~~~~~~~~~~b_2 - a_2 = \\\\frac{b_1 - a_1}{2} = \\\\frac{b_0 - a_0}{2^2}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " It is left as an exercise for you to use mathematical induction to show that "
              ),
              _c("div", { staticClass: "container" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "|b_n - a_n| \\leq \\frac{b_0 - a_0}{2^n}",
                          expression:
                            "'|b_n - a_n| \\\\leq \\\\frac{b_0 - a_0}{2^n}'",
                          arg: "display"
                        }
                      ]
                    })
                  ]),
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "(3.5)",
                          expression: "'(3.5)'",
                          arg: "display"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _vm._v(" Combining equations (3.4) and (3.5) results in "),
              _c("div", { staticClass: "container" }, [
                _c("div", { staticClass: "row" }, [
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "0 \\leq  |r - c_n| \\leq \\frac{b_0 - a_0}{2^{n+1}}~~~~~~\\textrm{ for all } n",
                          expression:
                            "'0 \\\\leq  |r - c_n| \\\\leq \\\\frac{b_0 - a_0}{2^{n+1}}~~~~~~\\\\textrm{ for all } n'",
                          arg: "display"
                        }
                      ]
                    })
                  ]),
                  _c("div", { staticClass: "col" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "(3.6)",
                          expression: "'(3.6)'",
                          arg: "display"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _vm._v(
                " An automatic root-finding procedure needs to monitor progress toward the root and stop when current guess is close enough to the desired root. "
              ),
              _c("ul", [
                _c("li", [
                  _vm._v(
                    " Convergence checking will avoid searching to unnecessary accuracy. "
                  )
                ]),
                _c("li", [
                  _vm._v(" Check closeness of successive approximations "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "|x_k - x_{k-1}| < \\varepsilon ",
                        expression: "'|x_k - x_{k-1}| < \\\\varepsilon '",
                        arg: "display"
                      }
                    ]
                  })
                ]),
                _c("li", [
                  _vm._v(" Check how close "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)",
                        expression: "'f(x)'"
                      }
                    ]
                  }),
                  _vm._v(" is to zero at the current guess "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "|f(x_k)| < \\varepsilon",
                        expression: "'|f(x_k)| < \\\\varepsilon'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ]),
              _vm._v(
                " If an error tolerance has been prescribed in advance, it is possible to determine the number of steps required in the bisection method."
              ),
              _c("br"),
              _vm._v(" Suppose that we want "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "|r - c_n| < \\varepsilon.",
                    expression: "'|r - c_n| < \\\\varepsilon.'"
                  }
                ]
              }),
              _vm._v(
                " Then it is necessary to solve the following inequality for "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n",
                    expression: "'n'"
                  }
                ]
              }),
              _vm._v(": "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\frac{b - a}{2^{n+1}} < \\varepsilon",
                    expression: "'\\\\frac{b - a}{2^{n+1}} < \\\\varepsilon'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" By taking logarithms, we obtain "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " n > \\frac{\\log(b-a) - \\log(2\\varepsilon)}{\\log 2}",
                    expression:
                      "' n > \\\\frac{\\\\log(b-a) - \\\\log(2\\\\varepsilon)}{\\\\log 2}'",
                    arg: "display"
                  }
                ]
              }),
              _c(
                "div",
                {
                  staticClass: "my-3 mb-4 p-3",
                  staticStyle: { "background-color": "#e2e3e5" }
                },
                [
                  _c("span", { staticClass: "font-weight-bold" }, [
                    _vm._v("Example 3.3")
                  ]),
                  _vm._v(
                    " How many steps of the bisection algorithm are needed to compute the root of a function "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)",
                        expression: "'f(x)'"
                      }
                    ]
                  }),
                  _vm._v(" to a precision of "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\varepsilon  = 0.01",
                        expression: "'\\\\varepsilon  = 0.01'"
                      }
                    ]
                  }),
                  _vm._v(" on the interval [0,2]"),
                  _c("br"),
                  _c("deep", [_vm._v("Answer.")]),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "~~a = 0",
                        expression: "'~~a = 0'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "b = 2",
                        expression: "'b = 2'"
                      }
                    ]
                  }),
                  _vm._v(". "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "\\frac{b - a}{2^{n+1}} < \\varepsilon",
                        expression:
                          "'\\\\frac{b - a}{2^{n+1}} < \\\\varepsilon'",
                        arg: "display"
                      }
                    ]
                  }),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "~~~~\\frac{2-0}{2^{n+1}} < 0.01",
                        expression: "'~~~~\\\\frac{2-0}{2^{n+1}} < 0.01'",
                        arg: "display"
                      }
                    ]
                  }),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "~~~~~~~~2^n > 100",
                        expression: "'~~~~~~~~2^n > 100'",
                        arg: "display"
                      }
                    ]
                  }),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~n > \\frac{\\log 100}{\\log 2} = 6.64",
                        expression:
                          "'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~n > \\\\frac{\\\\log 100}{\\\\log 2} = 6.64'",
                        arg: "display"
                      }
                    ]
                  }),
                  _vm._v(" Thus no more than "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "n = 7",
                        expression: "'n = 7'"
                      }
                    ]
                  }),
                  _vm._v(
                    " iterations would be needed to achieve the convergence to within 0.01. "
                  )
                ],
                1
              ),
              _c("deep", [_vm._v("Advantages of the bisection method")]),
              _c("ul", [
                _c("li", [_vm._v(" It is simple to implement ")]),
                _c("li", [
                  _vm._v(" It offers a good estimate of the maximum error "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\varepsilon_{\\rm max}",
                        expression: "'\\\\varepsilon_{\\\\rm max}'"
                      }
                    ]
                  }),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "\\varepsilon_{\\rm max} \\leq \\frac{b - a}{2}",
                        expression:
                          "'\\\\varepsilon_{\\\\rm max} \\\\leq \\\\frac{b - a}{2}'",
                        arg: "display"
                      }
                    ]
                  })
                ]),
                _c("li", [
                  _vm._v(
                    " Convergence is guaranteed if the root lies inside the initial interval estimate "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[a,b]",
                        expression: "'[a,b]'"
                      }
                    ]
                  }),
                  _c("br"),
                  _c("br")
                ])
              ]),
              _c("deep", [_vm._v("Disadvantages of the bisection method")]),
              _c("ul", [
                _c("li", [_vm._v(" It converges slowly ")]),
                _c("li", [
                  _vm._v(" It requires an initial interval estimate "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[a,b]",
                        expression: "'[a,b]'"
                      }
                    ]
                  }),
                  _vm._v(" to enclose the root. ")
                ])
              ])
            ],
            1
          ),
          _c(
            "div",
            {
              staticClass: " mb-4 p-3 ",
              staticStyle: { "background-color": "#fff3e0" }
            },
            [
              _c(
                "h4",
                { staticClass: "h4-responsive" },
                [
                  _vm._v("Exercise 3.1 "),
                  _c("deep", [_vm._v("Exercises on the Bisection Method")])
                ],
                1
              ),
              _c("ol", [
                _c("li", [
                  _vm._v(" Apply the bisection method to the equation "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\sin x - 0.75 = 0",
                        expression: "'\\\\sin x - 0.75 = 0'"
                      }
                    ]
                  }),
                  _vm._v(
                    " in the interval [0.8, 0.9] and try to determine the actual root with three correct decimals. "
                  )
                ]),
                _c("li", [
                  _vm._v(
                    " Determine the first four approximations of the actual root of the equation "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x^3 -\\frac{1}{2}",
                        expression: "'x^3 -\\\\frac{1}{2}'"
                      }
                    ]
                  }),
                  _vm._v(" in the interval [0,1] by the bisection method. ")
                ]),
                _c("li", [
                  _vm._v(
                    " Take 4 steps of the bisection method to estimate a root of "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\sin x - 0.50",
                        expression: "'\\\\sin x - 0.50'"
                      }
                    ]
                  }),
                  _vm._v(
                    " starting with the intervals (a) [0,1] and (b) [2, 3]. Estimate the error in your result. "
                  )
                ]),
                _c("li", [
                  _vm._v(
                    " How many steps of the bisection method are required to bracket the root in an interval of length "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\leq 10^{-3}",
                        expression: "'\\\\leq 10^{-3}'"
                      }
                    ]
                  }),
                  _vm._v(" when the initial nontrivial bracket is "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[0, \\pi]",
                        expression: "'[0, \\\\pi]'"
                      }
                    ]
                  }),
                  _vm._v("? ")
                ]),
                _c("li", [
                  _vm._v(" Show that "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x) = x^3 - x - 1",
                        expression: "'f(x) = x^3 - x - 1'"
                      }
                    ]
                  }),
                  _vm._v(
                    " has exactly one zero in the interval [1, 2]. Approximate the zero with absolute error "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\leq 5\\times 10^{-3}",
                        expression: "'\\\\leq 5\\\\times 10^{-3}'"
                      }
                    ]
                  }),
                  _vm._v(" using the bisection method. ")
                ]),
                _c("li", [
                  _vm._v(" Use the bisection method to find "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\sqrt{3}",
                        expression: "'\\\\sqrt{3}'"
                      }
                    ]
                  }),
                  _vm._v(" with relative error "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\leq 5 \\times 10^{-3}",
                        expression: "'\\\\leq 5 \\\\times 10^{-3}'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ]),
                _c("li", [
                  _vm._v(" Consider the function "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x) = x^3 +4x^2 - 10",
                        expression: "'f(x) = x^3 +4x^2 - 10'"
                      }
                    ]
                  }),
                  _vm._v(". "),
                  _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                    _c("li", [
                      _vm._v(" Show that "),
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "f(x)",
                            expression: "'f(x)'"
                          }
                        ]
                      }),
                      _vm._v(" has exactly one root in [1, 2]. ")
                    ]),
                    _vm._m(11),
                    _c("li", [
                      _vm._v(
                        " How many iterations would be required to locate this zero to a tolerance of "
                      ),
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "10^{-5}",
                            expression: "'10^{-5}'"
                          }
                        ]
                      }),
                      _vm._v("? ")
                    ])
                  ]),
                  _c("br"),
                  _c("br")
                ]),
                _c("li", [
                  _c("p", { staticClass: "text-center" }, [
                    _vm._v(" MATLAB Exercises")
                  ]),
                  _vm._v(
                    " Use the Bisection method to find solutions accurate to within "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "10^{-5}",
                        expression: "'10^{-5}'"
                      }
                    ]
                  }),
                  _vm._v(
                    " for the following problems. Present your results in tabular form showing "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "a,c,b,f(a),f(c),f(b)",
                        expression: "'a,c,b,f(a),f(c),f(b)'"
                      }
                    ]
                  }),
                  _vm._v(" and the error bound "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\varepsilon",
                        expression: "'\\\\varepsilon'"
                      }
                    ]
                  }),
                  _vm._v(" at each step of the iteration. "),
                  _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle x - 2^{-x} = 0  ~~\\text{for }~~ 0\\leq x \\leq 1",
                            expression:
                              "'~~~~~~\\\\displaystyle x - 2^{-x} = 0  ~~\\\\text{for }~~ 0\\\\leq x \\\\leq 1'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle  e^x - x^2 + 3x - 2 = 0~~\\text{for }~~ 0 \\leq x \\leq 1",
                            expression:
                              "'~~~~~~\\\\displaystyle  e^x - x^2 + 3x - 2 = 0~~\\\\text{for }~~ 0 \\\\leq x \\\\leq 1'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle  2x\\cos(2x) - (x+1)^2 = 0 ~~\\text{for}~~-3 \\leq x \\leq -2",
                            expression:
                              "'~~~~~~\\\\displaystyle  2x\\\\cos(2x) - (x+1)^2 = 0 ~~\\\\text{for}~~-3 \\\\leq x \\\\leq -2'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle x\\cos x - 2x^2 + 3x - 1 = 0 ~~\\text{for}~~ 0.2 \\leq x \\leq 0.3",
                            expression:
                              "'~~~~~~\\\\displaystyle x\\\\cos x - 2x^2 + 3x - 1 = 0 ~~\\\\text{for}~~ 0.2 \\\\leq x \\\\leq 0.3'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle 3x - e^x = 0 ~~\\text{for}~~1 \\leq x \\leq 2",
                            expression:
                              "'~~~~~~\\\\displaystyle 3x - e^x = 0 ~~\\\\text{for}~~1 \\\\leq x \\\\leq 2'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle x + 3\\cos x - e^x = 0 ~~\\text{for}~~0 \\leq x \\leq 1",
                            expression:
                              "'~~~~~~\\\\displaystyle x + 3\\\\cos x - e^x = 0 ~~\\\\text{for}~~0 \\\\leq x \\\\leq 1'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle x^2 - 4x + 4 - \\ln x =0~~\\text{for}~~ 1 \\leq x \\leq 2",
                            expression:
                              "'~~~~~~\\\\displaystyle x^2 - 4x + 4 - \\\\ln x =0~~\\\\text{for}~~ 1 \\\\leq x \\\\leq 2'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle x + 1 - 2\\sin \\pi x = 0 ~~\\text{for}~~ 0 \\leq x \\leq 0.5",
                            expression:
                              "'~~~~~~\\\\displaystyle x + 1 - 2\\\\sin \\\\pi x = 0 ~~\\\\text{for}~~ 0 \\\\leq x \\\\leq 0.5'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle e^x -2 - \\cos(e^x-2)= 0 ~~\\text{for}~~ 0.5 \\leq x \\leq 1.5",
                            expression:
                              "'~~~~~~\\\\displaystyle e^x -2 - \\\\cos(e^x-2)= 0 ~~\\\\text{for}~~ 0.5 \\\\leq x \\\\leq 1.5'"
                          }
                        ]
                      })
                    ]),
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "~~~~~~\\displaystyle x^3 - 25 = 0 ~~\\text{for}~~ 2.5 \\leq x \\leq 3.5",
                            expression:
                              "'~~~~~~\\\\displaystyle x^3 - 25 = 0 ~~\\\\text{for}~~ 2.5 \\\\leq x \\\\leq 3.5'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          )
        ],
        1
      ),
      _c("div", { staticClass: "my-3" }, [
        _c(
          "h4",
          { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
          [_vm._v(" 3.2 Fixed Point Method ")]
        ),
        _c("hr", { staticClass: "blue mb-4 mt-0 " }),
        _vm._m(12),
        _c(
          "div",
          { staticClass: "my-3" },
          [
            _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
              _vm._v("3.2.1 Fixed Point Iteration")
            ]),
            _vm._v(" If the equation, "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f(x) = 0",
                  expression: "'f(x) = 0'"
                }
              ]
            }),
            _vm._v(" is rearranged in the form "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x = g(x)",
                  expression: "' x = g(x)'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" then an iterative method may be written as "),
            _c("div", { staticClass: "container" }, [
              _c("div", { staticClass: "row" }, [
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "x_{n+1} = g(x_n)~~~~~~~~~n = 0,1,2,\\ldots",
                        expression:
                          "'x_{n+1} = g(x_n)~~~~~~~~~n = 0,1,2,\\\\ldots'",
                        arg: "display"
                      }
                    ]
                  })
                ]),
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "(3.7)",
                        expression: "'(3.7)'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _vm._v(" where "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n",
                  expression: "'n'"
                }
              ]
            }),
            _vm._v(" is the number of iterative steps and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0",
                  expression: "'x_0'"
                }
              ]
            }),
            _vm._v(" is the initial guess. This method is called the "),
            _c("deep", [_vm._v("Fixed Point Iteration")]),
            _vm._v(" or "),
            _c("deep", [_vm._v("Successive Substitution Method.")]),
            _c("br"),
            _vm._v(
              " Fixed point iteration is a simple method. It only works when the iteration function is convergent. "
            ),
            _c("br"),
            _c("br"),
            _vm._v(" To solve "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "f(x) = 0",
                  expression: "'f(x) = 0'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" rewrite as "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_{new} = g(x_{old})",
                  expression: "' x_{new} = g(x_{old})'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " An algorithmic definition of the fixed point method is as follows: "
            ),
            _c(
              "div",
              { staticClass: "algorithm p-3 my-3" },
              [
                _c("deep", [_vm._v("Fixed point method algorithm ")]),
                _c("hr", {
                  staticClass: "mt-0 black",
                  staticStyle: { width: "240px" }
                }),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\text{initialize:} x_0 = \\ldots",
                      expression: "'\\\\text{initialize:} x_0 = \\\\ldots'"
                    }
                  ]
                }),
                _c("br"),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\text{for } n = 0,1,2,\\ldots;",
                      expression: "'\\\\text{for } n = 0,1,2,\\\\ldots;'"
                    }
                  ]
                }),
                _vm._v(" "),
                _c("br"),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "~~~~x_{n+1} = g(x_n)",
                      expression: "'~~~~x_{n+1} = g(x_n)'"
                    }
                  ]
                }),
                _c("br"),
                _vm._v(" if converged, stop"),
                _c("br"),
                _vm._v(" end ")
              ],
              1
            ),
            _c(
              "div",
              { staticClass: "note note-definition mb-2" },
              [
                _c("span", { staticClass: "text-success" }, [
                  _vm._v(" Definition 3.1")
                ]),
                _c("br"),
                _c("strong", [_vm._v("Definition of Fixed Point")]),
                _vm._v(" If "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c = g(c)",
                      expression: "'c = g(c)'"
                    }
                  ]
                }),
                _vm._v(", the we say "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(" is a "),
                _c("deep", [_vm._v(" fixed point")]),
                _vm._v(" for the function "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g(x)",
                      expression: "'g(x)'"
                    }
                  ]
                }),
                _vm._v(". ")
              ],
              1
            ),
            _c(
              "div",
              { staticClass: "theorem my-3 p-3 " },
              [
                _c("theorem-color", [_vm._v("Theorem 3.4 ")]),
                _c("deep", [_vm._v(" Fixed Point Theorem ")]),
                _c("br"),
                _vm._v(" Let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g \\in C[a,b]",
                      expression: "'g \\\\in C[a,b]'"
                    }
                  ]
                }),
                _vm._v(" be such that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g(x) \\in [a,b]",
                      expression: "'g(x) \\\\in [a,b]'"
                    }
                  ]
                }),
                _vm._v(", for all "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x",
                      expression: "'x'"
                    }
                  ]
                }),
                _vm._v(" in "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[a,b]",
                      expression: "'[a,b]'"
                    }
                  ]
                }),
                _vm._v(". Suppose, in addition, that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g'(x)",
                      expression: "'g\\'(x)'"
                    }
                  ]
                }),
                _vm._v(" exists on "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(a,b)",
                      expression: "'(a,b)'"
                    }
                  ]
                }),
                _vm._v(". Assume that a constant "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "K",
                      expression: "'K'"
                    }
                  ]
                }),
                _vm._v(" exists with "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "|g'(x)| \\leq K < 1,\\;;\\text{ for all } x \\text{ in } (a,b) ",
                      expression:
                        "'|g\\'(x)| \\\\leq K < 1,\\\\;\\;\\\\text{ for all } x \\\\text{ in } (a,b) '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Assume that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(" in "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(a,b)",
                      expression: "'(a,b)'"
                    }
                  ]
                }),
                _vm._v(" is a fixed point for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g",
                      expression: "'g'"
                    }
                  ]
                }),
                _vm._v(". Then if "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0",
                      expression: "'x_0'"
                    }
                  ]
                }),
                _vm._v(" is any point in ("),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(a,b)",
                      expression: "'(a,b)'"
                    }
                  ]
                }),
                _vm._v(", the sequence "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "x_{n+1} = g(x_n)~~~~~~~~~n = 0,1,2,\\ldots",
                      expression:
                        "'x_{n+1} = g(x_n)~~~~~~~~~n = 0,1,2,\\\\ldots'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" converges to the unique fixed point "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(". ")
              ],
              1
            ),
            _c("div", [
              _c("i", [_vm._v("Proof")]),
              _c("br"),
              _vm._v(" Let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "~~~~~~ e_n = ",
                    expression: "'~~~~~~ e_n = '"
                  }
                ]
              }),
              _vm._v(" "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c - x_n",
                    expression: "'c - x_n'"
                  }
                ]
              }),
              _vm._v(","),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: " \\;  n = 0,1,2,\\ldots",
                    expression: "' \\\\;  n = 0,1,2,\\\\ldots'"
                  }
                ]
              }),
              _vm._v(" "),
              _c("br"),
              _vm._v(" Now "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "~~~~e_n = g(c) - g(x_{n-1}) ,\\; n = 1,2,3,\\ldots",
                    expression:
                      "'~~~~e_n = g(c) - g(x_{n-1}) ,\\\\; n = 1,2,3,\\\\ldots'"
                  }
                ]
              }),
              _c("br"),
              _vm._v(" So "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "~~~~~~~ e_n = g'(\\xi_n)(c - x_{n-1})",
                    expression: "'~~~~~~~ e_n = g\\'(\\\\xi_n)(c - x_{n-1})'"
                  }
                ]
              }),
              _c("br"),
              _c("br"),
              _vm._v(" by the mean value theorem "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle g'(\\xi_n) = \\frac{g(c) - g(x_{n-1})}{c - x_{n-1}}",
                    expression:
                      "'\\\\displaystyle g\\'(\\\\xi_n) = \\\\frac{g(c) - g(x_{n-1})}{c - x_{n-1}}'"
                  }
                ]
              }),
              _vm._v(", where "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\xi_n",
                    expression: "'\\\\xi_n'"
                  }
                ]
              }),
              _vm._v(" lies between "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c",
                    expression: "'c'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_{n-1}",
                    expression: "'x_{n-1}'"
                  }
                ]
              }),
              _vm._v(". Hence "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "e_n =  g'(\\xi_n)e_{n-1}~,~~~~~n = 1,2,3\\ldots",
                    expression:
                      "'e_n =  g\\'(\\\\xi_n)e_{n-1}~,~~~~~n = 1,2,3\\\\ldots'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Then using the inequality "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "g'(\\xi_n) < K < 1",
                    expression: "'g\\'(\\\\xi_n) < K < 1'"
                  }
                ]
              }),
              _vm._v(" we have "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "|e_n| \\leq K|e_{n-1}| \\leq K^2|e_{n-2}| \\leq K^3|e_{n-3}| \\leq \\ldots \\leq K^n|e_0|",
                    expression:
                      "'|e_n| \\\\leq K|e_{n-1}| \\\\leq K^2|e_{n-2}| \\\\leq K^3|e_{n-3}| \\\\leq \\\\ldots \\\\leq K^n|e_0|'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" But "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "|e_0| = |c - x_0|",
                    expression: "'|e_0| = |c - x_0|'"
                  }
                ]
              }),
              _vm._v(" is less than the length of the interval "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(a,b)",
                    expression: "'(a,b)'"
                  }
                ]
              }),
              _vm._v(" which is a finite number. Also"),
              _c("br"),
              _vm._v(" since "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "0 \\leq K \\leq 1",
                    expression: "'0 \\\\leq K \\\\leq 1'"
                  }
                ]
              }),
              _vm._v(", we have "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\lim_{n \\rightarrow \\infty} K^n = 0",
                    expression: "'\\\\lim_{n \\\\rightarrow \\\\infty} K^n = 0'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " \\lim_{n \\rightarrow \\infty} |e_n| = \\lim_{n \\rightarrow \\infty} |c - x_n| leq  \\lim_{n \\rightarrow \\infty}K^n |c - x_0| = 0",
                    expression:
                      "' \\\\lim_{n \\\\rightarrow \\\\infty} |e_n| = \\\\lim_{n \\\\rightarrow \\\\infty} |c - x_n| \\leq  \\\\lim_{n \\\\rightarrow \\\\infty}K^n |c - x_0| = 0'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Hence the numbers "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_n",
                    expression: "'x_n'"
                  }
                ]
              }),
              _vm._v(" form a sequence that converges to the root "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c \\text{ as } n",
                    expression: "'c \\\\text{ as } n'"
                  }
                ]
              }),
              _vm._v(" increases, i.e "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\{x_n\\}_0^\\infty",
                    expression: "'\\\\{x_n\\\\}_0^\\\\infty'"
                  }
                ]
              }),
              _vm._v(" converges to "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c",
                    expression: "'c'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c(
              "div",
              { staticClass: "theorem my-3 p-3 " },
              [
                _c("theorem-color", [_vm._v("Theorem 3.5 ")]),
                _c("deep", [_vm._v(" Brouwer - Existence and Uniqueness) ")]),
                _c("br"),
                _vm._v(" Suppose "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g \\in C[a, b]",
                      expression: "'g \\\\in C[a, b]'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g(x) \\in  [a, b]",
                      expression: "'g(x) \\\\in  [a, b]'"
                    }
                  ]
                }),
                _vm._v(" for all "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x \\in [a, b]",
                      expression: "'x \\\\in [a, b]'"
                    }
                  ]
                }),
                _vm._v(". Then "),
                _c("div", { staticStyle: { "font-family": "inherit" } }, [
                  _c("ul", [
                    _c("li", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "g",
                            expression: "'g'"
                          }
                        ]
                      }),
                      _vm._v(" has fixed point in "),
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "[a, b]",
                            expression: "'[a, b]'"
                          }
                        ]
                      }),
                      _vm._v(" (existence), and ")
                    ]),
                    _c("li", [
                      _vm._v(" if, in addition, "),
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "g'(x)",
                            expression: "'g\\'(x)'"
                          }
                        ]
                      }),
                      _vm._v(" exists on "),
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(a, b)",
                            expression: "'(a, b)'"
                          }
                        ]
                      }),
                      _vm._v(" and if there exists a constant "),
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "0 < K < 1",
                            expression: "'0 < K < 1'"
                          }
                        ]
                      }),
                      _vm._v(" such that "),
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "|g'(x)| \\leq K ,\\;\\; \\text{for all}\\;\\;\\; x \\in (a, b),",
                            expression:
                              "'|g\\'(x)| \\\\leq K ,\\\\;\\\\; \\\\text{for all}\\\\;\\\\;\\\\; x \\\\in (a, b),'",
                            arg: "display"
                          }
                        ]
                      }),
                      _vm._v(" then there is exactly one fixed point in "),
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "[a, b]",
                            expression: "'[a, b]'"
                          }
                        ]
                      }),
                      _vm._v(" (uniqueness) ")
                    ])
                  ])
                ])
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 3.4")
                ]),
                _vm._v(" Show that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g(x) = 2^{-x}",
                      expression: "'g(x) = 2^{-x}'"
                    }
                  ]
                }),
                _vm._v(" has a unique fixed point on [0, 1]."),
                _c("br"),
                _c("br"),
                _c("deep", [_vm._v("Answer")]),
                _vm._v(": "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g \\in C[0,]]",
                      expression: "'g \\\\in C[0,]]'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g'(x) = -(\\ln 2)2^{-x} < 0",
                      expression: "'g\\'(x) = -(\\\\ln 2)2^{-x} < 0'"
                    }
                  ]
                }),
                _vm._v(" which implies "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g",
                      expression: "'g'"
                    }
                  ]
                }),
                _vm._v(" is monotone decreasing. "),
                _c("ul", [
                  _c("li", [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "g(0) = 1",
                          expression: "'g(0) = 1'"
                        }
                      ]
                    }),
                    _vm._v(" and "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "g(1) = 1/2 > 0.",
                          expression: "'g(1) = 1/2 > 0.'"
                        }
                      ]
                    }),
                    _vm._v(" Since "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "g",
                          expression: "'g'"
                        }
                      ]
                    }),
                    _vm._v(" is decreasing then "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "g(x) \\in [0, 1]",
                          expression: "'g(x) \\\\in [0, 1]'"
                        }
                      ]
                    }),
                    _vm._v(" for all "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "x \\in [0, 1]",
                          expression: "'x \\\\in [0, 1]'"
                        }
                      ]
                    }),
                    _vm._v(". ")
                  ]),
                  _c("li", [
                    _vm._v(" By the first conclusion of the Brouwer Theorem, "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "g",
                          expression: "'g'"
                        }
                      ]
                    }),
                    _vm._v(" has a fixed point in "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "[0, 1]",
                          expression: "'[0, 1]'"
                        }
                      ]
                    }),
                    _vm._v(". ")
                  ]),
                  _c("li", [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "|g'(x)| = |-(\\ln 2)2^{-x}| \\leq |\\ln 2| < 1",
                          expression:
                            "'|g\\'(x)| = |-(\\\\ln 2)2^{-x}| \\\\leq |\\\\ln 2| < 1'"
                        }
                      ]
                    }),
                    _vm._v(" for "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "x \\in (0,1)",
                          expression: "'x \\\\in (0,1)'"
                        }
                      ]
                    }),
                    _vm._v(". ")
                  ]),
                  _c("li", [
                    _vm._v(
                      " By the second conclusion of the Brouwer Theorem, the fixed point is unique. "
                    )
                  ])
                ])
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 3.5")
                ]),
                _vm._v(" Given "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = x^3 - 7x  + 2 = 0",
                      expression: "'f(x) = x^3 - 7x  + 2 = 0'"
                    }
                  ]
                }),
                _vm._v(" in [0,1]. Find a sequence that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\{x_n\\}",
                      expression: "'\\\\{x_n\\\\}'"
                    }
                  ]
                }),
                _vm._v(" that converges to the root of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x)=0",
                      expression: "'f(x)=0'"
                    }
                  ]
                }),
                _vm._v(" in [0,1]."),
                _c("br"),
                _c("br"),
                _c("deep", [_vm._v("Answer:")]),
                _vm._v(" Rewrite "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x)=0",
                      expression: "'f(x)=0'"
                    }
                  ]
                }),
                _vm._v(" as "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x = \\frac{1}{7}(x^3+2)",
                      expression: "'x = \\\\frac{1}{7}(x^3+2)'"
                    }
                  ]
                }),
                _vm._v(". Then "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g(x)  = \\frac{1}{7}(x^3+2)",
                      expression: "'g(x)  = \\\\frac{1}{7}(x^3+2)'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g'(x)=\\frac{3x^2}{7} < \\frac{3}{7}",
                      expression: "'g\\'(x)=\\\\frac{3x^2}{7} < \\\\frac{3}{7}'"
                    }
                  ]
                }),
                _vm._v(" for all "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x \\in [0,1]",
                      expression: "'x \\\\in [0,1]'"
                    }
                  ]
                }),
                _vm._v(". Hence, by the FPT the sequence "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\{x_n\\}",
                      expression: "'\\\\{x_n\\\\}'"
                    }
                  ]
                }),
                _vm._v(" defined by "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "x_{n+1} = \\frac{1}{7}(x_n^3+2)",
                      expression: "'x_{n+1} = \\\\frac{1}{7}(x_n^3+2)'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" converges to a root of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x^3 - 7x + 2 = 0",
                      expression: "'x^3 - 7x + 2 = 0'"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 3.6")
                ]),
                _vm._v(" Solve "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = x^3 - x - 1 = 0",
                      expression: "'f(x) = x^3 - x - 1 = 0'"
                    }
                  ]
                }),
                _vm._v(" on "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(1,2)",
                      expression: "'(1,2)'"
                    }
                  ]
                }),
                _vm._v(" using the fixed point method with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0 = 1.3",
                      expression: "'x_0 = 1.3'"
                    }
                  ]
                }),
                _vm._v("."),
                _c("br"),
                _c("br"),
                _c("deep", [_vm._v("Answer:")]),
                _vm._v(" Note "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(1) = -1",
                      expression: "'f(1) = -1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(2) = 5",
                      expression: "'f(2) = 5'"
                    }
                  ]
                }),
                _vm._v(", Therefore by the IVT a root exists on (1,2). Set "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g(x)=(1 + x)^{\\frac{1}{3}}",
                      expression: "'g(x)=(1 + x)^{\\\\frac{1}{3}}'"
                    }
                  ]
                }),
                _vm._v(". Note that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g'(x)=\\frac{1}{3}(1+x)^{-2/3}",
                      expression: "'g\\'(x)=\\\\frac{1}{3}(1+x)^{-2/3}'"
                    }
                  ]
                }),
                _vm._v(". So, on (1,2) we have "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\frac{1}{3(1+2)^{2/3}} < g'(x) < \\frac{1}{3(1+1)^{2/3}}",
                      expression:
                        "'\\\\frac{1}{3(1+2)^{2/3}} < g\\'(x) < \\\\frac{1}{3(1+1)^{2/3}}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Therefore "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " 0 < g'(x) <  \\frac{1}{3(2^{2/3})} = K",
                      expression:
                        "' 0 < g\\'(x) <  \\\\frac{1}{3(2^{2/3})} = K'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "|g'(x)| \\leq K < 1",
                      expression: "'|g\\'(x)| \\\\leq K < 1'"
                    }
                  ]
                }),
                _vm._v(" on (1,2). By the FPT the sequence "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "x_{n+1}  = (1+x_n)^{\\frac{1}{3}}",
                      expression: "'x_{n+1}  = (1+x_n)^{\\\\frac{1}{3}}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" will converge to a fixed point on (1,2). ")
              ],
              1
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "~~~~~~~~~~~~~~x_{n+1} = (1+x_n)^{\\frac{1}{3}}~,~~~~~x_0 = 1.3",
                  expression:
                    "'~~~~~~~~~~~~~~x_{n+1} = (1+x_n)^{\\\\frac{1}{3}}~,~~~~~x_0 = 1.3'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "x_{1} =           1.320006122",
                  expression: "'x_{1} =           1.320006122'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "x_{2} =          1.323822354",
                  expression: "'x_{2} =          1.323822354'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_3 =          1.324547818",
                  expression: "' x_3 =          1.324547818'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_4     =     1.324685639",
                  expression: "' x_4     =     1.324685639'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_5     =     1.324711818",
                  expression: "' x_5     =     1.324711818'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "  x_6       =   1.324716791",
                  expression: "'  x_6       =   1.324716791'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "   x_7      =    1.324717736",
                  expression: "'   x_7      =    1.324717736'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "x_8      =    1.324717915",
                  expression: "'x_8      =    1.324717915'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_9      =    1.324717949",
                  expression: "' x_9      =    1.324717949'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_{10}      =    1.324717956",
                  expression: "' x_{10}      =    1.324717956'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "  x_{11}      =    1.324717957",
                  expression: "'  x_{11}      =    1.324717957'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "  x_{12}      =    1.324717957",
                  expression: "'  x_{12}      =    1.324717957'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "  x_{13}      =    1.324717957",
                  expression: "'  x_{13}      =    1.324717957'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_{14}      =    1.324717957",
                  expression: "' x_{14}      =    1.324717957'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "x_{15}      =    1.324717957",
                  expression: "'x_{15}      =    1.324717957'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" The root is "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x = 1.324717957",
                  expression: "'x = 1.324717957'"
                }
              ]
            }),
            _vm._v("."),
            _c("br"),
            _c("br"),
            _vm._v(
              " The results were generated using the MATLAB code fixedpoint.m which uses a function "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "g(x)",
                  expression: "'g(x)'"
                }
              ]
            }),
            _vm._v(" defined in the MATLAB file g.m. "),
            _vm._m(13),
            _vm._m(14),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 3.7")
                ]),
                _vm._v(
                  " Use the fixed point iteration method to determine a solution accurate to within "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "10^{-2}",
                      expression: "'10^{-2}'"
                    }
                  ]
                }),
                _vm._v(" for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x^4 - 3x^2 - 3 = 0",
                      expression: "'x^4 - 3x^2 - 3 = 0'"
                    }
                  ]
                }),
                _vm._v(" on [1,2]. Use "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0 = 1",
                      expression: "'x_0 = 1'"
                    }
                  ]
                }),
                _vm._v(". "),
                _c("br"),
                _c("br"),
                _c("deep", [_vm._v("Answer:")]),
                _vm._v(" Set "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x = (3x^2 + 3)^{1/4}",
                      expression: "'x = (3x^2 + 3)^{1/4}'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "g(x) = (3x^2 + 3)^{1/4}",
                      expression: "'g(x) = (3x^2 + 3)^{1/4}'"
                    }
                  ]
                }),
                _vm._v(". "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "x_{n+1} = (3x^2  + 3)^{\\frac{1}{4}}",
                      expression: "'x_{n+1} = (3x^2  + 3)^{\\\\frac{1}{4}}'",
                      arg: "display"
                    }
                  ]
                }),
                _c("br"),
                _c("br"),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "  x_1 =            1.565085",
                      expression: "'  x_1 =            1.565085'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " x_2 =             1.793573 ",
                      expression: "' x_2 =             1.793573 '",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " x_3 =            1.885944",
                      expression: "' x_3 =            1.885944'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "    x_4 =             1.922848",
                      expression: "'    x_4 =             1.922848'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "  x_5 =           1.937508",
                      expression: "'  x_5 =           1.937508'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "  x_5 =          1.937508",
                      expression: "'  x_5 =          1.937508'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Thus "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_6 = 1.943317",
                      expression: "'x_6 = 1.943317'"
                    }
                  ]
                }),
                _vm._v(" is accurate to within "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "10^{-2}",
                      expression: "'10^{-2}'"
                    }
                  ]
                }),
                _vm._v(
                  ". The results for this example can be computed manually using a calculator or the following MATLAB codes can be used. "
                )
              ],
              1
            ),
            _vm._m(15),
            _vm._m(16)
          ],
          1
        ),
        _c("div", { staticClass: "my-3" }, [
          _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
            _vm._v("3.2.2 Error estimate of fixed point method")
          ]),
          _vm._v(
            " While the Fixed-Point Theorem justifies that the algorithm will converge to a fixed-point/solution of the function/equation, it does not tell us anything directly about the error present in each stage of the algorithm. "
          ),
          _c(
            "div",
            { staticClass: "theorem my-3 p-3 " },
            [
              _c("theorem-color", [_vm._v("Theorem 3.6 ")]),
              _vm._v(" If "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "g",
                    expression: "'g'"
                  }
                ]
              }),
              _vm._v(
                " satisfied the hypotheses of the Fixed-Point Theorem, then bounds for the error involved in using "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_n",
                    expression: "'x_n'"
                  }
                ]
              }),
              _vm._v(" to approximate "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x",
                    expression: "'x'"
                  }
                ]
              }),
              _vm._v(" are "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "|x_n - x| \\leq  K^n  { \\rm max }\\{x_0 - a, b - x_0\\}",
                    expression:
                      "'|x_n - x| \\\\leq  K^n  { \\\\rm max }\\\\{x_0 - a, b - x_0\\\\}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "|x_n - x| \\leq \\frac{K^n}{1-K}|x_1 - x_0|,\\;\\; \\text{for}\\;\\; n \\geq 1.",
                    expression:
                      "'|x_n - x| \\\\leq \\\\frac{K^n}{1-K}|x_1 - x_0|,\\\\;\\\\; \\\\text{for}\\\\;\\\\; n \\\\geq 1.'",
                    arg: "display"
                  }
                ]
              })
            ],
            1
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 3.8")
              ]),
              _vm._v(" Consider the equation "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x^3 + 4x^2 -10 = 0",
                    expression: "'x^3 + 4x^2 -10 = 0'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                _c("li", [
                  _vm._v(
                    " Develop a fixed point function to approximate a solution to this equation on the interval [1, 2]. "
                  )
                ]),
                _c("li", [
                  _vm._v(
                    " Determine the number of iterations necessary to estimate the solution to within "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "10^{-6}",
                        expression: "'10^{-6}'"
                      }
                    ]
                  }),
                  _vm._v(" if "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x_0 = 1",
                        expression: "'x_0 = 1'"
                      }
                    ]
                  })
                ]),
                _c("li", [_vm._v(" Estimate the solution ")])
              ]),
              _c("deep", [_vm._v("Answer:")]),
              _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                _c("li", [
                  _vm._v(" Rewrite "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x^3 + 4x^2 - 10 = 0",
                        expression: "'x^3 + 4x^2 - 10 = 0'"
                      }
                    ]
                  }),
                  _vm._v(" as "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x^2(x+4) = 10",
                        expression: "'x^2(x+4) = 10'"
                      }
                    ]
                  }),
                  _vm._v(", thus "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "x = \\sqrt{\\frac{10}{x+4}} = g(x) ",
                        expression: "'x = \\\\sqrt{\\\\frac{10}{x+4}} = g(x) '",
                        arg: "display"
                      }
                    ]
                  })
                ]),
                _c("li", [
                  _vm._v(" Upon taking the derivative of "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "g(x)",
                        expression: "'g(x)'"
                      }
                    ]
                  }),
                  _vm._v(" we see that on [1,2], we have "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "|g'(x)| = \\left|\\frac{-5}{\\sqrt{10}(x+4)^{3/2}}\\right|  \\leq \\frac{5}{\\sqrt{10}(5)^{3/2}} =0.1415 = K ",
                        expression:
                          "'|g\\'(x)| = \\\\left|\\\\frac{-5}{\\\\sqrt{10}(x+4)^{3/2}}\\\\right|  \\\\leq \\\\frac{5}{\\\\sqrt{10}(5)^{3/2}} =0.1415 = K '",
                        arg: "display"
                      }
                    ]
                  }),
                  _vm._v(" If "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x_0 = 1",
                        expression: "'x_0 = 1'"
                      }
                    ]
                  }),
                  _vm._v(", the "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x_1 = \\sqrt{2}",
                        expression: "'x_1 = \\\\sqrt{2}'"
                      }
                    ]
                  }),
                  _vm._v(", and "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          " |x_n - x| \\leq \\frac{K^n}{1 - K}|x_1 - x_0| = \\frac{0.1415^n}{1-0.1415}|\\sqrt{2}-1| < 10^{-6}",
                        expression:
                          "' |x_n - x| \\\\leq \\\\frac{K^n}{1 - K}|x_1 - x_0| = \\\\frac{0.1415^n}{1-0.1415}|\\\\sqrt{2}-1| < 10^{-6}'",
                        arg: "display"
                      }
                    ]
                  }),
                  _vm._v(" Thus, "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "n \\geq 7",
                        expression: "'n \\\\geq 7'"
                      }
                    ]
                  })
                ]),
                _c("li", [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x_7 \\approx 1.365232",
                        expression: "'x_7 \\\\approx 1.365232'"
                      }
                    ]
                  })
                ])
              ])
            ],
            1
          )
        ]),
        _c("div", { staticClass: "my-3" }, [
          _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
            _vm._v("3.2.3 Rate of Convergence")
          ]),
          _c(
            "div",
            { staticClass: "note note-definition mt-2 mb-3" },
            [
              _c("span", { staticClass: "text-success" }, [
                _vm._v(" Definition 3.2 ")
              ]),
              _c("strong", [_vm._v("Rate of Convergence")]),
              _vm._v(" "),
              _c("br"),
              _vm._v(" Suppose that "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\{x_n \\}",
                    expression: "'\\\\{x_n \\\\}'"
                  }
                ]
              }),
              _vm._v(
                " is a sequence of numbers generated by an algorithm, and the limit of the sequence is "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "s",
                    expression: "'s'"
                  }
                ]
              }),
              _vm._v(". If "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\lim_{n \\rightarrow \\infty} \\frac{|x_{n+1} - s|}{|x_n - s|^p} = K~~~~~,K \\neq 0",
                    expression:
                      "'\\\\lim_{n \\\\rightarrow \\\\infty} \\\\frac{|x_{n+1} - s|}{|x_n - s|^p} = K~~~~~,K \\\\neq 0'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" for some positive constants "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "K",
                    expression: "'K'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "p",
                    expression: "'p'"
                  }
                ]
              }),
              _vm._v(", the we say that the sequence "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\{x_n \\}",
                    expression: "'\\\\{x_n \\\\}'"
                  }
                ]
              }),
              _vm._v(" converges to "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "s",
                    expression: "'s'"
                  }
                ]
              }),
              _vm._v(" with "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "p",
                    expression: "'p'"
                  }
                ]
              }),
              _vm._v(" being the "),
              _c("deep", [_vm._v("order of convergence.")]),
              _vm._v(" "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "K",
                    expression: "'K'"
                  }
                ]
              }),
              _vm._v(" is called the asymptotic error constant. ")
            ],
            1
          ),
          _vm._v(" If "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "p = 1",
                expression: "'p = 1'"
              }
            ]
          }),
          _vm._v(", convergence is linear."),
          _c("br"),
          _vm._v(" If "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "p = 2",
                expression: "'p = 2'"
              }
            ]
          }),
          _vm._v(", convergence is quadratic."),
          _c("br"),
          _vm._v(" If "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "p = 1",
                expression: "'p = 1'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "K = 1",
                expression: "'K = 1'"
              }
            ]
          }),
          _vm._v(", convergence is sub-linear"),
          _c("br"),
          _vm._v(" If "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "p = 1",
                expression: "'p = 1'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "K = 0",
                expression: "'K = 0'"
              }
            ]
          }),
          _vm._v(", convergence is super-linear"),
          _c("br"),
          _vm._v(" Larger values of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "p",
                expression: "'p'"
              }
            ]
          }),
          _vm._v(" imply faster rates of convergence. ")
        ]),
        _c(
          "div",
          { staticClass: "my-3" },
          [
            _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
              _vm._v("3.2.4 Convergence of the Fixed Point Method")
            ]),
            _vm._v(
              " Suppose that an algorithm based on the fixed point iteration is employed. "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "s = g(s)",
                  expression: "'s = g(s)'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Suppose that an algorithm based on the fixed point iteration is employed. "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " x_{n+1} = g(x_n)",
                  expression: "' x_{n+1} = g(x_n)'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Assume that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "g(x)",
                  expression: "'g(x)'"
                }
              ]
            }),
            _vm._v(" is continuous on an interval "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "[a,b]",
                  expression: "'[a,b]'"
                }
              ]
            }),
            _vm._v(" and differentiable on "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(a,b)",
                  expression: "'(a,b)'"
                }
              ]
            }),
            _vm._v(", where "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(a,b)",
                  expression: "'(a,b)'"
                }
              ]
            }),
            _vm._v(" is an interval containing "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "s",
                  expression: "'s'"
                }
              ]
            }),
            _vm._v(" and all the estimates "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0, x_1, x_2, \\ldots",
                  expression: "'x_0, x_1, x_2, \\\\ldots'"
                }
              ]
            }),
            _vm._v(". The Mean Value Theorem tells us that "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "|g(x_n) - g(s)| = |g'(c_n)(x_n - s)|",
                  expression: "'|g(x_n) - g(s)| = |g\\'(c_n)(x_n - s)|'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" where "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "c_n",
                  expression: "'c_n'"
                }
              ]
            }),
            _vm._v(" lies between "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "s",
                  expression: "'s'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_n",
                  expression: "'x_n'"
                }
              ]
            }),
            _vm._v(". Then "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "\\frac{|x_{n+1} - s|}{|x_n - s|} = g'(c_n) ",
                  expression:
                    "'\\\\frac{|x_{n+1} - s|}{|x_n - s|} = g\\'(c_n) '",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" If "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "g'",
                  expression: "'g\\''"
                }
              ]
            }),
            _vm._v(" is continuous at "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "s",
                  expression: "'s'"
                }
              ]
            }),
            _vm._v(", then "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " \\lim_{n \\rightarrow \\infty} |g'(c_n)| = |g'(s)| ",
                  expression:
                    "' \\\\lim_{n \\\\rightarrow \\\\infty} |g\\'(c_n)| = |g\\'(s)| '",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\text{So}~~~~ \\lim_{n \\rightarrow \\infty} \\frac{|x_{n+1} - s|}{|x_n - s|} = |g'(s)| = K",
                  expression:
                    "'\\\\text{So}~~~~ \\\\lim_{n \\\\rightarrow \\\\infty} \\\\frac{|x_{n+1} - s|}{|x_n - s|} = |g\\'(s)| = K'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Therefore "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "p = 1",
                  expression: "'p = 1'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "K = |g'(s)|",
                  expression: "'K = |g\\'(s)|'"
                }
              ]
            }),
            _vm._v(", so the convergence is linear in this case if "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "K >0",
                  expression: "'K >0'"
                }
              ]
            }),
            _vm._v("."),
            _c("br"),
            _vm._v(
              " Note that for a linearly convergent scheme, we must have "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "K < 1",
                  expression: "'K < 1'"
                }
              ]
            }),
            _vm._v(". If "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "K",
                  expression: "'K'"
                }
              ]
            }),
            _vm._v(" is very small, the convergence is more rapid than if "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "K",
                  expression: "'K'"
                }
              ]
            }),
            _vm._v(" is near "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "1",
                  expression: "'1'"
                }
              ]
            }),
            _vm._v(". The number "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "K",
                  expression: "'K'"
                }
              ]
            }),
            _vm._v(" is called the "),
            _c("deep", [
              _vm._v("convergence factor (asymptotic error constant).")
            ]),
            _c("br"),
            _vm._v(" Suppose that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "g'(s) = 0",
                  expression: "'g\\'(s) = 0'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "g",
                  expression: "'g'"
                }
              ]
            }),
            _vm._v(
              " has a continuous second derivative on some open interval centred on s, and "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0",
                  expression: "'x_0'"
                }
              ]
            }),
            _vm._v(
              " is selected from this interval. By the Taylor's theorem, we have "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "g(x_n) - g(s) = g'(s)(x-s) + \\frac{1}{2}g''(c_n)(x_n-s)^2",
                  expression:
                    "'g(x_n) - g(s) = g\\'(s)(x-s) + \\\\frac{1}{2}g\\'\\'(c_n)(x_n-s)^2'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" If "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "g'(s)=0",
                  expression: "'g\\'(s)=0'"
                }
              ]
            }),
            _vm._v(", we see that "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " g(x_n) - g(s) = \\frac{1}{2}g''(c_n)(x_n-s)^2",
                  expression:
                    "' g(x_n) - g(s) = \\\\frac{1}{2}g\\'\\'(c_n)(x_n-s)^2'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" where "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "c_n",
                  expression: "'c_n'"
                }
              ]
            }),
            _vm._v(" lies between "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_n",
                  expression: "'x_n'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "s",
                  expression: "'s'"
                }
              ]
            }),
            _vm._v(". Then "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\frac{|x_{n+1} - s|}{|x_n - s|^2} = \\frac{1}{2}|g''(c_n)|",
                  expression:
                    "'\\\\frac{|x_{n+1} - s|}{|x_n - s|^2} = \\\\frac{1}{2}|g\\'\\'(c_n)|'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" It follows that "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\lim_{n \\rightarrow \\infty}\\frac{|x_{n+1} - s|}{|x_n - s|^2} = \\frac{1}{2}|g''(s)|",
                  expression:
                    "'\\\\lim_{n \\\\rightarrow \\\\infty}\\\\frac{|x_{n+1} - s|}{|x_n - s|^2} = \\\\frac{1}{2}|g\\'\\'(s)|'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Assuming that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "g''(s) \\neq 0",
                  expression: "'g\\'\\'(s) \\\\neq 0'"
                }
              ]
            }),
            _vm._v(", we have convergence of order "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "p=2",
                  expression: "'p=2'"
                }
              ]
            }),
            _vm._v(" and the convergence factor is "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\frac{1}{2}|g''(s)|",
                  expression: "'\\\\frac{1}{2}|g\\'\\'(s)|'"
                }
              ]
            }),
            _vm._v(
              ". Therefore the fixed point iteration scheme converges quadratically in this case. "
            )
          ],
          1
        ),
        _c(
          "div",
          {
            staticClass: " mb-4 p-3 ",
            staticStyle: { "background-color": "#fff3e0" }
          },
          [
            _c(
              "h4",
              { staticClass: "h4-responsive" },
              [
                _vm._v("Exercise 3.1 "),
                _c("deep", [_vm._v("Exercises on Fixed point iteration")])
              ],
              1
            ),
            _c("ol", [
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" Show that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x = 4",
                      expression: "'x = 4'"
                    }
                  ]
                }),
                _vm._v(
                  " is a fixed point of the following iteration schemes: "
                ),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "\\displaystyle{~x_{n+1} =\\frac{1}{4}(8x_n-x_n^2)}",
                          expression:
                            "'\\\\displaystyle{~x_{n+1} =\\\\frac{1}{4}(8x_n-x_n^2)}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "\\displaystyle{~x_{n+1} =\\frac{1}{3}(x_n^2-4)}",
                          expression:
                            "'\\\\displaystyle{~x_{n+1} =\\\\frac{1}{3}(x_n^2-4)}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "\\displaystyle{~x_{n+1} =\\sqrt{3x_n + 4}}",
                          expression:
                            "'\\\\displaystyle{~x_{n+1} =\\\\sqrt{3x_n + 4}}'"
                        }
                      ]
                    })
                  ])
                ]),
                _vm._v(
                  " Analyze theoretically (don't calculate iterates) to determine which of these methods should converge to the root at "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x = 4",
                      expression: "'x = 4'"
                    }
                  ]
                }),
                _vm._v(
                  " given a starting guess close enough. Which method should converge the fastest? "
                )
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(
                  " Use a fixed-point iteration method to determine the an approximation to "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\sqrt{3}",
                      expression: "'\\\\sqrt{3}'"
                    }
                  ]
                }),
                _vm._v(" that is accurate to within "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "10^{-4}",
                      expression: "'10^{-4}'"
                    }
                  ]
                }),
                _vm._v(", starting with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0 = 1",
                      expression: "'x_0 = 1'"
                    }
                  ]
                }),
                _vm._v(". ")
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" The following four methods are proposed to compute "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "21^{1/3}",
                      expression: "'21^{1/3}'"
                    }
                  ]
                }),
                _vm._v(
                  ". Rank them in order, based on their apparent speed of convergence, assuming "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0=1",
                      expression: "'x_0=1'"
                    }
                  ]
                }),
                _vm._v(". "),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "x_n =\\displaystyle \\frac{20x_{n-1} + 21/x_{n-1}^2}{21}",
                          expression:
                            "'x_n =\\\\displaystyle \\\\frac{20x_{n-1} + 21/x_{n-1}^2}{21}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "x_n = \\displaystyle x_{n-1} - \\frac{x_{n-1}^2 - 21}{3x_{n-1}^2}",
                          expression:
                            "'x_n = \\\\displaystyle x_{n-1} - \\\\frac{x_{n-1}^2 - 21}{3x_{n-1}^2}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            " x_n = \\displaystyle x_{n-1} - \\frac{x_{n-1}^4 - 21x_{n-1}}{x_{n-1}^2 - 21}",
                          expression:
                            "' x_n = \\\\displaystyle x_{n-1} - \\\\frac{x_{n-1}^4 - 21x_{n-1}}{x_{n-1}^2 - 21}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "x_n = \\displaystyle \\left(\\frac{21}{x_{n-1}}\\right)^{1/2}",
                          expression:
                            "'x_n = \\\\displaystyle \\\\left(\\\\frac{21}{x_{n-1}}\\\\right)^{1/2}'"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" Show that the iteration scheme "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_{n+1} = (1 + x_n)^{1/3}",
                      expression: "'x_{n+1} = (1 + x_n)^{1/3}'"
                    }
                  ]
                }),
                _vm._v(" converges to a solution of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x^3 - x - 1=0",
                      expression: "'x^3 - x - 1=0'"
                    }
                  ]
                }),
                _vm._v(" if the initial guess "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0",
                      expression: "'x_0'"
                    }
                  ]
                }),
                _vm._v(" is between 1 and 2. ")
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(
                  " Show that the order of convergence for the following iterative processes is first order "
                ),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "x_{n+1} = 1 - \\sin x_n  \\text{ for }  x_0 \\in [0, \\pi]; f(x) = sin x + x - 1",
                          expression:
                            "'x_{n+1} = 1 - \\\\sin x_n  \\\\text{ for }  x_0 \\\\in [0, \\\\pi]; f(x) = \\sin x + x - 1'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "\\displaystyle x_{n+1} = \\frac{1}{10}(x_n^3 + 4)  \\text{ for }  x_0 \\in [0, 1]; f(x) = x^3 - 10x + 4",
                          expression:
                            "'\\\\displaystyle x_{n+1} = \\\\frac{1}{10}(x_n^3 + 4)  \\\\text{ for }  x_0 \\\\in [0, 1]; f(x) = x^3 - 10x + 4'"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" Determine the interval of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x",
                      expression: "'x'"
                    }
                  ]
                }),
                _vm._v(
                  " where convergence is certain for the iterative processes below: "
                ),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "\\displaystyle{x_{n + 1} =  (10x_n -4)^{1/3}}",
                          expression:
                            "'\\\\displaystyle{x_{n + 1} =  (10x_n -4)^{1/3}}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "\\displaystyle{x_{n + 1} = \\frac{1}{2} - x_n^3 }",
                          expression:
                            "'\\\\displaystyle{x_{n + 1} = \\\\frac{1}{2} - x_n^3 }'"
                        }
                      ]
                    })
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "\\displaystyle{x_{n + 1} =  0.5(\\sin x_n + \\cos x_n)}",
                          expression:
                            "'\\\\displaystyle{x_{n + 1} =  0.5(\\\\sin x_n + \\\\cos x_n)}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "\\displaystyle{x_{n + 1} =  1 + \\tan^{-1}(x_n)}",
                          expression:
                            "'\\\\displaystyle{x_{n + 1} =  1 + \\\\tan^{-1}(x_n)}'"
                        }
                      ]
                    })
                  ])
                ])
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" Consider the iterative scheme "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " x_{n+1} = \\frac{12}{1 + x_n}",
                      expression: "' x_{n+1} = \\\\frac{12}{1 + x_n}'",
                      arg: "display"
                    }
                  ]
                }),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _vm._v(" Find the positive fixed point, "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "s",
                          expression: "'s'"
                        }
                      ]
                    }),
                    _vm._v(", of the scheme. ")
                  ]),
                  _c("li", [
                    _vm._v(" Prove that the scheme converges to "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "s",
                          expression: "'s'"
                        }
                      ]
                    }),
                    _vm._v(" for sufficiently close "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "x_0",
                          expression: "'x_0'"
                        }
                      ]
                    }),
                    _vm._v(
                      ". Determine the order and the corresponding asymptotic error constant for this method. "
                    )
                  ])
                ])
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" The positive root of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = \\alpha - \\beta x^2 - x ",
                      expression: "'f(x) = \\\\alpha - \\\\beta x^2 - x '"
                    }
                  ]
                }),
                _vm._v(" with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\alpha",
                      expression: "'\\\\alpha'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\beta >0",
                      expression: "'\\\\beta >0'"
                    }
                  ]
                }),
                _vm._v(" is sought and the simple iteration "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " x_{n+1} = \\alpha - \\beta x_n^2",
                      expression: "' x_{n+1} = \\\\alpha - \\\\beta x_n^2'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " is used. Show that convergence will occur for sufficiently close starting value, provided "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " \\alpha \\beta < \\frac{3}{4}",
                      expression: "' \\\\alpha \\\\beta < \\\\frac{3}{4}'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _vm._v(" State the fixed-point theorem ")
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                    _vm._v(
                      " Show that the iteration function of the equation "
                    ),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "x = \\frac{a}{6 + ax}",
                          expression: "'x = \\\\frac{a}{6 + ax}'",
                          arg: "display"
                        }
                      ]
                    }),
                    _vm._v(
                      " satisfies the assumptions of the fixed point theorem for "
                    ),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "0 \\leq a < 6",
                          expression: "'0 \\\\leq a < 6'"
                        }
                      ]
                    }),
                    _vm._v(". ")
                  ]),
                  _c("li", [
                    _vm._v(" Compute the root of the equation with accuracy "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "\\varepsilon = 0.01",
                          expression: "'\\\\varepsilon = 0.01'"
                        }
                      ]
                    }),
                    _vm._v(" and "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "a = 3",
                          expression: "'a = 3'"
                        }
                      ]
                    }),
                    _vm._v(" using the fixed point iterations. ")
                  ])
                ])
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" For which values of the parameter "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\beta",
                      expression: "'\\\\beta'"
                    }
                  ]
                }),
                _vm._v(" the iteration function of the equation "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " x = \\frac{3}{3 + \\beta^2 x}~~,~~~~~~~~~x \\in [0, 1]",
                      expression:
                        "' x = \\\\frac{3}{3 + \\\\beta^2 x}~~,~~~~~~~~~x \\\\in [0, 1]'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " satisfies the assumptions of the fixed point theorem. "
                )
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" Evaluate the approximate solution of the equation "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " x = \\frac{3}{3 +  x}~~,~~~~~~~~~x \\in [0, 1]",
                      expression:
                        "' x = \\\\frac{3}{3 +  x}~~,~~~~~~~~~x \\\\in [0, 1]'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" with accuracy "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\varepsilon  = 0.0005",
                      expression: "'\\\\varepsilon  = 0.0005'"
                    }
                  ]
                }),
                _vm._v(" using minimum number of iterations. ")
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" For the scheme "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_{n+1} = x_n + c(x_n^2 - 7)",
                      expression: "'x_{n+1} = x_n + c(x_n^2 - 7)'"
                    }
                  ]
                }),
                _vm._v(", find the range of values of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(
                  " for which convergence to the positive fixed point is guaranteed. For what value of "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(" is convergence quadratic? ")
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" The iteration "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_{n+1} = 2 - (1+c)x_n + c x_n^3",
                      expression: "'x_{n+1} = 2 - (1+c)x_n + c x_n^3'"
                    }
                  ]
                }),
                _vm._v(" will converge for sufficiently close "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0",
                      expression: "'x_0'"
                    }
                  ]
                }),
                _vm._v(" to "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "s=1",
                      expression: "'s=1'"
                    }
                  ]
                }),
                _vm._v(" for some values of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(". Find the values of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(" which this is true. For what value of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c",
                      expression: "'c'"
                    }
                  ]
                }),
                _vm._v(" will the convergence be quadratic? ")
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" Show that a method for computing "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\sqrt{a}",
                      expression: "'\\\\sqrt{a}'"
                    }
                  ]
                }),
                _vm._v(" is "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "x_{n+1} = \\frac{x_n(x_n^2 + 3a)}{3x_n^2 + a}~~~~n \\geq 0",
                      expression:
                        "'x_{n+1} = \\\\frac{x_n(x_n^2 + 3a)}{3x_n^2 + a}~~~~n \\\\geq 0'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " Also determine the order of this method together with its asymptotic error constant. "
                )
              ]),
              _c("li", { staticStyle: { "margin-bottom": "20px" } }, [
                _vm._v(" Show that the iteration scheme "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\alpha_{n+1}= \\frac{\\alpha_n^2 - a\\alpha_n +a^2 +5a}{\\alpha_n +5}",
                      expression:
                        "'\\\\alpha_{n+1}= \\\\frac{\\\\alpha_n^2 - a\\\\alpha_n +a^2 +5a}{\\\\alpha_n +5}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" converges to the fixed point "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "a",
                      expression: "'a'"
                    }
                  ]
                }),
                _vm._v(
                  " quadratically (i.e order of convergence is 2) for all "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "a \\neq -5",
                      expression: "'a \\\\neq -5'"
                    }
                  ]
                }),
                _vm._v(". ")
              ])
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "my-3" }, [
        _c(
          "h4",
          { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
          [_vm._v(" 3.3 The Newton Raphson Method ")]
        ),
        _c("hr", { staticClass: "blue mb-4 mt-0 " }),
        _c("div", [
          _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
            _vm._v("Intended learning outcomes")
          ]),
          _vm._v(" By the end of this section, you will be able to "),
          _vm._m(17),
          _vm._v(" If "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(" is an approximation of the root "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\bar{x}",
                expression: "'\\\\bar{x}'"
              }
            ]
          }),
          _vm._v(" then we can write "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "\\bar{x} = x_0 + \\varepsilon_0 ",
                expression: "'\\\\bar{x} = x_0 + \\\\varepsilon_0 '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" So that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: " f(\\bar{x}) = f(x_0 + \\varepsilon_0) = 0",
                expression: "' f(\\\\bar{x}) = f(x_0 + \\\\varepsilon_0) = 0'",
                arg: "display"
              }
            ]
          }),
          _vm._v(
            " If we expand the functional evaluation as a Taylor series about "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(", we have "),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "f(x_0 + \\varepsilon_0) = f(x_0) + f'(x_0)\\,(\\bar{x} - x_0) +\\frac{1}{2}\\,f''(x_0)\\,(\\bar{x} - x_0)^2 + \\ldots",
                      expression:
                        "'f(x_0 + \\\\varepsilon_0) = f(x_0) + f\\'(x_0)\\\\,(\\\\bar{x} - x_0) +\\\\frac{1}{2}\\\\,f\\'\\'(x_0)\\\\,(\\\\bar{x} - x_0)^2 + \\\\ldots'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(3.8)",
                      expression: "'(3.8)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "= f(x_0) + f'(x_0)\\varepsilon_0 + \\frac{1}{2}\\,f''(x_0)\\varepsilon_0^2 + \\ldots = 0",
                      expression:
                        "'= f(x_0) + f\\'(x_0)\\\\varepsilon_0 + \\\\frac{1}{2}\\\\,f\\'\\'(x_0)\\\\varepsilon_0^2 + \\\\ldots = 0'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(3.9)",
                      expression: "'(3.9)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" Hence provided that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\varepsilon_0",
                expression: "'\\\\varepsilon_0'"
              }
            ]
          }),
          _vm._v(" is small, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "f(x_0) + f'(x_0)\\varepsilon_0 \\approx 0",
                expression: "'f(x_0) + f\\'(x_0)\\\\varepsilon_0 \\\\approx 0'",
                arg: "display"
              }
            ]
          }),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " \\varepsilon_0 \\approx -\\,\\frac{f(x_0)}{f'(x_0)}\\,, \\quad \\text{ provided }\\quad f'(x_0) \\neq 0 ",
                      expression:
                        "' \\\\varepsilon_0 \\\\approx -\\\\,\\\\frac{f(x_0)}{f\\'(x_0)}\\\\,, \\\\quad \\\\text{ provided }\\\\quad f\\'(x_0) \\\\neq 0 '",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(3.10)",
                      expression: "'(3.10)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" Thus an improved approximation to the root "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\bar{x}",
                expression: "'\\bar{x}'"
              }
            ]
          }),
          _vm._v(" is approximated by "),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " x_1 = x_0 - \\frac{f(x_0)}{ f'(x_0)}",
                      expression: "' x_1 = x_0 - \\\\frac{f(x_0)}{ f\\'(x_0)}'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(3.11)",
                      expression: "'(3.11)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" A general expression for subsequent improvements is "),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}",
                      expression:
                        "'x_{n+1} = x_n - \\\\frac{f(x_n)}{f\\'(x_n)}'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(3.12)",
                      expression: "'(3.12)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" This is called the "),
          _c("i", [_vm._v("Newton's")]),
          _vm._v(" or "),
          _c("em", [_vm._v("Newton-Raphson")]),
          _vm._v(" method. "),
          _c(
            "div",
            { staticClass: "algorithm p-3 my-3" },
            [
              _c("deep", [_vm._v("Newton method algorithm")]),
              _c("hr", {
                staticClass: "mt-0 black",
                staticStyle: { width: "200px" }
              }),
              _vm._v(" initialize: "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_0 = \\ldots",
                    expression: "'x_0 = \\\\ldots'"
                  }
                ]
              }),
              _vm._v(" "),
              _c("br"),
              _vm._v(" for "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n = 0,1,2,\\ldots",
                    expression: "'n = 0,1,2,\\\\ldots'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "~~~~x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}",
                    expression:
                      "'~~~~x_{n+1} = x_n - \\\\frac{f(x_n)}{f\\'(x_n)}'"
                  }
                ]
              }),
              _c("br"),
              _vm._v(" if converged, stop "),
              _c("br"),
              _vm._v(" end ")
            ],
            1
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 3.9")
              ]),
              _vm._v(
                " Use the Newton's method to find the iterative scheme for finding the square root of a positive number. "
              ),
              _c("br"),
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Answer. ")
              ]),
              _vm._v(" Given a number "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "a",
                    expression: "'a'"
                  }
                ]
              }),
              _vm._v(", finding "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\sqrt{a}",
                    expression: "'\\\\sqrt{a}'"
                  }
                ]
              }),
              _vm._v(
                " is equivalent to finding the positive root to the equation "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)=a - x^2",
                    expression: "'f(x)=a - x^2'"
                  }
                ]
              }),
              _vm._v(
                ". Formulating the Newton's method for solving this expression yields. "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "x_{n+1} = x_n - \\frac{f(x_n)}{f'(x_n)}~~~~~~~~~~~",
                    expression:
                      "'x_{n+1} = x_n - \\\\frac{f(x_n)}{f\\'(x_n)}~~~~~~~~~~~'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: " = x_n - \\frac{a - x_n^2}{-2x_n}",
                    expression: "' = x_n - \\\\frac{a - x_n^2}{-2x_n}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "   = \\frac{2x_n^2 + a - x_n^2}{2x_n}",
                    expression: "'   = \\\\frac{2x_n^2 + a - x_n^2}{2x_n}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "= \\frac{1}{2}\\left(x_n + \\frac{a}{x_n} \\right) ",
                    expression:
                      "'= \\\\frac{1}{2}\\\\left(x_n + \\\\frac{a}{x_n} \\\\right) '",
                    arg: "display"
                  }
                ]
              })
            ]
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 3.10")
              ]),
              _vm._v(" Use the Newton's method to find the solution of "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x) = x^3 - x - 1",
                    expression: "'f(x) = x^3 - x - 1'"
                  }
                ]
              }),
              _vm._v(", using "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_0 = 1.3",
                    expression: "'x_0 = 1.3'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("br"),
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Answer. ")
              ]),
              _vm._v(" The first derivative is "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f'(x) = 3x^2 - 1",
                    expression: "'f\\'(x) = 3x^2 - 1'"
                  }
                ]
              }),
              _vm._v(". Thus the iteration formula is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "~~~~~~~~~~x_{n+1} = x_n - \\frac{(x_n^3 - x_n - 1)}{3x_n^2-1}",
                    expression:
                      "'~~~~~~~~~~x_{n+1} = x_n - \\\\frac{(x_n^3 - x_n - 1)}{3x_n^2-1}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: " = \\frac{2x_n^3  + 1}{3x_n^2-1}",
                    expression: "' = \\\\frac{2x_n^3  + 1}{3x_n^2-1}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", { staticClass: "container text-center" }, [
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n~~~~~~~x_n~~~~~~~~~~~~~~~~",
                      expression: "'n~~~~~~~x_n~~~~~~~~~~~~~~~~'"
                    }
                  ]
                }),
                _c("br"),
                _c("hr", {
                  staticClass: "blue mb-0 mt-0 ",
                  staticStyle: { width: "150px" }
                }),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "1~~~~~~~1.300000000",
                      expression: "'1~~~~~~~1.300000000'"
                    }
                  ]
                }),
                _c("br"),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "2~~~~~~~1.325307125",
                      expression: "'2~~~~~~~1.325307125'"
                    }
                  ]
                }),
                _c("br"),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "3~~~~~~~1.324718280",
                      expression: "'3~~~~~~~1.324718280'"
                    }
                  ]
                }),
                _c("br"),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "4~~~~~~~1.324717957",
                      expression: "'4~~~~~~~1.324717957'"
                    }
                  ]
                }),
                _c("br"),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "5~~~~~~~1.324717957",
                      expression: "'5~~~~~~~1.324717957'"
                    }
                  ]
                }),
                _c("br")
              ])
            ]
          ),
          _vm._v(
            " Note that the approximation converges to the root after only 4 iterations compared with 11 iterations for the fixed point method applied to the same problem (discussed in the previous section)."
          ),
          _c("br"),
          _vm._v(
            " The above results can be computed manually using a calculator or the MATLAB code below, "
          ),
          _vm._m(18),
          _c("div", { staticClass: "my-4" }, [
            _c("h5", { staticClass: " h5-responsive mb-2 font-weight-bold" }, [
              _vm._v(" 3.3.1 Convergence of Newton's Method")
            ]),
            _c(
              "div",
              { staticClass: "theorem my-3 p-3 " },
              [
                _c("theorem-color", [_vm._v("Theorem 3.7")]),
                _vm._v(" If "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f",
                      expression: "'f'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f'",
                      expression: "'f\\''"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f''",
                      expression: "'f\\'\\''"
                    }
                  ]
                }),
                _vm._v(
                  " are continuous in a sufficiently small neighbourhood of a simple root "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\alpha",
                      expression: "'\\\\alpha'"
                    }
                  ]
                }),
                _vm._v(" of a function "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x)=0",
                      expression: "'f(x)=0'"
                    }
                  ]
                }),
                _vm._v(
                  ", then the newton's method converges to that root quadratically. "
                )
              ],
              1
            ),
            _vm._v(" Assume that the function "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f(x)",
                  expression: "'f(x)'"
                }
              ]
            }),
            _vm._v(
              " is at least twice continuously-differentiable in some sufficiently large neighbourhood of a simple root, "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\alpha",
                  expression: "'\\\\alpha'"
                }
              ]
            }),
            _vm._v(" of "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f(x)=0",
                  expression: "'f(x)=0'"
                }
              ]
            }),
            _vm._v(". That is, "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f'(\\alpha) \\neq 0",
                  expression: "'f\\'(\\\\alpha) \\\\neq 0'"
                }
              ]
            }),
            _vm._v("\"' and there exists an "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "M > 0",
                  expression: "'M > 0'"
                }
              ]
            }),
            _vm._v(" such that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "|f''(x)| < M",
                  expression: "'|f\\'\\'(x)| < M'"
                }
              ]
            }),
            _vm._v(" for all "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x",
                  expression: "'x'"
                }
              ]
            }),
            _vm._v(" in some neighbourhood of "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\alpha",
                  expression: "'\\\\alpha'"
                }
              ]
            }),
            _vm._v(". The two assumptions that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f'(\\alpha) \\neq 0",
                  expression: "'f\\'(\\\\alpha) \\\\neq 0'"
                }
              ]
            }),
            _vm._v(" and the continuity of "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f'",
                  expression: "'f\\''"
                }
              ]
            }),
            _vm._v(" insure that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\exists \\gamma> 0",
                  expression: "'\\\\exists \\\\gamma> 0'"
                }
              ]
            }),
            _vm._v(" such that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "|f'(x)| > \\gamma > 0",
                  expression: "'|f\\'(x)| > \\\\gamma > 0'"
                }
              ]
            }),
            _vm._v(" "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\forall x",
                  expression: "'\\\\forall x'"
                }
              ]
            }),
            _vm._v(" near "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\alpha",
                  expression: "'\\\\alpha'"
                }
              ]
            }),
            _vm._v(". "),
            _c("br"),
            _vm._v(" Using Taylor's theorem to expand "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f",
                  expression: "'f'"
                }
              ]
            }),
            _vm._v(" around "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\alpha",
                  expression: "'\\\\alpha'"
                }
              ]
            }),
            _vm._v(", "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f(\\alpha)",
                  expression: "'f(\\\\alpha)'"
                }
              ]
            }),
            _vm._v(" is written as "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "f(\\alpha) = f(x_n) + (\\alpha - x_n)f'(x_n) + \\frac{(\\alpha - x_n)^2}{2}f''(\\xi_n) ",
                  expression:
                    "'f(\\\\alpha) = f(x_n) + (\\\\alpha - x_n)f\\'(x_n) + \\\\frac{(\\\\alpha - x_n)^2}{2}f\\'\\'(\\\\xi_n) '",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" for some point "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\xi_n \\in [\\alpha,x_n]",
                  expression: "'\\\\xi_n \\\\in [\\\\alpha,x_n]'"
                }
              ]
            }),
            _vm._v(". Since "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\alpha",
                  expression: "'\\\\alpha'"
                }
              ]
            }),
            _vm._v(" is a root, we have "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f(\\alpha) = 0",
                  expression: "'f(\\\\alpha) = 0'"
                }
              ]
            }),
            _vm._v(" and the expansion becomes "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "0 = f(x_n) + (\\alpha - x_n)f'(x_n) + \\frac{(\\alpha - x_n)^2}{2}f''(\\xi_n)",
                  expression:
                    "'0 = f(x_n) + (\\\\alpha - x_n)f\\'(x_n) + \\\\frac{(\\\\alpha - x_n)^2}{2}f\\'\\'(\\\\xi_n)'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" The assumption that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f'(\\alpha) \\neq 0",
                  expression: "'f\\'(\\\\alpha) \\\\neq 0'"
                }
              ]
            }),
            _vm._v(" permits us to divide through the equation by "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f'(x_n)",
                  expression: "'f\\'(x_n)'"
                }
              ]
            }),
            _vm._v(", to obtain "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "0 = \\frac{f(x_n)}{f'(x_n)} + (\\alpha - x_n) + \\frac{(\\alpha - x_n)^2}{2} \\frac{f''(\\xi_n)}{f'(x_n)}",
                  expression:
                    "'0 = \\\\frac{f(x_n)}{f\\'(x_n)} + (\\\\alpha - x_n) + \\\\frac{(\\\\alpha - x_n)^2}{2} \\\\frac{f\\'\\'(\\\\xi_n)}{f\\'(x_n)}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Writing the the first term above in terms of the definition of Newton's method "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value:
                    "\\displaystyle{\\left( ~\\text{ i.e }~~\\frac{f(x_n)}{f'(x_n)} =  x_n -x_{n+1}\\right)} ",
                  expression:
                    "'\\\\displaystyle{\\\\left( ~\\\\text{ i.e }~~\\\\frac{f(x_n)}{f\\'(x_n)} =  x_n -x_{n+1}\\\\right)} '"
                }
              ]
            }),
            _vm._v(" produces "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    " 0 = x_n -x_{n+1} + \\alpha - x_n  + \\frac{(\\alpha - x_n)^2}{2} \\frac{f''(\\xi_n)}{f'(x_n)}",
                  expression:
                    "' 0 = x_n -x_{n+1} + \\\\alpha - x_n  + \\\\frac{(\\\\alpha - x_n)^2}{2} \\\\frac{f\\'\\'(\\\\xi_n)}{f\\'(x_n)}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" This leads to "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "~~~~~~~~~~~~~~~~x_{n+1} - \\alpha = \\frac{(\\alpha - x_n)^2}{2}\\frac{f''(\\xi_n)}{f'(x_n)}",
                  expression:
                    "'~~~~~~~~~~~~~~~~x_{n+1} - \\\\alpha = \\\\frac{(\\\\alpha - x_n)^2}{2}\\\\frac{f\\'\\'(\\\\xi_n)}{f\\'(x_n)}'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\frac{x_{n+1} - \\alpha}{(x_{n} - \\alpha)^2}= \\frac{1}{2}\\frac{f''(\\xi_n)}{f'(x_n)}",
                  expression:
                    "'\\\\frac{x_{n+1} - \\\\alpha}{(x_{n} - \\\\alpha)^2}= \\\\frac{1}{2}\\\\frac{f\\'\\'(\\\\xi_n)}{f\\'(x_n)}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " The initial assumptions which permittted the assertions that "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "|f'(\\alpha)| > \\gamma > 0",
                  expression: "'|f\\'(\\\\alpha)| > \\\\gamma > 0'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "|f''(\\xi_n)| < M",
                  expression: "'|f\\'\\'(\\\\xi_n)| < M'"
                }
              ]
            }),
            _vm._v(" in some sufficiently small neighbourhood of "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\alpha",
                  expression: "'\\\\alpha'"
                }
              ]
            }),
            _vm._v(" show that Newton's method is quadratically convergent. ")
          ]),
          _c("div", { staticClass: "my-4" }, [
            _c("h5", { staticClass: " h5-responsive mb-2 font-weight-bold" }, [
              _vm._v(" 3.3.2 Pitfalls of the Newton-Raphson Method")
            ]),
            _vm._v(
              " While the Newton-Raphson method converges fast, sometimes it may fail to converge but oscillate between two values because of one of the following reasons: "
            ),
            _c("ol", [
              _c(
                "li",
                {
                  staticStyle: { "margin-bottom": "10px", "margin-top": "15px" }
                },
                [
                  _vm._v(" Small values for the derivatives "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f'(x_n)",
                        expression: "'f\\'(x_n)'"
                      }
                    ]
                  }),
                  _vm._v(
                    " can lead to very large deviations in the calculation of "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x_n)/f'(x_n)",
                        expression: "'f(x_n)/f\\'(x_n)'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ]
              ),
              _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                _vm._v(
                  " Sometimes the Newton's method can be caught in an endless cycling around the root. This can be the case when the root is near an inflection point. "
                )
              ]),
              _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                _vm._v(
                  " Newton's method requires a mechanism to compute the value of the derivative of "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f",
                      expression: "'f'"
                    }
                  ]
                }),
                _vm._v(" at each approximation. Frequently, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f'(x)",
                      expression: "'f\\'(x)'"
                    }
                  ]
                }),
                _vm._v(
                  " is far more difficult and needs more arithmetic operations (i.e is computationally expensive) to calculate than "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x)",
                      expression: "'f(x)'"
                    }
                  ]
                }),
                _vm._v(". ")
              ])
            ]),
            _vm._v(
              " If situation 1 or 2 occurs it may be necessary to use another criterion to stop the iterations. One alternative is to stop after a predetermined number of iterations. Another criterion is to stop when "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "|,x_{n+1} - x_n,| < \\varepsilon,",
                  expression: "'|\\,x_{n+1} - x_n\\,| < \\\\varepsilon,'"
                }
              ]
            }),
            _vm._v(" where "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\varepsilon",
                  expression: "'\\\\varepsilon'"
                }
              ]
            }),
            _vm._v(" is some error term, and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f(x_n)=0",
                  expression: "'f(x_n)=0'"
                }
              ]
            }),
            _vm._v(", or at least "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "|\\,f(x_n)\\,| < \\varepsilon",
                  expression: "'|\\\\,f(x_n)\\\\,| < \\\\varepsilon'"
                }
              ]
            }),
            _vm._v("."),
            _c("br"),
            _vm._v(
              " To circumvent the problem of evaluating the derivative at each step of the Newton's method, we introduce a slight variation in the formula as discussed in the next section. "
            ),
            _c(
              "div",
              {
                staticClass: " mb-4 p-3 mt-3 ",
                staticStyle: { "background-color": "#fff3e0" }
              },
              [
                _c(
                  "h4",
                  { staticClass: "h4-responsive" },
                  [
                    _vm._v("Exercise 3.3 "),
                    _c("deep", [_vm._v("Exercises on Newton's method")])
                  ],
                  1
                ),
                _c("ol", [
                  _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
                    _vm._v(
                      " Formulate the Newton-Raphson method for computing; "
                    ),
                    _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(" the "),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "k",
                              expression: "'k'"
                            }
                          ]
                        }),
                        _vm._v("-th root of a number "),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "N > 0",
                              expression: "'N > 0'"
                            }
                          ]
                        })
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(" the reciprocal of a real number "),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "R",
                              expression: "'R'"
                            }
                          ]
                        }),
                        _vm._v(". ")
                      ])
                    ])
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
                    _vm._v(" Consider the function "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "f(x) = (x- 2)^2 - \\ln x ",
                          expression: "'f(x) = (x- 2)^2 - \\\\ln x '"
                        }
                      ]
                    }),
                    _vm._v(" on the interval "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "1 \\leq x \\leq 2",
                          expression: "'1 \\\\leq x \\\\leq 2'"
                        }
                      ]
                    }),
                    _vm._v(". "),
                    _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(
                          " Prove that there is exactly one root of this equation in this interval. "
                        )
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(" Use Newton's method with the initial guess "),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "x_0 = 1.5",
                              expression: "'x_0 = 1.5'"
                            }
                          ]
                        }),
                        _vm._v(" to find a root to 6 significant digits. ")
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(
                          " Use the Secant method to approximate a root to 6 digits accurately using the endpoints of the interval as initial data. Tabulate your data to show "
                        ),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "x_n",
                              expression: "'x_n'"
                            }
                          ]
                        }),
                        _vm._v(" and "),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "x_{n+1}",
                              expression: "'x_{n+1}'"
                            }
                          ]
                        }),
                        _vm._v(" at each stage. ")
                      ])
                    ])
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
                    _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(" Show that the function "),
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: " f(x) = e^x - x^2",
                              expression: "' f(x) = e^x - x^2'",
                              arg: "display"
                            }
                          ]
                        }),
                        _vm._v(
                          " has exactly one zero in the interval [-1, 0]. "
                        )
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(
                          " Use 4 iterations of the Newton-Raphson method with an initial guess of "
                        ),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "x_0 = 0",
                              expression: "'x_0 = 0'"
                            }
                          ]
                        }),
                        _vm._v(" to obtain an approximation to this root. ")
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _vm._v(" Use 4 iterations of the Secant method with "),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "x_0 = 0",
                              expression: "'x_0 = 0'"
                            }
                          ]
                        }),
                        _vm._v(" and "),
                        _c("span", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value: "x_1 =-0.2",
                              expression: "'x_1 =-0.2'"
                            }
                          ]
                        }),
                        _vm._v(" to approximate the same root. ")
                      ])
                    ])
                  ]),
                  _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
                    _vm._v(" Use Newton's method to find solutions to within "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "10^{-5}",
                          expression: "'10^{-5}'"
                        }
                      ]
                    }),
                    _vm._v(" for the following problems "),
                    _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value:
                                " ~~~\\displaystyle{\\cos x = x^3,~~~~x_0  = 0.5 }",
                              expression:
                                "' ~~~\\\\displaystyle{\\\\cos x = x^3,~~~~x_0  = 0.5 }'"
                            }
                          ]
                        })
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value:
                                "~~~\\displaystyle{3e^x - 4\\cos x = 0 ,~~~~x_0  =1 }",
                              expression:
                                "'~~~\\\\displaystyle{3e^x - 4\\\\cos x = 0 ,~~~~x_0  =1 }'"
                            }
                          ]
                        })
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value:
                                "~~~\\displaystyle{\\sin x - x^2 = 0 ,~~~~x_0  = 0}",
                              expression:
                                "'~~~\\\\displaystyle{\\\\sin x - x^2 = 0 ,~~~~x_0  = 0}'"
                            }
                          ]
                        })
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value:
                                "~~~\\displaystyle{e^x - 3x = 0 ,~~~~x_0  = 1}",
                              expression:
                                "'~~~\\\\displaystyle{e^x - 3x = 0 ,~~~~x_0  = 1}'"
                            }
                          ]
                        })
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value:
                                "~~~\\displaystyle{e^x  + 2^{-x} + 2\\cos x - 6 = 0 ,~~~~x_0  = 1}",
                              expression:
                                "'~~~\\\\displaystyle{e^x  + 2^{-x} + 2\\\\cos x - 6 = 0 ,~~~~x_0  = 1}'"
                            }
                          ]
                        })
                      ]),
                      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex",
                              value:
                                "~~~\\displaystyle{\\ln (x - 1) + cos (x - 1) = 0 ,~~~~x_0  = 1.5 }",
                              expression:
                                "'~~~\\\\displaystyle{\\\\ln (x - 1) + \\cos (x - 1) = 0 ,~~~~x_0  = 1.5 }'"
                            }
                          ]
                        })
                      ])
                    ])
                  ])
                ])
              ]
            )
          ])
        ])
      ]),
      _c("div", { staticClass: "mb-3" }, [
        _c(
          "h4",
          { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
          [_vm._v(" 3.4 The Secant Method ")]
        ),
        _c("hr", { staticClass: "blue mb-4 mt-0 " }),
        _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
          _vm._v("Intended learning outcomes")
        ]),
        _vm._v(" By the end of this section, you will be able to "),
        _vm._m(19),
        _vm._v(" We define "),
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "f'(x_{n}) = \\lim_{x \\rightarrow x_{n}} \\frac{f(x) -f(x_{n})}{\\displaystyle x - x_{n}} ",
                    expression:
                      "'f\\'(x_{n}) = \\\\lim_{x \\\\rightarrow x_{n}} \\\\frac{f(x) -f(x_{n})}{\\\\displaystyle x - x_{n}} '",
                    arg: "display"
                  }
                ]
              })
            ]),
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "(3.13)",
                    expression: "'(3.13)'",
                    arg: "display"
                  }
                ]
              })
            ])
          ])
        ]),
        _vm._v(" Letting "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "x = x_{n-1}",
              expression: "'x = x_{n-1}'"
            }
          ]
        }),
        _vm._v(", "),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value:
                "f'(x_{n}) \\approx \\frac{f(x_{n-1}) - f(x_{n})}{\\displaystyle x_{n-1} -x_{n}} = \\frac{f(x_{n}) - f(x_{n-1})}{\\displaystyle x_{n} - x_{n-1}}",
              expression:
                "'f\\'(x_{n}) \\\\approx \\\\frac{f(x_{n-1}) - f(x_{n})}{\\\\displaystyle x_{n-1} -x_{n}} = \\\\frac{f(x_{n}) - f(x_{n-1})}{\\\\displaystyle x_{n} - x_{n-1}}'",
              arg: "display"
            }
          ]
        }),
        _vm._v(" Substituting the above expression in Newton's formula gives "),
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " x_{n+1} = x_n - f(x_n)\\frac{(x_n - x_{n-1})}{\\displaystyle f(x_n) -f(x_{n-1})}",
                    expression:
                      "' x_{n+1} = x_n - f(x_n)\\\\frac{(x_n - x_{n-1})}{\\\\displaystyle f(x_n) -f(x_{n-1})}'",
                    arg: "display"
                  }
                ]
              })
            ]),
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "(3.14)",
                    expression: "'(3.14)'",
                    arg: "display"
                  }
                ]
              })
            ])
          ])
        ]),
        _vm._v(
          " This modified Newton's method is called the {\\bf Secant method}. The process involves two initial approximations "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "x_0",
              expression: "'x_0'"
            }
          ]
        }),
        _vm._v(" and "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "x_1",
              expression: "'x_1'"
            }
          ]
        }),
        _vm._v(". The next approximation "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "x_2",
              expression: "'x_2'"
            }
          ]
        }),
        _vm._v(" is the "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "x", expression: "'x'" }
          ]
        }),
        _vm._v("-intercept of the line joining "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "(x_0, f(x_0))",
              expression: "'(x_0, f(x_0))'"
            }
          ]
        }),
        _vm._v(" and "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "(x_1, f(x_1))",
              expression: "'(x_1, f(x_1))'"
            }
          ]
        }),
        _vm._v(". The approximation "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "x_3",
              expression: "'x_3'"
            }
          ]
        }),
        _vm._v(" is in turn obtained as the "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "x", expression: "'x'" }
          ]
        }),
        _vm._v("-intercept of the line joining "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "(x_1, f(x_1)",
              expression: "'(x_1, f(x_1)'"
            }
          ]
        }),
        _vm._v(" and "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "(x_2, f(x_2))",
              expression: "'(x_2, f(x_2))'"
            }
          ]
        }),
        _vm._v(" and so on. "),
        _c(
          "div",
          { staticClass: "algorithm p-3 my-3" },
          [
            _c("deep", [_vm._v("Secant method algorithm")]),
            _c("hr", {
              staticClass: "mt-0 black",
              staticStyle: { width: "200px" }
            }),
            _vm._v(" initialize: "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0 = \\ldots",
                  expression: "'x_0 = \\\\ldots'"
                }
              ]
            }),
            _vm._v(", "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1 = \\ldots",
                  expression: "'x_1 = \\\\ldots'"
                }
              ]
            }),
            _vm._v(" "),
            _c("br"),
            _vm._v(" for "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n=1,2,3,ldots",
                  expression: "'n=1,2,3,\\ldots'"
                }
              ]
            }),
            _vm._v(" "),
            _c("br"),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value:
                    "~~~~\\displaystyle x_{n+1}=x_n - f(x_n)\\frac{(x_n - x_{n-1})}{\\displaystyle f(x_n) - f(x_{n-1})} ",
                  expression:
                    "'~~~~\\\\displaystyle x_{n+1}=x_n - f(x_n)\\\\frac{(x_n - x_{n-1})}{\\\\displaystyle f(x_n) - f(x_{n-1})} '"
                }
              ]
            }),
            _vm._v(" "),
            _c("br"),
            _vm._v(" if converged, stop "),
            _c("br"),
            _vm._v(" end ")
          ],
          1
        ),
        _c(
          "div",
          {
            staticClass: "my-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Example 3.11")
            ]),
            _vm._v(" Find the solution of "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x - x^{1/3} - 2 = 0",
                  expression: "'x - x^{1/3} - 2 = 0'"
                }
              ]
            }),
            _vm._v(" using both the Newton (using "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0=3",
                  expression: "'x_0=3'"
                }
              ]
            }),
            _vm._v(") and Secant method (using "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0=4",
                  expression: "'x_0=4'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1=3",
                  expression: "'x_1=3'"
                }
              ]
            }),
            _vm._v("). Compare the results."),
            _c("br"),
            _c("deep", [_vm._v("Newton's Method solution")]),
            _c("br"),
            _vm._v(" The first derivative is "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " f'(x) = 1 - \\frac{1}{3}x^{-2/3} ",
                  expression: "' f\\'(x) = 1 - \\\\frac{1}{3}x^{-2/3} '",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Set "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "f(x_n) = x_n - x_n^{1/3} - 2 ",
                  expression: "'f(x_n) = x_n - x_n^{1/3} - 2 '",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " f'(x_n) = 1 - \\frac{1}{3}x_{n}^{-2/3}",
                  expression: "' f\\'(x_n) = 1 - \\\\frac{1}{3}x_{n}^{-2/3}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" The iteration formula is "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    " x_{n+1}=x_n - \\frac{x_n - x_n^{1/3} - 2}{1 - \\frac{1}{3}x_{n}^{-2/3}}",
                  expression:
                    "' x_{n+1}=x_n - \\\\frac{x_n - x_n^{1/3} - 2}{1 - \\\\frac{1}{3}x_{n}^{-2/3}}'",
                  arg: "display"
                }
              ]
            }),
            _c("div", { staticClass: "text-center" }, [
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "n~~~~~~~~~~~x_n~~~~~~~~~~~~~~~~~~~~~~~~f'(x_n)~~~~~~~~~~~~~~~~~~~~~~~f(x_n)~~~~~~~~~~~~~",
                    expression:
                      "'n~~~~~~~~~~~x_n~~~~~~~~~~~~~~~~~~~~~~~~f\\'(x_n)~~~~~~~~~~~~~~~~~~~~~~~f(x_n)~~~~~~~~~~~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("hr", {
                staticClass: "blue mb-1 mt-0 ",
                staticStyle: { width: "500px" }
              }),
              _c("hr", {
                staticClass: "blue mb-1 mt-1 ",
                staticStyle: { width: "500px" }
              }),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "0~~~~~~~3.000000000~~~~0.839750048~~~~-4.422495703 \\times 10^{-1}",
                    expression:
                      "'0~~~~~~~3.000000000~~~~0.839750048~~~~-4.422495703 \\\\times 10^{-1}'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "1~~~~~~~3.526644293 ~~~~0.856129758~~~~4.506791821 \\times 10^{-3}~~~~",
                    expression:
                      "'1~~~~~~~3.526644293 ~~~~0.856129758~~~~4.506791821 \\\\times 10^{-3}~~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "2~~~~~~~3.521380147~~~~0.855986412~~~~~3.771414137 \\times 10^{-7}~~~",
                    expression:
                      "'2~~~~~~~3.521380147~~~~0.855986412~~~~~3.771414137 \\\\times 10^{-7}~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "3~~~~~~~3.521379707~~~~0.855986400~~~~2.664535259 \\times 10^{-15}~~~",
                    expression:
                      "'3~~~~~~~3.521379707~~~~0.855986400~~~~2.664535259 \\\\times 10^{-15}~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "4~~~~~~3.521379707~~~~    0.855986400~~~~0.00000000000~~~~~~~~~~~~~",
                    expression:
                      "'4~~~~~~3.521379707~~~~    0.855986400~~~~0.00000000000~~~~~~~~~~~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("br")
            ]),
            _c("deep", [_vm._v("Secant Method solution")]),
            _c("br"),
            _vm._v(" Set "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "f(x_n) = x_n - x_n^{1/3} - 2  ",
                  expression: "'f(x_n) = x_n - x_n^{1/3} - 2  '",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " f(x_{n-1}) = x_{n-1} - x_{n-1}^{1/3} - 2",
                  expression: "' f(x_{n-1}) = x_{n-1} - x_{n-1}^{1/3} - 2'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    " x_{n+1} = x_n - f(x_n)\\frac{(x_n - x_{n-1})}{\\displaystyle f(x_n) - f(x_{n-1})}",
                  expression:
                    "' x_{n+1} = x_n - f(x_n)\\\\frac{(x_n - x_{n-1})}{\\\\displaystyle f(x_n) - f(x_{n-1})}'",
                  arg: "display"
                }
              ]
            }),
            _c("div", { staticClass: "text-center" }, [
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "n~~~~~~~~~~~x_n~~~~~~~~~~~~~~~~~~~~~~~~f'(x_n)~~~~~~~~~~~~~~~~~~~~~~~f(x_n)~~~~~~~~~~~~~",
                    expression:
                      "'n~~~~~~~~~~~x_n~~~~~~~~~~~~~~~~~~~~~~~~f\\'(x_n)~~~~~~~~~~~~~~~~~~~~~~~f(x_n)~~~~~~~~~~~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("hr", {
                staticClass: "blue mb-1 mt-0 ",
                staticStyle: { width: "500px" }
              }),
              _c("hr", {
                staticClass: "blue mb-1 mt-1 ",
                staticStyle: { width: "500px" }
              }),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "0~~~~~~~4.000000000~~~~3.000000000~~~~-4.422495703 \\times 10^{-1}",
                    expression:
                      "'0~~~~~~~4.000000000~~~~3.000000000~~~~-4.422495703 \\\\times 10^{-1}'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "1~~~~~~~3.000000000~~~~3.517342618~~~~-3.455470954 \\times 10^{-3}",
                    expression:
                      "'1~~~~~~~3.000000000~~~~3.517342618~~~~-3.455470954 \\\\times 10^{-3}'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "2~~~~~~~3.517342618~~~~3.521416653~~~~~3.162504256 \\times 10^{-5}~~~~",
                    expression:
                      "'2~~~~~~~3.517342618~~~~3.521416653~~~~~3.162504256 \\\\times 10^{-5}~~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "~3~~~~~~~3.521416653~~~~3.521379704~~~~-2.034715063 \\times 10^{-9}",
                    expression:
                      "'~3~~~~~~~3.521416653~~~~3.521379704~~~~-2.034715063 \\\\times 10^{-9}'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "~~~4~~~~~~~3.521379704~~~~3.521379707~~~~-1.332267630 \\times 10^{-15}",
                    expression:
                      "'~~~4~~~~~~~3.521379704~~~~3.521379707~~~~-1.332267630 \\\\times 10^{-15}'"
                  }
                ]
              }),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "~~~5~~~~~~~3.521379707~~~~3.521379707~~~~0.000000000~~~~~~~~~~~~~~~~~~~",
                    expression:
                      "'~~~5~~~~~~~3.521379707~~~~3.521379707~~~~0.000000000~~~~~~~~~~~~~~~~~~~'"
                  }
                ]
              }),
              _c("br"),
              _c("br")
            ]),
            _vm._v(
              " We observe that the Secant method converges almost as quickly as the Newton's method. "
            )
          ],
          1
        ),
        _vm._v(
          " The following MATLAB code was used to generate the results for the Secant Method. "
        ),
        _vm._m(20),
        _c(
          "div",
          {
            staticClass: "my-3 p-3",
            staticStyle: { "background-color": "#fff3e0" }
          },
          [
            _c(
              "h4",
              { staticClass: "h4-responsive" },
              [
                _vm._v("Exercise 3.4 "),
                _c("deep", [_vm._v("Exercises on Secant method")])
              ],
              1
            ),
            _c("ol", [
              _c("li", [
                _vm._v(" Use the Secant method to find solutions to within "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "10^{-5}",
                      expression: "'10^{-5}'"
                    }
                  ]
                }),
                _vm._v(
                  " for the following problems. Use the end points of the given intervals as "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0",
                      expression: "'x_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1",
                      expression: "'x_1'"
                    }
                  ]
                }),
                _vm._v(". "),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "~~~\\displaystyle{e^x  + 2^{-x} + 2\\cos x - 6 = 0 ,~~~~\\text{ for } 1 \\leq x \\leq 2}",
                          expression:
                            "'~~~\\\\displaystyle{e^x  + 2^{-x} + 2\\\\cos x - 6 = 0 ,~~~~\\\\text{ for } 1 \\\\leq x \\\\leq 2}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "~~~\\displaystyle{\\ln (x - 1) + \\cos (x - 1) = 0 ,~~~~\\text{ for } 1.3 \\leq x \\leq 2}",
                          expression:
                            "'~~~\\\\displaystyle{\\\\ln (x - 1) + \\\\cos (x - 1) = 0 ,~~~~\\\\text{ for } 1.3 \\\\leq x \\\\leq 2}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "~~~\\displaystyle{2x\\cos 2x - (x-2)^2 = 0 ,~~~~\\text{ for } 2 \\leq x \\leq 3}",
                          expression:
                            "'~~~\\\\displaystyle{2x\\\\cos 2x - (x-2)^2 = 0 ,~~~~\\\\text{ for } 2 \\\\leq x \\\\leq 3}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "~~~\\displaystyle{(x - 2)^2 - \\ln x = 0 ,~~~~\\text{ for } 1 \\leq x \\leq 2}",
                          expression:
                            "'~~~\\\\displaystyle{(x - 2)^2 - \\\\ln x = 0 ,~~~~\\\\text{ for } 1 \\\\leq x \\\\leq 2}'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value:
                            "~~~\\displaystyle{ e^x - 3x^2 = 0 ,~~~~\\text{ for } 0 \\leq x \\leq 1}",
                          expression:
                            "'~~~\\\\displaystyle{ e^x - 3x^2 = 0 ,~~~~\\\\text{ for } 0 \\\\leq x \\\\leq 1}'"
                        }
                      ]
                    })
                  ])
                ])
              ])
            ])
          ]
        )
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "section",
      {
        staticClass: "py-3 px-3 mx-4 grey-text",
        staticStyle: { "background-color": "#fff3e0" }
      },
      [
        _c("h3", { staticClass: " h3-responsive font-weight-bold" }, [
          _vm._v(" 3. Roots of Nonlinear Equations")
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " Derive and apply the Bisection Method to compute roots of nonlinear equations "
        )
      ]),
      _c("li", [
        _vm._v(
          " Derive the statement of the Bisection theorem from the convergence analysis of the Bisection Method algorithm "
        )
      ]),
      _c("li", [
        _vm._v(
          " Compute an estimate of the number of steps required for the Bisection Method algorithm to give a solution that is accurate to within a specified error tolerance "
        )
      ]),
      _c("li", [
        _vm._v(
          " Identify the strengths and weaknesses of the Bisection method "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("1")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.0000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("1.0000000")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 2.000000")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" -1.0000")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.7183")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 5.3891")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 2.0000000")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("2")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.0000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.5000000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("1.000000")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" -1.0000")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" -0.3513")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.7183")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 1.0000000")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("3")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.5000 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.7500000 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 1.000000 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v("-0.3513 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.1170 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.7183 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.5000000")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("4")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.5000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.6250000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.750000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("-0.3513")]),
      _c("div", { staticClass: "col th" }, [_vm._v("-0.1318")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.1170")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.2500000")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("5")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.6250")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.6875000")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.750000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("-0.1318")]),
      _c("div", { staticClass: "col th" }, [_vm._v("-0.0113")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.1170")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.1250000")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("6")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.6875")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.7187500")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.750000")]),
      _c("div", { staticClass: "col th" }, [_vm._v("-0.0113")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.0519 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.1170")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.0625000")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("7")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.6875 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.7031250")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.718750 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v("-0.0113 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" 0.0201")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.0519")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.0312500")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col th" }, [_vm._v("8")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.6875")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.6953125")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.703125 ")]),
      _c("div", { staticClass: "col th" }, [_vm._v(" -0.0113")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.0043")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.0201")]),
      _c("div", { staticClass: "col th" }, [_vm._v("0.0156250")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "my-4", staticStyle: { "font-style": "oblique" } },
      [
        _vm._v(" %% f1.m is a function file "),
        _c("br"),
        _vm._v(" function y = f1(x)"),
        _c("br"),
        _vm._v(" y = exp(x) - 2; ")
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", [
      _vm._v(
        " By performing 4 iterations of the bisection method, show that this root lies in the "
      ),
      _c("br"),
      _vm._v(" interval [1.3125, 1.375]. ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", [
      _c("h5", { staticClass: "pb-2 mb-3 font-weight-bold" }, [
        _vm._v("Intended learning outcomes")
      ]),
      _vm._v(" By the end of this section, you will be able to "),
      _c("ul", [
        _c("li", [_vm._v(" Define a fixed point of a given function ")]),
        _c("li", [
          _vm._v(
            " Derive and apply the Fixed Point Iteration Method algorithm "
          )
        ]),
        _c("li", [
          _vm._v(
            " Describe the condition of convergence of the Fixed Point Iteration Method "
          )
        ]),
        _c("li", [_vm._v(" Prove the Fixed Point Theorem ")]),
        _c("li", [
          _vm._v(
            " State and apply Brouwer's theorem for the existence and uniqueness of fixed point on a given interval "
          )
        ]),
        _c("li", [
          _vm._v(
            " Develop a fixed point function to approximate a solution of a given non-linear equation on a given interval. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Determine the number of iterations necessary to estimate the solution to within a given tolerance level. "
          )
        ]),
        _c("li", [
          _vm._v(
            " Define the Rate of Convergence and convergence factor (asymptotic error constant) "
          )
        ]),
        _c("li", [
          _vm._v(
            " Identify the strengths and weaknesses of the Fixed Point Iteration method "
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "my-3" }, [
      _vm._v(" %% g.m"),
      _c("br"),
      _vm._v(" function y = g(x)"),
      _c("br"),
      _vm._v(" y = (1+x)^(1/3); ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "my-3" }, [
      _vm._v(" clear "),
      _c("br"),
      _vm._v(" %%---fixedpoint.m "),
      _c("br"),
      _vm._v(
        " %% This program uses the fixed point method to find the solution of "
      ),
      _c("br"),
      _vm._v(
        " %% f(x) = x^3 - x - 1 = 0 on (1,2) given x0 = 1.3 over 15 iterations. "
      ),
      _c("br"),
      _vm._v(" N0 = 15; x0 = 1.3 "),
      _c("br"),
      _vm._v(" while i < 15 "),
      _c("br"),
      _c("div", { staticClass: "ml-4" }, [
        _vm._v(" c = g(x0);"),
        _c("br"),
        _vm._v(" x0 = c;"),
        _c("br"),
        _vm._v(" i = i + 1; ")
      ]),
      _vm._v(" fprintf('%10.0f %20.9f\\n',i,c)"),
      _c("br"),
      _vm._v(" end ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "my-3" }, [
      _vm._v(" %% g1.m"),
      _c("br"),
      _vm._v(" function y = g1(x)"),
      _c("br"),
      _vm._v(" y = (3*x^2 + 3)^(1/4); ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "my-3" }, [
      _vm._v(" clear"),
      _c("br"),
      _vm._v(" %%---fixedpoint1.m"),
      _c("br"),
      _vm._v(
        " %% This program uses the fixed point method to find the solution of"
      ),
      _c("br"),
      _vm._v(
        " %% f(x) = x^4 - 3x^2 - 3 = 0 on (1,2) given x0 = 1 to within an accuracy of"
      ),
      _c("br"),
      _vm._v(" %% 10^{-2}."),
      _c("br"),
      _c("br"),
      _vm._v(" TOL = 10^(-2); "),
      _c("br"),
      _vm._v(" x0 = 1;"),
      _c("br"),
      _c("br"),
      _vm._v(" x(1) = x0;"),
      _c("br"),
      _vm._v(" x(2) = g1(x(1));"),
      _c("br"),
      _vm._v(" n = 1;"),
      _c("br"),
      _vm._v(" while abs(x(n+1) - x(n)) > TOL"),
      _c("br"),
      _c("div", { staticClass: "ml-4" }, [
        _vm._v(" n = n+1;"),
        _c("br"),
        _vm._v(" x(n+1) = g1(x(n)); ")
      ]),
      _vm._v(" end"),
      _c("br"),
      _vm._v(" x ' ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " Derive and apply the Newton's Method algorithm to compute roots of nonlinear equations "
        )
      ]),
      _c("li", [
        _vm._v(" Prove the quadratic convergence of Newton's Method ")
      ]),
      _c("li", [
        _vm._v(" Identify the strengths and weaknesses of Newton's method ")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "font-italic my-3 black-text" }, [
      _vm._v(" clear"),
      _c("br"),
      _vm._v(" %%% ---newton1.m "),
      _c("br"),
      _vm._v(
        " %%% This program is used to find solution of f(x) = x^3 - x - 1 = 0"
      ),
      _c("br"),
      _vm._v(" %% using the Newton's method. The iterative scheme is "),
      _c("br"),
      _vm._v(" %% x(n+1)= (2*x(n)^3 + 1 )/(3*x(n)^2 - 1)"),
      _c("br"),
      _c("br"),
      _vm._v(" x(1) = 1.3;"),
      _c("br"),
      _c("br"),
      _vm._v(" for n = 1:15"),
      _c("br"),
      _vm._v(" x(n+1)= (2*x(n)^3 + 1 )/(3*x(n)^2 - 1);"),
      _c("br"),
      _c("br"),
      _vm._v(" fprintf('%10.0f %20.9f\\n',n,x(n))"),
      _c("br"),
      _c("br"),
      _vm._v(" end ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ul", [
      _c("li", [
        _vm._v(
          " Derive and apply the Secant Method algorithm to compute roots of nonlinear equations "
        )
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "font-italic" }, [
      _vm._v(" clear "),
      _c("br"),
      _vm._v(" %%% ---secant1.m"),
      _c("br"),
      _vm._v(
        " %%% This program is used to find solution of f(x) = x - x^(1/3) - 2 = 0"
      ),
      _c("br"),
      _vm._v(" %% using the secant method with x0 = 4 and x1 = 3;."),
      _c("br"),
      _vm._v(" %%"),
      _c("br"),
      _vm._v(" x(1) = 4;"),
      _c("br"),
      _vm._v(" x(2) = 3;"),
      _c("br"),
      _vm._v(" for n = 2:7"),
      _c("br"),
      _c("div", { staticClass: "ml-3" }, [
        _vm._v(" f(n) = x(n) - x(n)^(1/3) - 2;"),
        _c("br"),
        _vm._v(" f(n-1) = x(n-1) - x(n-1)^(1/3) - 2;"),
        _c("br"),
        _vm._v(" x(n+1) = x(n) - f(n)*(x(n) - x(n-1))/(f(n) - f(n-1));"),
        _c("br"),
        _vm._v(
          " fprintf('%10.0f %20.9f %20.9f %20.9e\\n',n-2,x(n-1),x(n),f(n))"
        ),
        _c("br")
      ]),
      _vm._v(" end"),
      _c("br")
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}