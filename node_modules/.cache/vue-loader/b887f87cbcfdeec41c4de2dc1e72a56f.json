{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit5.vue?vue&type=template&id=850205f2&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit5.vue","mtime":1601219181584},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "unit5" }, [
    _vm._m(0),
    _c("section", { staticClass: "dark-grey-text mb-4 p-3 mx-4" }, [
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.1 Trapezoid rule ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _c("div", { staticClass: "my-3  text-center p-4" }, [
            _c(
              "svg",
              {
                attrs: {
                  version: "1.0",
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "",
                  height: "",
                  viewBox: "0 0 811.000000 655.000000",
                  preserveAspectRatio: "xMidYMid meet"
                }
              },
              [
                _c(
                  "g",
                  {
                    attrs: {
                      transform:
                        "translate(0.000000,655.000000) scale(0.100000,-0.100000)",
                      fill: "#000000",
                      stroke: "none"
                    }
                  },
                  [
                    _c("path", {
                      attrs: {
                        d:
                          "M1113 6127 c-1 -12 -5 -40 -9 -63 -5 -33 -3 -42 11 -48 15 -5 16 -4\n6 8 -9 11 -9 25 0 61 7 27 8 50 3 55 -5 5 -10 0 -11 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1177 6080 c-10 -33 -17 -65 -17 -72 0 -6 -7 -20 -17 -30 -9 -10 -11\n-18 -5 -18 17 0 38 39 51 95 7 28 14 58 17 68 3 9 1 17 -4 17 -5 0 -16 -27\n-25 -60z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6415 5938 c-158 -173 -564 -581 -670 -673 -60 -52 -527 -369 -1394\n-947 -1257 -839 -1306 -870 -1375 -886 -97 -22 -478 -21 -661 1 -71 9 -131 14\n-134 11 -15 -14 31 -24 178 -38 252 -24 538 -20 657 10 l24 6 0 -1291 0 -1291\n-855 0 -855 0 0 2551 c0 1862 3 2548 11 2543 12 -7 7 15 -19 75 l-15 36 -12\n-35 c-25 -73 -27 -83 -16 -76 8 5 11 -95 11 -363 l0 -371 -35 0 c-28 0 -35 -4\n-35 -20 0 -16 7 -20 35 -20 l35 0 0 -855 0 -855 -35 0 c-24 0 -35 -5 -35 -15\n0 -10 11 -15 35 -15 l35 0 2 -1302 3 -1303 868 -3 867 -2 0 -40 c0 -33 3 -40\n20 -40 17 0 20 7 20 40 l0 40 1290 0 1290 0 0 -40 c0 -29 4 -40 15 -40 11 0\n15 11 15 40 l0 40 376 0 c334 0 375 -2 364 -15 -10 -11 2 -10 48 7 34 12 61\n23 59 24 -1 1 -29 11 -61 23 -46 17 -56 19 -46 6 11 -13 -26 -15 -369 -15\nl-381 0 0 2164 0 2163 108 96 c114 101 502 491 666 670 59 64 95 111 90 117\n-5 5 -54 -41 -119 -112z m-768 -4665 c-2 -2 -30 6 -61 17 -46 15 -56 16 -46 5\n11 -13 -128 -15 -1185 -15 -1080 0 -1196 2 -1185 16 11 12 2 11 -39 -5 -28\n-12 -56 -21 -61 -21 -6 0 -10 393 -10 1078 l0 1077 113 38 c341 117 675 289\n1031 530 296 201 513 372 1121 885 l320 270 3 -1935 c1 -1065 1 -1938 -1\n-1940z m-243 3709 c-17 -15 -140 -119 -274 -232 -687 -580 -1042 -833 -1480\n-1054 -186 -94 -515 -229 -488 -201 11 11 2262 1514 2268 1514 3 0 -9 -12 -26\n-27z m-2273 -3751 c37 -15 47 -16 38 -5 -10 12 150 14 1185 14 796 0 1195 -3\n1191 -10 -9 -14 10 -12 52 5 19 8 39 15 44 15 5 0 9 -94 9 -210 l0 -210 -1292\n3 -1293 2 -3 208 c-1 134 1 207 8 207 5 0 33 -9 61 -19z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4327 1532 c2 -10 -5 -55 -16 -99 -23 -90 -26 -112 -12 -98 6 6 19\n48 31 95 12 47 24 93 26 103 4 12 0 17 -14 17 -15 0 -19 -5 -15 -18z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4378 1460 c18 -8 21 -14 16 -37 -4 -16 -11 -36 -15 -45 -12 -22 -1\n-48 20 -48 12 0 13 2 3 9 -11 7 -11 16 1 52 17 51 8 79 -26 78 l-22 0 23 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7226 6005 c-9 -9 -16 -25 -16 -36 0 -11 -10 -24 -22 -29 -19 -7 -20\n-9 -5 -9 15 -1 17 -7 13 -28 -3 -16 -8 -46 -12 -68 -3 -22 -8 -48 -11 -59 -3\n-11 -1 -16 5 -12 6 4 17 41 24 82 10 60 17 78 33 84 17 7 17 9 2 9 -14 1 -16\n6 -11 29 9 35 13 42 26 42 5 0 8 -7 4 -15 -3 -8 -1 -15 5 -15 14 0 7 32 -7 37\n-7 2 -19 -3 -28 -12z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7360 6000 c-6 -11 -8 -20 -6 -20 3 0 10 9 16 20 6 11 8 20 6 20 -3\n0 -10 -9 -16 -20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7629 5988 c27 -47 34 -114 18 -175 -8 -29 -10 -50 -6 -47 13 8 29\n75 29 119 0 41 -29 117 -49 129 -6 4 -3 -8 8 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1080 5974 c0 -8 5 -12 10 -9 6 3 10 10 10 16 0 5 -4 9 -10 9 -5 0\n-10 -7 -10 -16z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7331 5933 c-6 -21 -11 -47 -11 -58 0 -31 18 -89 35 -110 13 -17 12\n-14 -1 20 -11 27 -15 61 -12 112 2 40 2 73 1 73 -1 0 -7 -17 -12 -37z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6584 5933 c3 -6 1 -32 -6 -57 -10 -39 -10 -48 3 -61 13 -14 15 -12\n11 19 -2 18 1 44 8 56 10 19 9 25 -5 39 -10 9 -15 11 -11 4z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7487 5929 c9 -11 9 -25 1 -58 -9 -35 -8 -45 4 -58 14 -13 15 -12 11\n10 -3 13 0 40 5 59 8 30 7 36 -12 48 -18 11 -19 11 -9 -1z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7553 5918 c-2 -16 1 -18 10 -9 7 7 8 14 1 21 -6 6 -10 2 -11 -12z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6667 5920 c-8 -20 -29 -104 -28 -108 1 -1 -6 -16 -14 -32 -18 -36\n-12 -40 10 -7 18 28 47 135 41 151 -2 6 -6 5 -9 -4z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6848 5903 c28 -2 76 -2 105 0 28 2 5 3 -53 3 -58 0 -81 -1 -52 -3z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6848 5843 c28 -2 76 -2 105 0 28 2 5 3 -53 3 -58 0 -81 -1 -52 -3z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7420 5820 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0\n-16 -4 -16 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6550 5770 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0\n-16 -4 -16 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M7130 5759 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10\n-5 -10 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M603 5281 c-9 -22 -23 -42 -32 -44 -15 -4 -15 -5 0 -6 15 -1 15 -9 2\n-83 -8 -46 -17 -87 -21 -93 -4 -6 1 -3 10 7 9 10 22 52 29 93 10 65 15 75 33\n76 17 1 17 2 4 6 -10 2 -18 10 -18 16 0 28 13 57 26 57 8 0 11 -6 8 -15 -4 -8\n-1 -15 6 -15 18 0 7 34 -13 38 -13 3 -22 -7 -34 -37z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1149 5288 c27 -47 34 -114 18 -175 -8 -29 -10 -50 -6 -47 13 8 29\n75 29 119 0 41 -29 117 -49 129 -6 4 -3 -8 8 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M730 5268 c-11 -24 -20 -61 -20 -83 0 -44 16 -111 29 -119 4 -3 2 18\n-6 47 -15 57 -9 125 14 170 7 15 11 27 8 27 -3 0 -15 -19 -25 -42z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M933 5219 c-1 -10 2 -19 8 -19 11 0 12 27 1 34 -4 2 -9 -4 -9 -15z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M872 5178 c-12 -52 -5 -78 22 -78 6 0 5 4 -3 9 -12 8 -13 18 -4 58 7\n26 8 51 5 55 -4 4 -13 -16 -20 -44z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1010 5193 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M810 5119 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10\n-5 -10 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M510 5060 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0\n-16 -4 -16 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M603 3541 c-9 -22 -23 -42 -32 -44 -15 -4 -15 -5 0 -6 15 -1 15 -8 3\n-78 -8 -43 -16 -85 -19 -93 -3 -9 0 -8 9 4 8 10 20 52 27 92 10 64 15 74 33\n75 17 1 17 2 4 6 -10 2 -18 10 -18 16 0 28 13 57 26 57 8 0 11 -6 8 -15 -4 -8\n-1 -15 6 -15 18 0 7 34 -13 38 -13 3 -22 -7 -34 -37z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M751 3567 c-40 -49 -53 -150 -27 -212 21 -50 25 -43 9 18 -16 61 -9\n128 18 175 19 33 19 42 0 19z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1149 3548 c27 -47 34 -114 18 -175 -8 -29 -10 -50 -6 -47 13 8 29\n75 29 119 0 41 -29 117 -49 129 -6 4 -3 -8 8 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M933 3479 c-1 -10 2 -19 8 -19 11 0 12 27 1 34 -4 2 -9 -4 -9 -15z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M872 3438 c-10 -44 -10 -55 2 -67 13 -12 14 -12 10 6 -3 11 -1 38 5\n59 6 21 7 42 3 46 -4 4 -13 -16 -20 -44z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M997 3452 c-24 -26 -22 -94 2 -116 40 -36 86 7 77 72 -9 60 -46 81\n-79 44z m57 -8 c9 -23 7 -87 -3 -102 -5 -8 -17 -12 -27 -10 -15 2 -20 14 -22\n52 -2 27 -1 55 2 62 7 19 42 18 50 -2z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M810 3379 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10\n-5 -10 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M510 3320 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0\n-16 -4 -16 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5872 2697 c-6 -6 -13 -24 -17 -40 -4 -15 -14 -27 -24 -27 -13 0 -13\n-2 -2 -9 11 -7 11 -21 2 -77 -7 -38 -14 -78 -17 -89 -3 -15 -1 -13 9 5 8 14\n17 43 21 65 14 82 18 94 34 98 16 4 16 5 0 6 -14 1 -15 6 -7 33 5 17 14 35 21\n40 8 5 9 8 2 8 -6 0 -16 -6 -22 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5895 2680 c-3 -5 1 -10 9 -10 9 0 16 5 16 10 0 6 -4 10 -9 10 -6 0\n-13 -4 -16 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5950 2583 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5770 2450 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2796 2255 c-9 -9 -16 -25 -16 -36 0 -11 -10 -24 -22 -29 -19 -7 -20\n-9 -5 -9 15 -1 17 -7 13 -28 -3 -16 -8 -46 -12 -68 -3 -22 -8 -48 -11 -59 -3\n-11 -1 -16 5 -12 6 4 17 41 24 82 10 60 17 78 33 84 17 7 17 9 2 9 -14 1 -16\n6 -11 29 9 35 13 42 26 42 5 0 8 -7 4 -15 -3 -8 -1 -15 5 -15 14 0 7 32 -7 37\n-7 2 -19 -3 -28 -12z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2857 2142 c-24 -26 -22 -94 2 -116 40 -36 86 7 77 72 -9 60 -46 81\n-79 44z m57 -8 c9 -23 7 -87 -3 -102 -5 -8 -17 -12 -27 -10 -15 2 -20 14 -22\n52 -2 27 -1 55 2 62 7 19 42 18 50 -2z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2700 2009 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10\n-5 -10 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6527 677 c3 -13 0 -40 -5 -60 -6 -20 -7 -39 -2 -42 5 -3 13 18 19\n47 10 42 9 54 -3 66 -12 12 -13 10 -9 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6584 682 c3 -18 18 -20 24 -4 1 5 -4 12 -12 15 -9 4 -13 0 -12 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2977 637 c3 -13 0 -40 -5 -60 -6 -20 -7 -39 -2 -42 5 -3 13 18 19\n47 10 42 9 54 -3 66 -12 12 -13 10 -9 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M3034 642 c3 -18 18 -20 24 -4 1 5 -4 12 -12 15 -9 4 -13 0 -12 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5587 648 c10 -12 10 -24 -1 -60 -12 -40 -11 -46 4 -56 14 -9 16 -7\n13 12 -3 13 0 39 5 58 8 30 7 36 -12 48 -18 12 -19 11 -9 -2z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5653 638 c-2 -16 1 -18 10 -9 7 7 8 14 1 21 -6 6 -10 2 -11 -12z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M3101 616 c-19 -22 -23 -78 -9 -106 30 -56 88 -22 88 51 0 55 -50 90\n-79 55z m54 -61 c0 -51 -3 -60 -19 -63 -24 -5 -36 14 -36 60 0 52 9 70 34 66\n19 -3 21 -9 21 -63z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5730 613 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6460 580 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2910 540 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5520 540 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0\n-16 -4 -16 -10z"
                      }
                    })
                  ]
                )
              ]
            )
          ]),
          _vm._v(
            " The trapezoid rule is based on estimating the area under a curve using trapezoid. The area under the curve "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "y = f(x)",
                expression: "'y = f(x)'"
              }
            ]
          }),
          _vm._v(" in the above diagram, between "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(" can be approximated as "),
          _c(
            "div",
            { staticClass: "table-responsive", staticStyle: { width: "100%" } },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\text{Area } = \\int_{x_0}^{x_1} f(x)~dx = \\int_{x_0}^{x_0+h} f(x)~ dx \\approx \\frac{1}{2} h(f_0 + f_1)",
                            expression:
                              "'\\\\text{Area } = \\\\int_{x_0}^{x_1} f(x)~dx = \\\\int_{x_0}^{x_0+h} f(x)~ dx \\\\approx \\\\frac{1}{2} h(f_0 + f_1)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.1)",
                            expression: "'(5.1)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" To apply the trapezoid rule to an integral "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\displaystyle \\int_a^b f(x)~dx",
                expression: "'\\\\displaystyle \\\\int_a^b f(x)~dx'"
              }
            ]
          }),
          _vm._v(" we divide up the interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[a,b]",
                expression: "'[a,b]'"
              }
            ]
          }),
          _vm._v(" into "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(" equally spaced subintervals "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "(x_0,x_1),(x_1,x_2),\\ldots,(x_{n-1},x_n).",
                expression: "'(x_0,x_1),(x_1,x_2),\\\\ldots,(x_{n-1},x_n).'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The division points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(" are equally spaced: "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "x_i = a + i h,\\;\\;\\;\\text{where }\\;\\;\\;h = \\frac{b-a}{n}",
                expression:
                  "'x_i = a + i h,\\\\;\\\\;\\\\;\\\\text{where }\\\\;\\\\;\\\\;h = \\\\frac{b-a}{n}'",
                arg: "display"
              }
            ]
          }),
          _c("div", { staticClass: "my-3 text-center p-4" }, [
            _c(
              "svg",
              {
                attrs: {
                  version: "1.0",
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "",
                  height: "",
                  viewBox: "0 0 757.000000 616.000000",
                  preserveAspectRatio: "xMidYMid meet"
                }
              },
              [
                _c(
                  "g",
                  {
                    attrs: {
                      transform:
                        "translate(0.000000,616.000000) scale(0.100000,-0.100000)",
                      fill: "#000000",
                      stroke: "none"
                    }
                  },
                  [
                    _c("path", {
                      attrs: {
                        d:
                          "M441 5803 c-7 -21 -15 -44 -18 -52 -3 -9 -1 -11 6 -7 8 5 12 -658 13\n-2561 l3 -2568 3438 -3 c2508 -1 3436 -5 3431 -13 -7 -12 5 -9 76 16 37 14 38\n13 -38 40 -24 8 -40 10 -37 5 4 -7 -129 -10 -369 -10 l-376 0 0 2182 0 2183\n-443 -443 -444 -444 -219 111 c-174 89 -236 126 -304 182 -160 132 -280 166\n-420 119 -165 -56 -272 -162 -490 -490 -58 -87 -118 -161 -199 -243 l-116\n-119 -429 -215 -429 -215 -209 209 c-186 185 -215 219 -267 308 -132 226 -222\n310 -367 344 -100 24 -241 -20 -354 -110 -30 -23 -127 -117 -214 -206 -116\n-120 -185 -181 -256 -229 l-96 -65 -349 -105 c-193 -58 -380 -113 -417 -124\nl-68 -19 0 1247 c0 895 3 1243 11 1232 9 -13 10 -13 6 1 -3 10 -11 35 -18 58\n-7 23 -15 41 -19 41 -4 0 -12 -17 -19 -37z m6099 -2807 l0 -1925 -56 19 c-45\n16 -54 17 -44 5 11 -13 -27 -15 -320 -15 -293 0 -331 2 -320 15 10 12 1 11\n-44 -5 l-56 -19 0 1514 0 1513 38 13 c157 51 346 204 528 429 69 86 187 251\n234 328 17 28 34 52 36 52 2 0 4 -866 4 -1924z m-139 1772 c-195 -286 -413\n-509 -582 -594 -38 -19 -72 -34 -76 -34 -4 0 156 164 357 365 201 201 366 365\n368 365 2 0 -28 -46 -67 -102z m-1454 -244 c49 -17 175 -93 188 -114 5 -9\n-250 113 -264 126 -10 10 32 3 76 -12z m-187 -7 c0 -1 -113 -115 -251 -252\n-217 -216 -246 -241 -208 -185 143 216 270 354 376 409 50 26 83 37 83 28z\nm278 -96 c148 -74 215 -114 272 -161 136 -114 224 -160 310 -160 l50 0 0\n-1514 0 -1515 -56 19 c-45 16 -54 17 -44 5 11 -13 -27 -15 -320 -15 -293 0\n-331 2 -320 15 10 12 1 11 -44 -5 l-56 -19 0 1725 c0 948 2 1724 5 1724 3 0\n94 -44 203 -99z m-238 -1630 l0 -1720 -56 19 c-45 16 -54 17 -44 5 11 -13 -27\n-15 -320 -15 -294 0 -331 2 -320 15 16 19 15 19 -47 -5 l-53 -20 0 1299 0\n1299 416 421 c229 232 418 421 420 421 2 0 4 -774 4 -1719z m830 1332 c3 -3\n-13 -2 -35 2 -55 10 -152 59 -200 101 -37 32 -30 30 95 -32 74 -36 137 -68\n140 -71z m-3621 -131 c-363 -254 -355 -249 -332 -217 35 50 206 210 267 250\n62 42 145 74 190 75 24 0 3 -18 -125 -108z m326 63 c50 -28 128 -110 182 -190\n40 -60 66 -105 61 -105 -2 0 -77 75 -168 166 -162 163 -176 187 -75 129z\nm-155 -1479 l0 -1505 -32 13 c-18 8 -44 17 -58 20 -24 7 -24 6 -6 -8 18 -15\n-11 -16 -313 -16 -295 0 -332 2 -321 15 16 19 15 19 -47 -5 l-53 -20 0 1214 0\n1214 43 25 c23 14 66 45 96 68 45 36 680 486 689 488 1 1 2 -676 2 -1503z\nm518 981 c117 -188 203 -276 308 -312 l39 -13 3 -1081 2 -1081 -50 20 c-60 24\n-70 25 -44 5 17 -13 -19 -14 -315 -15 -295 0 -332 2 -321 15 16 19 15 19 -47\n-5 l-53 -20 0 1502 0 1503 205 -205 c179 -179 214 -219 273 -313z m1229 -2484\nc-2 -2 -19 3 -38 11 -19 7 -45 17 -59 21 -24 7 -24 7 -5 -9 18 -14 -8 -15\n-314 -16 -295 0 -332 2 -321 15 16 19 15 19 -47 -5 l-53 -20 0 1074 0 1073 83\n6 c185 15 321 86 632 330 l120 95 3 -1286 c1 -707 0 -1287 -1 -1289z m-137\n2503 c-42 -40 -248 -187 -316 -226 -103 -59 -223 -100 -294 -99 l-55 0 335\n169 c184 93 337 169 340 169 2 1 -2 -5 -10 -13z m-774 -304 c-7 -6 -70 30\n-113 65 -45 36 -111 117 -158 193 -21 34 9 9 124 -105 82 -82 149 -151 147\n-153z m-1706 -997 l0 -1205 -50 20 c-61 24 -66 24 -50 5 11 -13 -25 -15 -315\n-15 -290 0 -326 2 -315 15 16 20 11 19 -50 -5 -28 -11 -53 -20 -55 -20 -3 0\n-5 486 -5 1079 l0 1079 153 37 c279 68 600 167 664 204 10 6 19 11 21 11 1 0\n2 -542 2 -1205z m-731 -1255 c2 0 -2 7 -9 15 -11 13 26 15 325 15 299 0 336\n-2 325 -15 -11 -13 -8 -13 30 0 23 8 46 15 51 15 5 0 9 -92 9 -205 l0 -205\n-420 0 -420 0 0 210 0 210 53 -20 c28 -11 54 -20 56 -20z m3351 -170 l0 -210\n-420 0 -420 0 0 205 c0 113 4 205 9 205 5 0 28 -7 51 -15 53 -19 60 -19 36 0\n-18 13 19 15 318 15 300 0 337 -2 326 -15 -18 -22 -7 -20 98 24 1 1 2 -93 2\n-209z m870 0 l0 -210 -420 0 -420 0 0 205 c0 113 4 205 9 205 5 0 28 -7 51\n-15 23 -8 45 -15 47 -15 3 0 0 7 -7 15 -11 13 26 15 320 15 307 0 331 -1 319\n-16 -12 -15 -11 -16 10 -9 14 4 38 14 55 21 17 7 32 13 34 14 1 0 2 -94 2\n-210z m870 0 l0 -210 -420 0 -420 0 0 205 c0 113 4 205 9 205 5 0 28 -7 51\n-15 23 -8 45 -15 47 -15 3 0 0 7 -7 15 -11 13 26 15 320 15 307 0 331 -1 319\n-16 -12 -15 -11 -16 10 -9 14 4 38 14 55 21 17 7 32 13 34 14 1 0 2 -94 2\n-210z m-4260 185 c53 -19 59 -19 34 0 -17 13 20 14 320 15 300 0 337 -2 326\n-15 -7 -8 -10 -15 -6 -15 4 0 23 7 43 15 19 8 39 15 44 15 5 0 9 -92 9 -205\nl0 -205 -415 0 -415 0 0 205 c0 113 4 205 9 205 5 0 28 -7 51 -15z m867 0 c45\n-19 64 -19 39 0 -18 13 19 15 318 15 300 0 337 -2 326 -15 -7 -8 -10 -15 -7\n-15 2 0 21 7 40 15 20 8 41 15 47 15 6 0 10 -71 10 -205 l0 -205 -415 0 -415\n0 0 205 c0 134 4 205 10 205 6 0 27 -7 47 -15z m3483 0 c23 -8 45 -15 47 -15\n3 0 0 7 -7 15 -11 13 26 15 320 15 294 0 331 -2 320 -15 -7 -8 -10 -15 -7 -15\n2 0 24 7 47 15 23 8 46 15 51 15 5 0 9 -92 9 -205 l0 -205 -420 0 -420 0 0\n205 c0 113 4 205 9 205 5 0 28 -7 51 -15z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6266 2498 c-9 -12 -16 -30 -16 -40 0 -10 -7 -18 -17 -18 -14 0 -15\n-2 -4 -9 8 -5 11 -19 8 -37 -4 -16 -11 -55 -17 -86 -11 -54 -30 -80 -30 -41 0\n13 -3 14 -12 5 -16 -16 4 -37 26 -29 20 8 32 39 47 122 9 56 14 65 33 66 16 1\n17 2 4 6 -18 5 -23 28 -12 57 8 20 26 21 22 2 -2 -8 2 -15 7 -15 6 -1 10 7 10\n16 0 27 -31 27 -49 1z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6324 2341 c-2 -2 -4 -9 -4 -15 0 -6 5 -4 11 4 8 11 9 2 4 -34 -7\n-51 7 -58 20 -9 8 35 23 53 42 53 12 0 13 -7 8 -27 -13 -48 -11 -58 9 -58 11\n0 21 7 23 15 4 13 3 13 -6 0 -15 -22 -23 -6 -12 24 16 42 5 55 -46 53 -24 -1\n-47 -4 -49 -6z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6087 1332 c2 -10 -5 -55 -16 -99 -12 -45 -21 -86 -21 -93 0 -23 19\n1 26 33 3 17 11 43 16 57 6 14 12 36 13 50 1 14 6 36 9 48 6 18 3 22 -12 22\n-15 0 -19 -5 -15 -18z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6138 1260 c18 -8 21 -14 16 -37 -4 -16 -11 -36 -15 -45 -12 -22 -1\n-48 20 -48 12 0 13 2 3 9 -11 7 -11 16 1 52 17 51 8 79 -26 78 l-22 0 23 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5073 2481 c-9 -22 -23 -42 -32 -44 -14 -4 -13 -5 2 -6 9 0 17 -2 17\n-3 0 -15 -32 -162 -36 -170 -4 -6 -10 -5 -15 3 -4 7 -11 10 -14 7 -8 -8 3 -28\n15 -28 20 0 39 34 50 88 6 31 13 67 15 79 3 12 13 24 23 26 16 4 16 5 -1 6\n-14 1 -16 7 -11 29 8 34 13 42 24 42 5 0 7 -7 4 -15 -4 -8 -1 -15 6 -15 18 0\n7 34 -13 38 -13 3 -22 -7 -34 -37z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5500 2393 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5134 2348 c-3 -5 -3 -12 0 -15 3 -4 6 -1 6 5 0 7 5 12 10 12 9 0 8\n-20 -7 -72 -2 -10 0 -18 6 -18 5 0 13 15 16 33 9 38 22 57 42 57 11 0 13 -9 7\n-45 -5 -35 -3 -45 8 -45 17 0 38 20 38 35 0 5 -5 2 -11 -7 -17 -29 -29 -20\n-17 12 16 46 6 58 -47 58 -25 -1 -48 -5 -51 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5328 2313 c23 -2 59 -2 80 0 20 2 1 4 -43 4 -44 0 -61 -2 -37 -4z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5217 1332 c2 -10 -5 -55 -16 -99 -12 -45 -21 -86 -21 -93 0 -23 19\n1 26 33 3 17 11 43 16 57 6 14 12 36 13 50 1 14 6 36 9 48 6 18 3 22 -12 22\n-15 0 -19 -5 -15 -18z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5268 1260 c18 -8 21 -14 16 -37 -4 -16 -11 -36 -15 -45 -12 -22 -1\n-48 20 -48 12 0 13 2 3 9 -11 7 -11 16 1 52 17 51 8 79 -26 78 l-22 0 23 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4347 1332 c2 -10 -5 -55 -16 -99 -23 -90 -26 -112 -12 -98 6 6 19\n48 31 95 12 47 24 93 26 103 4 12 0 17 -14 17 -15 0 -19 -5 -15 -18z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4398 1260 c18 -8 21 -14 16 -37 -4 -16 -11 -36 -15 -45 -12 -22 -1\n-48 20 -48 12 0 13 2 3 9 -11 7 -11 16 1 52 17 51 8 79 -26 78 l-22 0 23 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1933 2480 c-9 -21 -23 -41 -32 -43 -14 -4 -13 -5 2 -6 9 0 17 -2 17\n-3 0 -15 -32 -162 -36 -170 -4 -6 -9 -6 -14 2 -4 7 -13 9 -19 6 -14 -9 -5 -26\n14 -26 25 0 43 29 55 88 6 31 13 67 15 79 3 12 13 24 23 26 16 4 16 5 -1 6\n-14 1 -16 7 -11 29 8 34 13 42 24 42 4 0 6 -10 3 -22 -5 -18 -3 -21 7 -11 16\n15 6 43 -15 43 -10 0 -23 -16 -32 -40z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2000 2381 c-12 -24 -13 -41 -1 -41 5 0 11 10 13 23 5 35 42 30 46\n-7 3 -22 -5 -37 -34 -67 l-38 -39 46 0 c38 0 47 3 51 21 4 17 3 19 -6 10 -6\n-6 -22 -11 -36 -11 l-26 1 28 20 c42 32 51 56 32 85 -19 29 -60 32 -75 5z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1729 1341 c12 -8 11 -22 -8 -95 -23 -94 -26 -120 -11 -111 6 3 10\n15 10 26 0 11 7 36 16 57 9 20 17 58 19 85 4 43 2 47 -18 47 -17 0 -19 -2 -8\n-9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1783 1263 c20 -5 22 -33 5 -80 -9 -26 -9 -36 0 -45 14 -14 43 -1 50\n23 2 8 -3 5 -11 -6 -23 -29 -29 -14 -16 37 15 54 7 78 -23 77 -17 -1 -18 -2\n-5 -6z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2803 2481 c-9 -22 -23 -42 -32 -44 -14 -4 -13 -5 2 -6 9 0 17 -2 17\n-3 0 -2 -7 -39 -15 -83 -15 -74 -35 -123 -35 -81 0 9 -4 14 -10 11 -15 -9 -12\n-35 4 -35 26 0 44 29 56 88 6 31 13 67 15 79 3 12 13 24 23 26 16 4 16 5 -1 6\n-14 1 -16 7 -11 29 8 34 13 42 24 42 5 0 7 -7 4 -15 -4 -8 -1 -15 6 -15 18 0\n7 34 -13 38 -13 3 -22 -7 -34 -37z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2882 2388 c-15 -15 -16 -38 -2 -38 6 0 10 8 8 18 -2 11 3 17 17 17\n30 0 33 -43 3 -54 -15 -7 -17 -10 -7 -10 44 -2 46 -61 2 -61 -13 0 -22 4 -18\n9 3 5 0 13 -6 16 -17 11 -23 -3 -9 -20 16 -19 64 -20 80 0 13 16 5 55 -13 55\n-8 0 -8 3 1 12 7 7 12 22 12 34 0 32 -44 46 -68 22z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2598 1341 c11 -6 9 -24 -7 -93 -12 -47 -21 -93 -21 -102 0 -30 17\n-8 25 31 4 21 11 46 17 57 6 10 12 41 13 67 4 45 2 49 -18 49 -16 0 -18 -3 -9\n-9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2653 1263 c20 -5 22 -33 5 -80 -9 -26 -9 -36 0 -45 14 -14 43 -1 50\n23 2 8 -3 5 -11 -6 -23 -30 -29 -14 -16 39 14 55 7 76 -23 75 -17 -1 -18 -2\n-5 -6z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M3477 1332 c2 -10 -5 -55 -16 -99 -23 -89 -25 -107 -13 -99 9 5 33\n88 51 174 8 37 7 42 -9 42 -13 0 -17 -6 -13 -18z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M3528 1260 c18 -8 21 -14 16 -37 -4 -16 -11 -36 -15 -45 -12 -22 -1\n-48 20 -48 12 0 13 2 3 9 -11 7 -11 16 1 52 17 51 8 79 -26 78 l-22 0 23 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1071 2501 c-6 -11 -11 -27 -11 -36 0 -8 -10 -20 -22 -25 -18 -7 -19\n-9 -5 -9 9 -1 17 -2 17 -3 0 -15 -32 -162 -36 -170 -4 -6 -10 -5 -15 3 -4 7\n-11 10 -14 7 -8 -8 3 -28 15 -28 20 0 39 34 50 88 6 31 13 67 15 79 3 12 13\n24 23 26 16 4 16 5 -1 6 -14 1 -16 7 -11 29 8 34 13 42 24 42 5 0 7 -7 4 -15\n-4 -8 -1 -15 6 -15 18 0 7 34 -12 38 -9 2 -21 -6 -27 -17z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1150 2383 c-18 -9 -20 -13 -7 -13 14 0 17 -9 17 -54 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M859 1341 c12 -8 11 -22 -8 -95 -23 -94 -26 -120 -11 -111 6 3 10 15\n10 26 0 11 7 36 16 57 9 20 17 58 19 85 4 43 2 47 -18 47 -17 0 -19 -2 -8 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M914 1263 c19 -5 19 -12 0 -95 -5 -20 -2 -29 10 -34 17 -7 46 11 46\n29 0 6 -6 2 -14 -9 -22 -29 -28 -12 -15 38 15 54 7 78 -23 77 -19 -1 -20 -2\n-4 -6z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M193 2481 c-9 -22 -23 -42 -32 -44 -15 -4 -15 -5 0 -6 15 -1 15 -9 2\n-83 -8 -46 -17 -87 -21 -93 -4 -6 1 -3 10 7 9 10 22 52 29 93 10 65 15 75 33\n76 17 1 17 2 4 6 -10 2 -18 10 -18 16 0 28 13 57 26 57 8 0 11 -6 8 -15 -4 -8\n-1 -15 6 -15 18 0 7 34 -13 38 -13 3 -22 -7 -34 -37z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M267 2382 c-24 -26 -22 -94 2 -116 40 -36 86 7 77 72 -9 60 -46 81\n-79 44z m57 -8 c9 -23 7 -87 -3 -102 -5 -8 -17 -12 -27 -10 -15 2 -20 14 -22\n52 -2 27 -1 55 2 62 7 19 42 18 50 -2z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M100 2260 c0 -5 4 -10 9 -10 6 0 13 5 16 10 3 6 -1 10 -9 10 -9 0\n-16 -4 -16 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5437 536 c3 -14 0 -40 -6 -58 -7 -19 -8 -35 -2 -41 5 -5 13 12 20\n44 10 43 9 55 -3 67 -12 12 -13 10 -9 -12z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5494 542 c3 -18 18 -20 24 -4 1 5 -4 12 -12 15 -9 4 -13 0 -12 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M443 529 c-1 -10 2 -19 8 -19 11 0 12 27 1 34 -4 2 -9 -4 -9 -15z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1257 527 c3 -13 0 -40 -5 -60 -6 -20 -7 -39 -2 -42 5 -3 13 18 19\n47 10 42 9 54 -3 66 -12 12 -13 10 -9 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2127 527 c3 -13 0 -40 -5 -60 -6 -20 -7 -39 -2 -42 5 -3 13 18 19\n47 10 42 9 54 -3 66 -12 12 -13 10 -9 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2997 527 c3 -13 0 -40 -5 -60 -6 -20 -7 -39 -2 -42 5 -3 13 18 19\n47 10 42 9 54 -3 66 -12 12 -13 10 -9 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6467 527 c3 -13 0 -40 -5 -60 -6 -20 -7 -39 -2 -42 5 -3 13 18 19\n47 10 42 9 54 -3 66 -12 12 -13 10 -9 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6524 532 c3 -18 18 -20 24 -4 1 5 -4 12 -12 15 -9 4 -13 0 -12 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M382 488 c-8 -42 -8 -56 3 -67 12 -12 13 -11 9 6 -3 11 -1 38 5 59 6\n21 7 42 2 47 -4 4 -13 -16 -19 -45z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1315 531 c-6 -11 9 -23 19 -14 9 9 7 23 -3 23 -6 0 -12 -4 -16 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2185 531 c-6 -11 9 -23 19 -14 9 9 7 23 -3 23 -6 0 -12 -4 -16 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M3055 531 c-6 -11 9 -23 19 -14 9 9 7 23 -3 23 -6 0 -12 -4 -16 -9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M507 502 c-24 -26 -22 -94 2 -116 40 -36 86 7 77 72 -9 60 -46 81\n-79 44z m57 -8 c9 -23 7 -87 -3 -102 -5 -8 -17 -12 -27 -10 -15 2 -20 14 -22\n52 -2 27 -1 55 2 62 7 19 42 18 50 -2z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1390 503 c-24 -12 -25 -13 -2 -13 20 0 22 -5 22 -54 0 -44 -4 -55\n-17 -59 -10 -3 0 -5 22 -5 22 0 32 2 23 5 -14 3 -18 18 -20 71 l-3 68 -25 -13z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2252 507 c-15 -18 -19 -35 -7 -33 5 0 10 8 10 16 0 21 35 19 49 -3\n9 -13 7 -25 -7 -50 l-19 -32 26 24 c31 29 33 52 8 74 -22 20 -46 22 -60 4z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M3122 508 c-15 -15 -16 -38 -2 -38 6 0 10 8 8 18 -2 11 4 18 20 20\n18 3 22 -1 22 -23 0 -17 -7 -29 -22 -35 l-23 -9 22 0 c22 -1 40 -32 28 -51\n-10 -16 -55 -12 -55 6 0 8 -5 12 -10 9 -20 -12 12 -36 43 -33 40 4 58 32 35\n54 -13 13 -14 20 -5 35 23 36 -30 78 -61 47z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5915 510 c-17 -7 -17 -9 -2 -9 14 -1 17 -11 17 -55 0 -44 -4 -55\n-17 -59 -10 -3 2 -5 27 -5 25 0 37 2 28 5 -15 4 -18 16 -18 69 0 66 -1 68 -35\n54z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5558 472 c9 -6 11 -21 6 -53 -8 -52 -1 -50 19 8 12 37 12 43 0 47\n-23 9 -40 7 -25 -2z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5623 474 c12 -4 15 -12 11 -30 -10 -39 -10 -57 1 -60 6 -2 10 16 10\n43 0 40 -3 48 -20 50 -16 1 -16 1 -2 -3z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6588 462 c9 -6 11 -21 6 -53 -8 -52 -1 -50 19 8 12 37 12 43 0 47\n-23 9 -40 7 -25 -2z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6653 464 c12 -4 15 -12 11 -30 -10 -39 -10 -57 1 -60 6 -2 10 16 10\n43 0 40 -3 48 -20 50 -16 1 -16 1 -2 -3z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5370 440 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M320 429 c0 -5 5 -7 10 -4 6 3 10 8 10 11 0 2 -4 4 -10 4 -5 0 -10\n-5 -10 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1190 430 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2060 430 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2930 430 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5743 433 c20 -2 54 -2 75 0 20 2 3 4 -38 4 -41 0 -58 -2 -37 -4z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M6400 430 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2320 401 c0 -8 -12 -11 -37 -9 -22 2 -38 -2 -41 -10 -6 -20 74 -16\n82 4 4 9 4 19 1 22 -3 3 -5 0 -5 -7z"
                      }
                    })
                  ]
                )
              ]
            )
          ]),
          _vm._v(
            " We apply equation (5.1) on each subinterval and add the results to obtain the "
          ),
          _c("deep", [_vm._v("extended or composite trapezoidal rule:")]),
          _c(
            "div",
            { staticClass: "table-responsive", staticStyle: { width: "100%" } },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\begin{aligned}\\int_a^b f(x)~dx & \\approx  \\frac{1}{2}h(f_0+f_1) + \\frac{1}{2}h(f_1+f_2)+  \\ldots + \\frac{1}{2}h(f_{n-2}+f_{n-1}) + \\frac{1}{2}h(f_{n-1}+f_n)~~~~&(5.2)\\\\     &= \\frac{h}{2}\\left(f_0 + 2f_1 + 2f_2 + \\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\right)&(5.3) \\end{aligned}",
                            expression:
                              "'\\\\begin{aligned}\\\\int_a^b f(x)~dx \\& \\\\approx  \\\\frac{1}{2}h(f_0+f_1) + \\\\frac{1}{2}h(f_1+f_2)+  \\\\ldots + \\\\frac{1}{2}h(f_{n-2}+f_{n-1}) + \\\\frac{1}{2}h(f_{n-1}+f_n)~~~~\\&(5.2)\\\\\\\\     \\&= \\\\frac{h}{2}\\\\left(f_0 + 2f_1 + 2f_2 + \\\\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\\\right)\\&(5.3) \\\\end{aligned}'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.1")
              ]),
              _vm._v(" Evaluate "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle{ \\int_2^6 \\frac{1}{1+x}~dx}",
                    expression:
                      "'\\\\displaystyle{ \\\\int_2^6 \\\\frac{1}{1+x}~dx}'"
                  }
                ]
              }),
              _vm._v(" using the Trapezoidal rule with "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h = 1",
                    expression: "'h = 1'"
                  }
                ]
              }),
              _vm._v("."),
              _c("br"),
              _vm._v(" Solution:"),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "a = 2",
                    expression: "'a = 2'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "b = 6",
                    expression: "'b = 6'"
                  }
                ]
              }),
              _vm._v(", thus "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n = (b-a)/h = 4",
                    expression: "'n = (b-a)/h = 4'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} \\int_2^6 \\frac{1}{1+x}~dx & \\approx  \\frac{1}{2}\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\right]\\\\ &=\\frac{1}{2}\\left[ f(2) + 2f(3)+2f(4)+2f(5)+f(6)\\right]\\\\ &=\\frac{1}{2}\\left[\\frac{1}{3} + 2\\cdot \\frac{1}{4}+ 2\\cdot \\frac{1}{5}+ 2\\cdot \\frac{1}{6}+ \\frac{1}{7}\\right] = \\frac{359}{420} = 0.855\\\\\\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} \\\\int_2^6 \\\\frac{1}{1+x}~dx \\& \\\\approx  \\\\frac{1}{2}\\\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\\\right]\\\\\\\\ \\&=\\\\frac{1}{2}\\\\left[ f(2) + 2f(3)+2f(4)+2f(5)+f(6)\\\\right]\\\\\\\\ \\&=\\\\frac{1}{2}\\\\left[\\\\frac{1}{3} + 2\\\\cdot \\\\frac{1}{4}+ 2\\\\cdot \\\\frac{1}{5}+ 2\\\\cdot \\\\frac{1}{6}+ \\\\frac{1}{7}\\\\right] = \\\\frac{359}{420} = 0.855\\\\\\\\\\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The exact solution is "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\ln|x+1|_2^6 = \\ln 7 - \\ln 3 = 0.847",
                    expression:
                      "'\\\\ln|x+1|_2^6 = \\\\ln 7 - \\\\ln 3 = 0.847'"
                  }
                ]
              })
            ]
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.2")
              ]),
              _vm._v(" Evaluate the integral "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle \\int_0^1 e^{-x^2}~dx",
                    expression: "'\\\\displaystyle \\\\int_0^1 e^{-x^2}~dx'"
                  }
                ]
              }),
              _vm._v(" using the trapezoid rule with "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h = 0.25",
                    expression: "'h = 0.25'"
                  }
                ]
              }),
              _c("br"),
              _vm._v(" Solution: "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} \\int_0^{1} e^{-x^2} & \\approx  \\frac{0.25}{2}  \\left[f(0) + 2 f(0.25) + 2 f(0.5) + 2 f(0.75) + f(1) \\right] \\\\  &= \\frac{0.25}{2}\\left[ e^0 + 2e^{-(0.25)^2} + 2e^{-(0.5)^2} +  2e^{-(0.75)^2} +   e^{-(1)^2}\\right] = 0.74298\\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} \\\\int_0^{1} e^{-x^2} \\& \\\\approx  \\\\frac{0.25}{2}  \\\\left[f(0) + 2 f(0.25) + 2 f(0.5) + 2 f(0.75) + f(1) \\\\right] \\\\\\\\  \\&= \\\\frac{0.25}{2}\\\\left[ e^0 + 2e^{-(0.25)^2} + 2e^{-(0.5)^2} +  2e^{-(0.75)^2} +   e^{-(1)^2}\\\\right] = 0.74298\\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              })
            ]
          )
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.2 Newton-Cotes formula ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(" Suppose that we have to evaluate the integral "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "\\int_a^b f(x)~dx",
                            expression: "'\\\\int_a^b f(x)~dx'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.4)",
                            expression: "'(5.4)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(
            " is a real valued function. Since polynomials are easy to integrate, we can approximate the function "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" by its Lagrange interpolation polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n",
                expression: "'P_n'"
              }
            ]
          }),
          _vm._v(" of degree "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(", so that the integral is approximated as "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_a^b f(x)~dx \\approx \\int_a^b P_n(x)~dx",
                            expression:
                              "'\\\\int_a^b f(x)~dx \\\\approx \\\\int_a^b P_n(x)~dx'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.5)",
                            expression: "'(5.5)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(
            " Recall from the previous chapter that the Lagrange interpolation polynomial of degree "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(" for the function "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f",
                expression: "'f'"
              }
            ]
          }),
          _vm._v(", with these interpolation points, is of the form "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "P_n(x) = L_0(x)f_0 + L_1(x)f_1 + \\ldots + L_n(x)f_n = \\sum_{k=0}^n  L_k(x)f(x_k)",
                            expression:
                              "'P_n(x) = L_0(x)f_0 + L_1(x)f_1 + \\\\ldots + L_n(x)f_n = \\\\sum_{k=0}^n  L_k(x)f(x_k)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.6)",
                            expression: "'(5.6)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" with the error of the interpolation given by "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "E_{n+1} = \\frac{\\pi_{n+1}(x)}{(n+1)!}f^{(n+1)}(\\xi),\\;\\;\\;\\;\\text{with }\\; x_0  <  \\xi < x_n",
                expression:
                  "'E_{n+1} = \\\\frac{\\\\pi_{n+1}(x)}{(n+1)!}f^{(n+1)}(\\\\xi),\\\\;\\\\;\\\\;\\\\;\\\\text{with }\\\\; x_0  <  \\\\xi < x_n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" where "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "L_k(x) = \\frac{(x-x_0)(x-x_1)\\cdots(x-x_{k-1})(x-x_{k+1})\\cdots(x-x_n)}{(x_k-x_0)(x_k-x_1)\\cdots(x_k-x_{k-1})(x_k-x_{k+1})\\cdots(x_k-x_n)}~,~~~k=0,1,2,\\ldots,n",
                            expression:
                              "'L_k(x) = \\\\frac{(x-x_0)(x-x_1)\\\\cdots(x-x_{k-1})(x-x_{k+1})\\\\cdots(x-x_n)}{(x_k-x_0)(x_k-x_1)\\\\cdots(x_k-x_{k-1})(x_k-x_{k+1})\\\\cdots(x_k-x_n)}~,~~~k=0,1,2,\\\\ldots,n'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.7)",
                            expression: "'(5.7)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" and "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\pi_{n+1}(x) = (x-x_0)(x-x_1)(x-x_2)\\cdots(x-x_{n-1})(x-x_n).",
                expression:
                  "'\\\\pi_{n+1}(x) = (x-x_0)(x-x_1)(x-x_2)\\\\cdots(x-x_{n-1})(x-x_n).'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" For simplicity, we shall assume that the points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(", are equally spaced, that is, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: " x_i = a + ih ,\\;\\;\\;\\; i = 0,1,\\ldots, n",
                expression:
                  "' x_i = a + ih ,\\\\;\\\\;\\\\;\\\\; i = 0,1,\\\\ldots, n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "h",
                expression: "'h'"
              }
            ]
          }),
          _vm._v(" is the step size defined by "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "h = \\frac{b - a}{n}",
                expression: "'h = \\\\frac{b - a}{n}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Substituting (5.6) into the (5.5) gives "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_a^b f(x)~dx \\approx \\sum_{k = 0}^{n}w_k f(x_k)",
                            expression:
                              "'\\\\int_a^b f(x)~dx \\\\approx \\\\sum_{k = 0}^{n}w_k f(x_k)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.8)",
                            expression: "'(5.8)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" where "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "w_k = \\int_a^b L_k(x)~dx,\\;\\;\\;\\;k = 0,1,\\ldots,n",
                            expression:
                              "'w_k = \\\\int_a^b L_k(x)~dx,\\\\;\\\\;\\\\;\\\\;k = 0,1,\\\\ldots,n'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.9)",
                            expression: "'(5.9)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" The values "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "w_k",
                expression: "'w_k'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k = 0,1,\\ldots,n",
                expression: "'k = 0,1,\\\\ldots,n'"
              }
            ]
          }),
          _vm._v(", are referred to as the "),
          _c("deep", [_vm._v("quadrature weights")]),
          _vm._v(", while the interpolation points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_k",
                expression: "'x_k'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k=0, 1,\\ldots,n",
                expression: "'k=0, 1,\\\\ldots,n'"
              }
            ]
          }),
          _vm._v(", are called the "),
          _c("deep", [_vm._v("quadrature points")]),
          _vm._v(". The formula (5.8), with "),
          _c("deep", [_vm._v("quadrature weights")]),
          _vm._v(" and equally spaced quadrature points, is called the "),
          _c("deep", [_vm._v("Newton-Cotes formula")]),
          _vm._v(" of order "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v("."),
          _c("br"),
          _c("br"),
          _c("deep", [_vm._v("Derivation of the Trapezium Rule")]),
          _c("br"),
          _vm._v(" To derive the Trapezium rule, we take "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n = 1",
                expression: "'n = 1'"
              }
            ]
          }),
          _vm._v(
            ". The Lagrange interpolation polynomial of degree 1 for the function "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f",
                expression: "'f'"
              }
            ]
          }),
          _vm._v(" is simply "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} P_1(x)&= L_0(x)f(x_0) + L_1(x)f(x_1)\\\\     &= \\frac{x - x_1}{x_0 - x_1}f(x_0) + \\frac{x-x_0}{x_1-x_0}f(x_1)\\\\     &= \\frac{x_1-x}{x_1 - x_0}f(x_0) + \\frac{x-x_0}{x_1-x_0}f(x_1)\\\\     &= \\frac{1}{h}[(x_1-x)f(x_0)+ (x-x_0)f(x_1)]  \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} P_1(x)\\&= L_0(x)f(x_0) + L_1(x)f(x_1)\\\\\\\\     \\&= \\\\frac{x - x_1}{x_0 - x_1}f(x_0) + \\\\frac{x-x_0}{x_1-x_0}f(x_1)\\\\\\\\     \\&= \\\\frac{x_1-x}{x_1 - x_0}f(x_0) + \\\\frac{x-x_0}{x_1-x_0}f(x_1)\\\\\\\\     \\&= \\\\frac{1}{h}[(x_1-x)f(x_0)+ (x-x_0)f(x_1)]  \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Integrating "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_1(x)",
                expression: "'P_1(x)'"
              }
            ]
          }),
          _vm._v(" from "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(" to "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(" gives, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\int_{x_0}^{x_1} f(x)~dx \\approx \\frac{x_1 - x_0}{2}[f(x_0) + f(x_1)] =  \\frac{h}{2}[f(x_0) + f(x_1)]",
                expression:
                  "'\\\\int_{x_0}^{x_1} f(x)~dx \\\\approx \\\\frac{x_1 - x_0}{2}[f(x_0) + f(x_1)] =  \\\\frac{h}{2}[f(x_0) + f(x_1)]'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" which is the Trapezium formula obtained in (5.1)."),
          _c("br"),
          _c("deep", [_vm._v("N.B")]),
          _vm._v(
            " When integrating Lagrange polynomials, it is convenient to express "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x",
                expression: "'x'"
              }
            ]
          }),
          _vm._v(" in terms of the variable "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "s",
                expression: "'s'"
              }
            ]
          }),
          _vm._v(" so that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "x = x_0 + sh\\;\\;\\;\\;\\text{and }\\;\\;\\;x - x_i = (s-i)h.",
                expression:
                  "'x = x_0 + sh\\\\;\\\\;\\\\;\\\\;\\\\text{and }\\\\;\\\\;\\\\;x - x_i = (s-i)h.'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" To integrate from "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(" to "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(" we note that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "dx = h~ds,\\;\\; s = 0\\;\\text{when }x = x_0,\\;\\; \\text{and }s = 1\\;\\text{when }x = x_1.",
                expression:
                  "'dx = h~ds,\\\\;\\\\; s = 0\\\\;\\\\text{when }x = x_0,\\\\;\\\\; \\\\text{and }s = 1\\\\;\\\\text{when }x = x_1.'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Thus, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} \\int_{x_0}^{x_1}P_1(x) &= \\int_{x_0}^{x_1}\\left[ \\frac{x_1-x}{x_1 - x_0}f(x_0) + \\frac{x-x_0}{x_1-x_0}f(x_1)\\right]~dx\\\\  & = h \\int_0^1 \\left[\\frac{-(s-1)h}{h}f(x_0) + \\frac{sh}{h}f(x_1) \\right]~ds\\\\  & = \\frac{h}{2}[f(x_0) + f(x_1)] \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} \\\\int_{x_0}^{x_1}P_1(x) \\&= \\\\int_{x_0}^{x_1}\\\\left[ \\\\frac{x_1-x}{x_1 - x_0}f(x_0) + \\\\frac{x-x_0}{x_1-x_0}f(x_1)\\\\right]~dx\\\\\\\\  \\& = h \\\\int_0^1 \\\\left[\\\\frac{-(s-1)h}{h}f(x_0) + \\\\frac{sh}{h}f(x_1) \\\\right]~ds\\\\\\\\  \\& = \\\\frac{h}{2}[f(x_0) + f(x_1)] \\\\end{aligned}'",
                arg: "display"
              }
            ]
          })
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "py-3 my-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.3 Simpson's Formula ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _c("deep", [_vm._v("Derivation of Simpson's 1st Rule")]),
          _c("br"),
          _vm._v(
            " A slightly more sophisticated quadrature formula is obtained by taking "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n = 2",
                expression: "'n = 2'"
              }
            ]
          }),
          _vm._v(". In this case, the three points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0, x_1",
                expression: "'x_0, x_1'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_2",
                expression: "'x_2'"
              }
            ]
          }),
          _vm._v(" are used and integration is done over the interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[x_0,x_2]",
                expression: "'[x_0,x_2]'"
              }
            ]
          }),
          _vm._v(". The quadrature weights are calculated from "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} w_0 & = \\int_{x_0}^{x_2} L_0(x)~dx\\\\ & = \\int_{x_0}^{x_2} \\frac{(x-x_1)(x-x_2)}{(x_0 - x_1)(x_0-x_2)}~dx\\\\ & = h \\int_0^2 \\frac{(s-1)(s-2)h^2}{(-h)(-2h)}~ds\\\\ & = \\frac{h}{2}\\int_0^2 (s^2 - 3s + 2)~ds\\\\ & =\\frac{h}{3} \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} w_0 \\& = \\\\int_{x_0}^{x_2} L_0(x)~dx\\\\\\\\ \\& = \\\\int_{x_0}^{x_2} \\\\frac{(x-x_1)(x-x_2)}{(x_0 - x_1)(x_0-x_2)}~dx\\\\\\\\ \\& = h \\\\int_0^2 \\\\frac{(s-1)(s-2)h^2}{(-h)(-2h)}~ds\\\\\\\\ \\& = \\\\frac{h}{2}\\\\int_0^2 (s^2 - 3s + 2)~ds\\\\\\\\ \\& =\\\\frac{h}{3} \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} w_1& = \\int_{x_0}^{x_2} L_1(x)~dx\\\\ & = \\int_{x_0}^{x_2} \\frac{(x-x_0)(x-x_2)}{(x_1 - x_0)(x_1-x_2)}~dx\\\\ & = h \\int_0^2 \\frac{s(s-2)h^2}{(h)(-h)}~ds\\\\ & = -h\\int_0^2 (s^2 - 2s)~ds\\\\ & =\\frac{4h}{3} \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} w_1\\& = \\\\int_{x_0}^{x_2} L_1(x)~dx\\\\\\\\ \\& = \\\\int_{x_0}^{x_2} \\\\frac{(x-x_0)(x-x_2)}{(x_1 - x_0)(x_1-x_2)}~dx\\\\\\\\ \\& = h \\\\int_0^2 \\\\frac{s(s-2)h^2}{(h)(-h)}~ds\\\\\\\\ \\& = -h\\\\int_0^2 (s^2 - 2s)~ds\\\\\\\\ \\& =\\\\frac{4h}{3} \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} w_2& = \\int_{x_0}^{x_2} L_2(x)~dx\\\\ & = \\int_{x_0}^{x_2} \\frac{(x-x_0)(x-x_1)}{(x_2 - x_0)(x_2-x_1)}~dx\\\\  & = h \\int_0^2 \\frac{s(s-1)h^2}{(2h)(h)}~ds\\\\  & = \\frac{h}{2}\\int_0^2 (s^2 - s)~ds\\\\  &= \\frac{h}{3} \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} w_2\\& = \\\\int_{x_0}^{x_2} L_2(x)~dx\\\\\\\\ \\& = \\\\int_{x_0}^{x_2} \\\\frac{(x-x_0)(x-x_1)}{(x_2 - x_0)(x_2-x_1)}~dx\\\\\\\\  \\& = h \\\\int_0^2 \\\\frac{s(s-1)h^2}{(2h)(h)}~ds\\\\\\\\  \\& = \\\\frac{h}{2}\\\\int_0^2 (s^2 - s)~ds\\\\\\\\ \\ &= \\\\frac{h}{3} \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" This gives, "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_{x_0}^{x_2}f(x)~dx = \\frac{h}{3}\\left[f(x_0) + 4f(x_1) + f(x_2) \\right]",
                            expression:
                              "'\\\\int_{x_0}^{x_2}f(x)~dx = \\\\frac{h}{3}\\\\left[f(x_0) + 4f(x_1) + f(x_2) \\\\right]'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.10)",
                            expression: "'(5.10)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _c("deep", [
            _vm._v("Derivation of Composite Trapezium and Simpson's rule")
          ]),
          _c("br"),
          _vm._v(" The Trapezoid rule for the sub-interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[x_i,x_{i+1}]",
                expression: "'[x_i,x_{i+1}]'"
              }
            ]
          }),
          _vm._v(" is "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_{x_i}^{x_{i+1}} f(x)dx \\approx \\frac{n}{2}[f(x_i) + f(x_{i+1})]",
                            expression:
                              "'\\\\int_{x_i}^{x_{i+1}} f(x)dx \\\\approx \\\\frac{n}{2}[f(x_i) + f(x_{i+1})]'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.11)",
                            expression: "'(5.11)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" Suppose that the interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[a,b]",
                expression: "'[a,b]'"
              }
            ]
          }),
          _vm._v(" is partitioned into "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(" equally spaced sub-intervals of length "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "h",
                expression: "'h'"
              }
            ]
          }),
          _vm._v(" as shown in the figure below "),
          _c("div", { staticClass: "my-3  text-center p-4" }, [
            _c(
              "svg",
              {
                attrs: {
                  version: "1.0",
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "",
                  height: "",
                  viewBox: "0 0 1187.000000 133.000000",
                  preserveAspectRatio: "xMidYMid meet"
                }
              },
              [
                _c(
                  "g",
                  {
                    attrs: {
                      transform:
                        "translate(0.000000,133.000000) scale(0.100000,-0.100000)",
                      fill: "#000000",
                      stroke: "none"
                    }
                  },
                  [
                    _c("path", {
                      attrs: {
                        d:
                          "M11260 1203 c-7 -32 -18 -84 -25 -115 -13 -55 -6 -76 13 -42 8 15 10\n15 15 0 4 -10 18 -16 35 -16 76 0 113 142 42 165 -10 3 -29 1 -40 -5 -19 -10\n-20 -9 -14 30 10 63 -13 48 -26 -17z m79 -32 c33 -21 1 -121 -38 -121 -44 0\n-53 69 -14 112 18 20 31 22 52 9z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M274 1190 c-24 -9 -39 -28 -31 -36 3 -3 17 2 31 11 30 20 66 12 66\n-15 0 -14 -11 -19 -47 -25 -27 -4 -54 -12 -60 -17 -16 -13 -17 -50 -1 -66 15\n-15 60 -16 75 -1 8 8 13 8 17 0 14 -22 24 -10 30 39 4 28 9 56 12 63 12 33\n-50 65 -92 47z m56 -94 c0 -22 -29 -46 -56 -46 -32 0 -43 28 -19 46 25 19 75\n18 75 0z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1630 1113 c-7 -32 -18 -84 -25 -115 -11 -46 -11 -58 -1 -58 7 0 18\n24 25 56 13 57 39 94 66 94 24 0 29 -27 16 -87 -12 -51 -10 -75 5 -60 11 11\n34 122 28 139 -8 26 -41 32 -70 13 l-25 -16 6 45 c11 68 -11 58 -25 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5300 1113 c-7 -32 -18 -84 -25 -115 -11 -46 -11 -58 -1 -58 7 0 18\n24 25 56 13 57 39 94 66 94 24 0 29 -27 16 -87 -12 -51 -10 -75 5 -60 11 11\n34 122 28 139 -8 26 -41 32 -70 13 l-25 -16 6 45 c11 68 -11 58 -25 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M256 824 c-34 -33 -7 -94 42 -94 21 0 52 24 52 41 0 5 162 9 405 9\n349 0 405 -2 405 -15 0 -17 30 -35 59 -35 11 0 28 11 39 25 l20 25 395 0 395\n0 16 -25 c23 -34 69 -34 92 0 l16 25 398 0 398 0 16 -26 c22 -33 76 -31 91 4\nl10 22 402 0 c393 0 402 0 408 -20 12 -38 88 -38 100 1 6 18 19 19 411 19 348\n0 404 -2 404 -15 0 -17 30 -35 59 -35 11 0 28 11 39 25 l20 25 395 0 395 0 16\n-25 c11 -17 26 -25 46 -25 20 0 35 8 46 25 l16 25 398 0 398 0 16 -26 c22 -33\n76 -31 91 4 l10 22 402 0 c393 0 402 0 408 -20 12 -38 88 -38 100 1 6 18 19\n19 411 19 348 0 404 -2 404 -15 0 -17 30 -35 59 -35 11 0 28 11 39 25 l20 25\n395 0 395 0 16 -25 c23 -34 69 -34 92 0 l16 25 395 0 395 0 20 -25 c11 -14 28\n-25 39 -25 29 0 59 18 59 35 0 13 56 15 404 15 396 0 405 0 411 -20 7 -23 43\n-35 74 -25 24 7 36 43 26 74 -12 39 -88 39 -100 0 -6 -18 -19 -19 -408 -19\nl-402 0 -10 23 c-15 34 -67 35 -93 3 l-20 -26 -395 0 -395 0 -16 25 c-23 34\n-69 34 -92 0 l-16 -25 -395 0 -395 0 -20 26 c-26 32 -78 31 -93 -3 l-10 -23\n-402 0 c-393 0 -402 0 -408 20 -12 38 -88 38 -100 -1 -6 -18 -19 -19 -408 -19\nl-402 0 -10 23 c-15 34 -67 35 -93 3 l-20 -26 -395 0 -395 0 -16 25 c-23 34\n-69 34 -92 0 l-16 -25 -395 0 -395 0 -20 26 c-26 32 -78 31 -93 -3 l-10 -23\n-402 0 c-393 0 -402 0 -408 20 -12 38 -88 38 -100 -1 -6 -18 -19 -19 -408 -19\nl-402 0 -10 23 c-15 34 -69 36 -91 3 l-16 -26 -398 0 -398 0 -16 25 c-11 17\n-26 25 -46 25 -20 0 -35 -8 -46 -25 l-16 -25 -395 0 -395 0 -20 26 c-26 32\n-78 31 -93 -3 l-10 -23 -402 0 c-347 0 -403 2 -403 15 0 32 -67 46 -94 19z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M190 445 c0 -2 8 -20 17 -40 l17 -35 -32 -33 c-18 -18 -32 -36 -32\n-40 0 -17 26 -4 50 25 l26 31 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1100 445 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2020 445 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4680 445 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5720 445 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9230 445 c0 -2 8 -20 17 -40 l17 -35 -32 -33 c-18 -18 -32 -36 -32\n-40 0 -17 26 -4 50 25 l26 31 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10140 445 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28\n-40 -21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9\n-6 40 l-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33\n-46 -1 -10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M11190 445 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28\n-40 -21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9\n-6 40 l-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33\n-46 -1 -10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M340 368 c-22 -37 -26 -98 -8 -116 31 -31 71 -4 88 57 22 84 -38 128\n-80 59z m68 -8 c6 -35 -15 -97 -35 -105 -40 -15 -50 58 -16 113 18 29 47 25\n51 -8z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1285 374 c-28 -24 -28 -25 -6 -19 21 6 23 5 18 -16 -14 -58 -19\n-103 -11 -96 11 10 43 157 35 157 -3 -1 -19 -12 -36 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2185 384 c-22 -22 -10 -31 13 -10 22 19 52 12 52 -13 0 -10 -20 -36\n-45 -58 -25 -22 -45 -45 -45 -52 0 -6 18 -11 45 -11 25 0 45 5 45 10 0 6 -16\n10 -36 10 l-37 0 47 43 c50 47 54 58 30 81 -20 21 -48 20 -69 0z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4830 390 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5055 374 c-28 -24 -28 -25 -6 -19 21 6 23 5 18 -16 -14 -58 -19\n-103 -11 -96 11 10 43 157 35 157 -3 -1 -19 -12 -36 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5880 390 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9655 384 c-23 -23 -9 -31 15 -9 16 14 22 15 35 5 24 -20 18 -33 -30\n-77 -25 -22 -45 -45 -45 -52 0 -6 18 -11 45 -11 25 0 45 5 45 10 0 6 -16 10\n-36 10 l-37 0 47 43 c50 47 54 58 30 81 -20 21 -48 20 -69 0z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10595 374 c-28 -24 -28 -25 -6 -19 21 6 23 5 18 -16 -14 -58 -19\n-103 -11 -96 11 10 43 157 35 157 -3 -1 -19 -12 -36 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9421 351 c-8 -5 -20 -7 -26 -4 -8 2 -15 -10 -19 -34 -4 -21 -9 -46\n-12 -55 -3 -10 -1 -18 4 -18 6 0 13 18 17 40 7 40 39 75 57 64 6 -4 7 -29 3\n-58 -8 -59 2 -57 16 4 13 55 -6 83 -40 61z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10331 351 c-8 -5 -20 -7 -26 -4 -8 2 -15 -10 -19 -34 -4 -21 -9 -46\n-12 -55 -3 -10 -1 -18 4 -18 6 0 13 18 17 40 7 40 39 75 57 64 6 -4 7 -29 3\n-58 -8 -59 2 -57 16 4 13 55 -6 83 -40 61z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M11375 350 c-3 -5 -12 -7 -19 -4 -9 4 -16 -7 -20 -33 -4 -21 -9 -46\n-12 -55 -3 -10 -1 -18 4 -18 6 0 13 18 17 40 7 40 39 75 57 64 6 -4 7 -29 3\n-58 -8 -59 2 -57 16 4 7 30 6 46 -2 56 -13 16 -35 18 -44 4z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4817 321 c-3 -16 -9 -40 -13 -55 -3 -15 -2 -26 4 -26 5 0 12 18 16\n39 3 22 9 46 12 55 3 9 2 16 -4 16 -5 0 -12 -13 -15 -29z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5867 321 c-3 -16 -9 -40 -13 -55 -3 -15 -2 -26 4 -26 5 0 12 18 16\n39 3 22 9 46 12 55 3 9 2 16 -4 16 -5 0 -12 -13 -15 -29z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4885 300 c-4 -6 15 -10 49 -10 31 0 56 5 56 10 0 6 -22 10 -49 10\n-28 0 -53 -4 -56 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9505 300 c-4 -6 15 -10 49 -10 31 0 56 5 56 10 0 6 -22 10 -49 10\n-28 0 -53 -4 -56 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10425 300 c-4 -6 15 -10 49 -10 31 0 56 5 56 10 0 6 -22 10 -49 10\n-28 0 -53 -4 -56 -10z"
                      }
                    })
                  ]
                )
              ]
            )
          ]),
          _vm._v(" The sum of the Trapezoid rule on each interval is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned}\\sum_{i = 0}^{n-1}\\left[\\int_{x_i}^{x_{i+1}} f(x)dx \\right]&= \\int_{a}^b f(x)dx \\\\& \\approx \\frac{h}{2}\\sum_{i=0}^{n-1}[f(x_i) + f(x_{i+1})]\\\\& = \\frac{h}{2}\\left[f(x_0) + f(x_n) + 2 \\sum_{i=1}^{n-1} f(x_i)\\right]\\\\& = \\frac{h}{2}\\left(f_0 + 2f_1 + 2f_2 + \\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\right) \\end{aligned} ",
                expression:
                  "'\\\\begin{aligned}\\\\sum_{i = 0}^{n-1}\\\\left[\\\\int_{x_i}^{x_{i+1}} f(x)dx \\\\right]\\&= \\\\int_{a}^b f(x)dx \\\\\\\\\\& \\\\approx \\\\frac{h}{2}\\\\sum_{i=0}^{n-1}[f(x_i) + f(x_{i+1})]\\\\\\\\\\& = \\\\frac{h}{2}\\\\left[f(x_0) + f(x_n) + 2 \\\\sum_{i=1}^{n-1} f(x_i)\\\\right]\\\\\\\\\\& = \\\\frac{h}{2}\\\\left(f_0 + 2f_1 + 2f_2 + \\\\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\\\right) \\\\end{aligned} '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f_i = f(x_{i})",
                expression: "'f_i = f(x_{i})'"
              }
            ]
          }),
          _vm._v("."),
          _c("br"),
          _vm._v(" The formula for the Simpson's rule over three points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_{i+1}",
                expression: "'x_{i+1}'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_{2i}",
                expression: "'x_{2i}'"
              }
            ]
          }),
          _vm._v(" is "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_{x_i}^{x_{i+2}}f(x)~dx = \\frac{h}{3}\\left[f(x_i) + 4f(x_{i+1}) + f(x_{i+2}) \\right]",
                            expression:
                              "'\\\\int_{x_i}^{x_{i+2}}f(x)~dx = \\\\frac{h}{3}\\\\left[f(x_i) + 4f(x_{i+1}) + f(x_{i+2}) \\\\right]'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.12)",
                            expression: "'(5.12)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" Suppose that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[a, b]",
                expression: "'[a, b]'"
              }
            ]
          }),
          _vm._v(" is subdivided into "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "2N",
                expression: "'2N'"
              }
            ]
          }),
          _vm._v(" subintervals "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[x_i , x_{i+1}]",
                expression: "'[x_i , x_{i+1}]'"
              }
            ]
          }),
          _vm._v(" of equal width "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "h=(b-a)/(2N)",
                expression: "'h=(b-a)/(2N)'"
              }
            ]
          }),
          _vm._v(" by using "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i=a +ih",
                expression: "'x_i=a +ih'"
              }
            ]
          }),
          _vm._v(" for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "i=0,1,\\ldots,2N",
                expression: "'i=0,1,\\\\ldots,2N'"
              }
            ]
          }),
          _vm._v(" as shown below "),
          _c("div", { staticClass: "my-3  text-center p-4" }, [
            _c(
              "svg",
              {
                attrs: {
                  version: "1.0",
                  xmlns: "http://www.w3.org/2000/svg",
                  width: "",
                  height: "",
                  viewBox: "0 0 1181.000000 134.000000",
                  preserveAspectRatio: "xMidYMid meet"
                }
              },
              [
                _c(
                  "g",
                  {
                    attrs: {
                      transform:
                        "translate(0.000000,134.000000) scale(0.100000,-0.100000)",
                      fill: "#000000",
                      stroke: "none"
                    }
                  },
                  [
                    _c("path", {
                      attrs: {
                        d:
                          "M11300 1183 c-7 -32 -18 -84 -25 -115 -8 -34 -9 -58 -4 -58 5 0 12 7\n15 15 5 13 8 13 21 0 36 -37 99 1 109 67 10 61 -30 103 -76 78 -19 -10 -20 -9\n-14 30 10 63 -13 48 -26 -17z m85 -48 c16 -24 0 -82 -27 -99 -46 -29 -73 60\n-32 105 21 23 42 22 59 -6z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M314 1170 c-24 -9 -39 -28 -31 -36 3 -3 17 2 31 11 30 20 66 12 66\n-15 0 -14 -11 -19 -47 -25 -27 -4 -54 -12 -60 -17 -16 -13 -17 -50 -1 -66 15\n-15 60 -16 75 -1 8 8 13 8 17 0 14 -22 24 -10 30 39 4 28 9 56 12 63 12 33\n-50 65 -92 47z m56 -94 c0 -22 -29 -46 -56 -46 -32 0 -43 28 -19 46 25 19 75\n18 75 0z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1670 1093 c-7 -32 -18 -84 -25 -115 -11 -46 -11 -58 -1 -58 7 0 18\n24 25 56 13 57 39 94 66 94 24 0 29 -27 16 -87 -12 -51 -10 -75 5 -60 11 11\n34 122 28 139 -8 26 -41 32 -70 13 l-25 -16 6 45 c11 68 -11 58 -25 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5340 1093 c-7 -32 -18 -84 -25 -115 -11 -46 -11 -58 -1 -58 7 0 18\n24 25 56 13 57 39 94 66 94 24 0 29 -27 16 -87 -12 -51 -10 -75 5 -60 11 11\n34 122 28 139 -8 26 -41 32 -70 13 l-25 -16 6 45 c11 68 -11 58 -25 -11z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M313 819 c-26 -9 -41 -55 -26 -78 6 -9 22 -20 38 -26 23 -8 30 -6 51\n18 l23 27 397 0 396 0 20 -25 c11 -14 28 -25 39 -25 11 0 31 11 45 25 l25 25\n399 0 c345 0 400 -2 400 -15 0 -39 80 -43 100 -5 10 19 22 20 407 20 l396 0\n23 -25 c13 -14 32 -25 43 -25 20 0 51 24 51 41 0 5 160 9 400 9 l399 0 25 -25\nc32 -32 50 -32 82 0 l25 25 399 0 c240 0 400 -4 400 -9 0 -17 31 -41 51 -41\n11 0 30 11 43 25 l23 25 396 0 c385 0 397 -1 407 -20 20 -38 100 -34 100 5 0\n13 55 15 400 15 l399 0 25 -25 c32 -32 59 -32 84 0 l20 25 397 0 397 0 20 -25\nc11 -14 28 -25 39 -25 11 0 31 11 45 25 l25 25 399 0 c345 0 400 -2 400 -15 0\n-39 80 -43 100 -5 10 19 22 20 410 20 388 0 400 -1 410 -20 20 -38 100 -34\n100 5 0 13 55 15 400 15 l399 0 25 -25 c32 -32 59 -32 84 0 l20 25 396 0 397\n0 23 -27 c18 -21 28 -25 50 -19 52 13 59 95 9 108 -28 7 -64 -9 -70 -32 -5\n-20 -14 -20 -408 -20 -394 0 -403 0 -408 20 -6 23 -42 39 -70 32 -10 -3 -24\n-15 -29 -28 l-11 -24 -402 0 c-394 0 -403 0 -408 20 -11 43 -89 42 -102 -2 -6\n-17 -26 -18 -405 -18 -379 0 -399 1 -405 18 -13 43 -82 45 -105 3 -11 -21 -17\n-21 -409 -21 l-398 0 -11 24 c-5 13 -19 25 -29 28 -28 7 -64 -9 -70 -32 -5\n-20 -14 -20 -408 -20 -394 0 -403 0 -408 20 -6 23 -42 39 -70 32 -10 -3 -24\n-15 -29 -28 l-11 -24 -397 0 -398 0 -16 25 c-23 34 -69 34 -92 0 l-16 -25\n-398 0 -397 0 -11 24 c-5 13 -19 25 -29 28 -28 7 -64 -9 -70 -32 -5 -20 -14\n-20 -407 -20 l-401 0 -10 22 c-19 42 -91 41 -102 -2 -5 -20 -14 -20 -408 -20\n-394 0 -403 0 -408 20 -6 23 -42 39 -70 32 -10 -3 -24 -15 -29 -28 l-11 -24\n-397 0 -398 0 -16 25 c-23 34 -69 34 -92 0 l-16 -25 -398 0 -397 0 -11 24 c-5\n13 -19 25 -29 28 -28 7 -64 -9 -70 -32 -5 -20 -14 -20 -407 -20 l-401 0 -10\n22 c-12 26 -43 38 -72 27z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M230 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1140 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2060 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4710 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5760 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9180 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28 -40\n-21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9 -6 40\nl-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33 -46 -1\n-10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10100 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28\n-40 -21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9\n-6 40 l-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33\n-46 -1 -10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M11150 435 c0 -2 7 -20 17 -39 16 -35 16 -35 -17 -72 -21 -24 -28\n-40 -21 -42 7 -2 25 10 40 28 l27 33 13 -31 c8 -18 20 -32 27 -32 11 0 10 9\n-6 40 l-21 41 31 37 c19 23 26 38 19 41 -7 2 -21 -8 -31 -23 -24 -32 -32 -33\n-46 -1 -10 21 -32 35 -32 20z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M380 348 c-24 -39 -26 -100 -5 -118 39 -32 89 22 89 98 0 59 -53 71\n-84 20z m68 -2 c6 -29 -7 -84 -24 -101 -20 -20 -31 -19 -43 4 -11 19 2 85 22\n109 14 18 41 11 45 -12z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M1325 354 c-28 -24 -28 -25 -6 -19 21 6 23 5 18 -16 -14 -58 -19\n-103 -11 -96 11 10 43 157 35 157 -3 -1 -19 -12 -36 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M2225 364 c-23 -23 -9 -31 15 -9 16 14 22 15 35 5 24 -20 18 -33 -30\n-77 -25 -22 -45 -45 -45 -52 0 -6 18 -11 45 -11 25 0 45 5 45 10 0 6 -16 10\n-36 10 l-37 0 47 43 c36 34 45 48 40 63 -14 37 -51 45 -79 18z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4870 370 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5095 354 c-28 -24 -28 -25 -6 -19 21 6 23 5 18 -16 -14 -58 -19\n-103 -11 -96 11 10 43 157 35 157 -3 -1 -19 -12 -36 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5920 370 c0 -5 5 -10 10 -10 6 0 10 5 10 10 0 6 -4 10 -10 10 -5 0\n-10 -4 -10 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9345 364 c-23 -23 -9 -31 15 -9 16 14 22 15 35 5 24 -20 18 -33 -30\n-77 -25 -22 -45 -45 -45 -52 0 -6 18 -11 45 -11 25 0 45 5 45 10 0 6 -16 10\n-36 10 l-37 0 47 43 c36 34 45 48 40 63 -14 37 -51 45 -79 18z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9775 364 c-22 -22 -10 -31 13 -10 22 19 52 12 52 -13 0 -10 -20 -36\n-45 -58 -25 -22 -45 -45 -45 -52 0 -6 18 -11 45 -11 25 0 45 5 45 10 0 6 -16\n10 -36 10 l-37 0 47 43 c50 47 54 58 30 81 -20 21 -48 20 -69 0z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10265 364 c-23 -23 -9 -31 15 -9 16 14 22 15 35 5 24 -20 18 -33\n-30 -77 -25 -22 -45 -45 -45 -52 0 -6 18 -11 45 -11 25 0 45 5 45 10 0 6 -16\n10 -36 10 l-37 0 47 43 c50 47 54 58 30 81 -20 21 -48 20 -69 0z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10715 354 c-28 -24 -28 -26 -7 -21 20 5 23 2 19 -16 -14 -57 -19\n-101 -11 -94 11 10 43 157 35 157 -3 -1 -19 -12 -36 -26z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M11315 364 c-23 -23 -9 -31 15 -9 16 14 22 15 35 5 24 -20 18 -33\n-30 -77 -25 -22 -45 -45 -45 -52 0 -6 18 -11 45 -11 25 0 45 5 45 10 0 6 -16\n10 -36 10 l-37 0 47 43 c50 47 54 58 30 81 -20 21 -48 20 -69 0z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9541 331 c-8 -5 -20 -7 -26 -4 -8 2 -15 -10 -19 -34 -4 -21 -9 -46\n-12 -55 -3 -10 -1 -18 4 -18 6 0 13 18 17 40 7 40 39 75 57 64 6 -4 7 -29 3\n-58 -8 -59 2 -57 16 4 13 55 -6 83 -40 61z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10461 331 c-8 -5 -20 -7 -26 -4 -8 2 -15 -10 -19 -34 -4 -21 -9 -46\n-12 -55 -3 -10 -1 -18 4 -18 6 0 13 18 17 40 7 40 39 75 57 64 6 -4 7 -29 3\n-58 -8 -59 2 -57 16 4 13 55 -6 83 -40 61z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M11511 331 c-8 -5 -20 -7 -26 -4 -8 2 -15 -10 -19 -34 -4 -21 -9 -46\n-12 -55 -3 -10 -1 -18 4 -18 6 0 13 18 17 40 7 40 39 75 57 64 6 -4 7 -29 3\n-58 -8 -59 2 -57 16 4 13 55 -6 83 -40 61z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4857 301 c-3 -16 -9 -40 -13 -55 -3 -15 -2 -26 4 -26 5 0 12 18 16\n39 3 22 9 46 12 55 3 9 2 16 -4 16 -5 0 -12 -13 -15 -29z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M5901 280 c-13 -61 -13 -60 -2 -60 5 0 11 18 15 39 3 22 9 46 12 55\n3 9 2 16 -4 16 -6 0 -15 -23 -21 -50z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M4925 280 c-4 -6 15 -10 49 -10 31 0 56 5 56 10 0 6 -22 10 -49 10\n-28 0 -53 -4 -56 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M9625 280 c-4 -6 15 -10 49 -10 31 0 56 5 56 10 0 6 -22 10 -49 10\n-28 0 -53 -4 -56 -10z"
                      }
                    }),
                    _c("path", {
                      attrs: {
                        d:
                          "M10545 280 c-4 -6 15 -10 49 -10 31 0 56 5 56 10 0 6 -22 10 -49 10\n-28 0 -53 -4 -56 -10z"
                      }
                    })
                  ]
                )
              ]
            )
          ]),
          _vm._v(
            " The sum of Simpson's rules over the entire interval (taking 3-points at a time is) "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} \\sum_{i = 0}^{n-1}\\left[\\int_{x_i}^{x_{i+2}} f(x)dx \\right]&= \\int_{a}^b f(x)dx \\\\ & \\approx \\frac{h}{3}\\sum_{i=0}^{n-1}[f(x_{2i}) + 4f(x_{2i+1}+f(x_{2i+2})]\\\\ & = \\frac{h}{3}[(f_0 + 4f_1 + f_2)+(f_2 + 4f_3 + f_4) + (f_4 + 4f_5 + f_6)\\\\ & + \\cdots + (f_{2n-4} + 4f_{2n-3} + f_{2n-2})+(f_{2n-2} + 4f_{2n-1} + f_{2n}) \\\\ & = \\frac{h}{2}(f_0 + 4f_1 + 2f_2 + 4f_3 + 2f_4 + \\cdots + 2f_{2n-2} + 4f_{2n-1}+f_{2n}) \\end{aligned} ",
                expression:
                  "'\\\\begin{aligned} \\\\sum_{i = 0}^{n-1}\\\\left[\\\\int_{x_i}^{x_{i+2}} f(x)dx \\\\right]\\&= \\\\int_{a}^b f(x)dx \\\\\\\\ \\& \\\\approx \\\\frac{h}{3}\\\\sum_{i=0}^{n-1}[f(x_{2i}) + 4f(x_{2i+1}+f(x_{2i+2})]\\\\\\\\ \\& = \\\\frac{h}{3}[(f_0 + 4f_1 + f_2)+(f_2 + 4f_3 + f_4) + (f_4 + 4f_5 + f_6)\\\\\\\\ \\& + \\\\cdots + (f_{2n-4} + 4f_{2n-3} + f_{2n-2})+(f_{2n-2} + 4f_{2n-1} + f_{2n}) \\\\\\\\ \\& = \\\\frac{h}{2}(f_0 + 4f_1 + 2f_2 + 4f_3 + 2f_4 + \\\\cdots + 2f_{2n-2} + 4f_{2n-1}+f_{2n}) \\\\end{aligned} '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The above formula is the composite Simpson's rule. "),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.3")
              ]),
              _vm._v(" Approximate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^1 e^{x^2} ",
                    expression: "'\\\\int_0^1 e^{x^2} '",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" using the "),
              _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                _c(
                  "li",
                  [
                    _vm._v(" Composite Trapezoid rule with "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "n = 8",
                          expression: "'n = 8'"
                        }
                      ]
                    }),
                    _vm._v("."),
                    _c("br"),
                    _c("br"),
                    _c("deep", [_vm._v("Solution:")]),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "\\begin{aligned} \\int_0^1 e^{x^2}& \\approx \\frac{h}{2}[f_0 + 2f_1 + 2f_2+2f_3+2f_4+ 2f_5+2f_6+2f_7+f_8]\\\\ & = \\frac{0.25}{2}\\left[e^0 + 2\\left(e^{0.25^2}+e^{0.5^2}+e^{0.75^2}+e^{1^2}+e^{1.25^2}+e^{1.5^2}+e^{1.75^2}\\right)+e^{2^2} \\right]\\\\ & = 1.4697123\\end{aligned}",
                          expression:
                            "'\\\\begin{aligned} \\\\int_0^1 e^{x^2}\\& \\\\approx \\\\frac{h}{2}[f_0 + 2f_1 + 2f_2+2f_3+2f_4+ 2f_5+2f_6+2f_7+f_8]\\\\\\\\ \\& = \\\\frac{0.25}{2}\\\\left[e^0 + 2\\\\left(e^{0.25^2}+e^{0.5^2}+e^{0.75^2}+e^{1^2}+e^{1.25^2}+e^{1.5^2}+e^{1.75^2}\\\\right)+e^{2^2} \\\\right]\\\\\\\\ \\& = 1.4697123\\\\end{aligned}'",
                          arg: "display"
                        }
                      ]
                    })
                  ],
                  1
                ),
                _c(
                  "li",
                  [
                    _vm._v(" Composite Simpson's rule with "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "2n = 8",
                          expression: "'2n = 8'"
                        }
                      ]
                    }),
                    _vm._v("."),
                    _c("br"),
                    _c("br"),
                    _c("deep", [_vm._v("Solution:")]),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "\\begin{aligned} \\int_0^1 e^{x^2}& \\approx \\frac{h}{3}[f_0 + 4f_1 + 2f_2+4f_3+2f_4+ 4f_5+2f_6+4f_7+f_8]\\\\ & = \\frac{0.25}{3}\\left[e^0 + 4e^{0.25^2}+2e^{0.5^2}+4e^{0.75^2}+2e^{1^2}+4e^{1.25^2}+2e^{1.5^2}+4e^{1.75^2}+e^{2^2} \\right]\\\\ & = 1.4627234 \\end{aligned}",
                          expression:
                            "'\\\\begin{aligned} \\\\int_0^1 e^{x^2}\\& \\\\approx \\\\frac{h}{3}[f_0 + 4f_1 + 2f_2+4f_3+2f_4+ 4f_5+2f_6+4f_7+f_8]\\\\\\\\ \\& = \\\\frac{0.25}{3}\\\\left[e^0 + 4e^{0.25^2}+2e^{0.5^2}+4e^{0.75^2}+2e^{1^2}+4e^{1.25^2}+2e^{1.5^2}+4e^{1.75^2}+e^{2^2} \\\\right]\\\\\\\\ \\& = 1.4627234 \\\\end{aligned}'",
                          arg: "display"
                        }
                      ]
                    })
                  ],
                  1
                )
              ])
            ]
          ),
          _c("div", { staticClass: "my-4 py-3" }, [
            _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
              _vm._v(" 5.3.1 Error analysis of the Trapezoid rule ")
            ]),
            _c(
              "div",
              { staticClass: "theorem my-3 p-3 " },
              [
                _c("theorem-color", [_vm._v("Theorem 5.1")]),
                _c("deep", [
                  _vm._v("Theorem on accuracy of the trapezoid rule")
                ]),
                _c("br"),
                _vm._v(" If "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f''(x)",
                      expression: "'f\\'\\'(x)'"
                    }
                  ]
                }),
                _vm._v(" exists and is continuous on the interval "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[a,b]",
                      expression: "'[a,b]'"
                    }
                  ]
                }),
                _vm._v(" and if the composite trapezoid rule "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "T",
                      expression: "'T'"
                    }
                  ]
                }),
                _vm._v(" with uniform spacing "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "h",
                      expression: "'h'"
                    }
                  ]
                }),
                _vm._v(" is used to estimate the integral "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " I = \\int_a^b f(x)~dx",
                      expression: "' I = \\\\int_a^b f(x)~dx'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" then for some "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\xi",
                      expression: "'\\\\xi'"
                    }
                  ]
                }),
                _vm._v(" in "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(a,b)",
                      expression: "'(a,b)'"
                    }
                  ]
                }),
                _c(
                  "div",
                  {
                    staticClass: "table-responsive table-stripped",
                    staticStyle: { width: "100%" }
                  },
                  [
                    _c("table", { staticClass: "table" }, [
                      _c("thead", [
                        _c("tr", [
                          _c("th", [
                            _c("div", {
                              directives: [
                                {
                                  name: "katex",
                                  rawName: "v-katex:display",
                                  value:
                                    "E_T = I - T = -\\frac{h^2}{12}(b-a)f''(\\xi)",
                                  expression:
                                    "'E_T = I - T = -\\\\frac{h^2}{12}(b-a)f\\'\\'(\\\\xi)'",
                                  arg: "display"
                                }
                              ]
                            })
                          ]),
                          _c("th", [
                            _c("div", {
                              directives: [
                                {
                                  name: "katex",
                                  rawName: "v-katex:display",
                                  value: "(5.13)",
                                  expression: "'(5.13)'",
                                  arg: "display"
                                }
                              ]
                            })
                          ])
                        ])
                      ])
                    ])
                  ]
                )
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.4")
                ]),
                _vm._v(" Calculate the error bound in evaluating "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle \\int_0^1 e^{-x^2}~dx",
                      expression: "'\\\\displaystyle \\\\int_0^1 e^{-x^2}~dx'"
                    }
                  ]
                }),
                _vm._v(" with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "h = 0.25",
                      expression: "'h = 0.25'"
                    }
                  ]
                }),
                _vm._v(" when using the trapezoid rule."),
                _c("br"),
                _c("deep", [_vm._v("Solution.")]),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned}f(x)&= e^{-x^2}\\\\ f'(x)&= -2xe^{-x^2}\\\\ f''(x)&= -2e^{-x^2} + 4x^2 e^{-x^2} \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned}f(x)\\&= e^{-x^2}\\\\\\\\ f\\'(x)\\&= -2xe^{-x^2}\\\\\\\\ f\\'\\'(x)\\&= -2e^{-x^2} + 4x^2 e^{-x^2} \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" On [0,1], the derivative "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f''(x)",
                      expression: "'f\\'\\'(x)'"
                    }
                  ]
                }),
                _vm._v(
                  " has a magnitude that is no bigger than 2. Thus, the error bound is "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " \\frac{h^2(b-a)}{12}f''(\\xi) \\leq \\frac{(0.25)^2}{12}(1)(2) = 0.0104",
                      expression:
                        "' \\\\frac{h^2(b-a)}{12}f\\'\\'(\\\\xi) \\\\leq \\\\frac{(0.25)^2}{12}(1)(2) = 0.0104'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.5")
                ]),
                _vm._v(" Evaluate the integral "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle \\int_0^2 \\ln(1+x)~dx",
                      expression:
                        "'\\\\displaystyle \\\\int_0^2 \\\\ln(1+x)~dx'"
                    }
                  ]
                }),
                _vm._v(" by the trapezoid rule with an accuracy of at least "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\varepsilon = 0.05",
                      expression: "'\\\\varepsilon = 0.05'"
                    }
                  ]
                }),
                _c("br"),
                _c("deep", [_vm._v("Solution")]),
                _vm._v(": In order to obtain an accuracy "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\varepsilon=0.05",
                      expression: "'\\\\varepsilon=0.05'"
                    }
                  ]
                }),
                _vm._v(", we estimate "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "h",
                      expression: "'h'"
                    }
                  ]
                }),
                _vm._v(" such that "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\frac{h^2(b-a)}{12}f''(\\xi) \\leq \\varepsilon",
                      expression:
                        "'\\\\frac{h^2(b-a)}{12}f\\'\\'(\\\\xi) \\\\leq \\\\varepsilon'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "f(x) = \\ln(1+x),\\;\\;\\;f'(x) = \\frac{1}{1+x},\\;\\;\\;f''(x) = -\\frac{1}{(1+x)^2} ",
                      expression:
                        "'f(x) = \\\\ln(1+x),\\\\;\\\\;\\\\;f\\'(x) = \\\\frac{1}{1+x},\\\\;\\\\;\\\\;f\\'\\'(x) = -\\\\frac{1}{(1+x)^2} '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Thus, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f''(x)",
                      expression: "'f\\'\\'(x)'"
                    }
                  ]
                }),
                _vm._v(" has an absolute maximum of 1 on [0,2] and "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} \\frac{h^2}{12} (2-0)(1) & \\leq  0.05 \\\\ h^2 & \\leq  0.3 \\\\ h &  \\leq   0.548 \\\\ \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\\\frac{h^2}{12} (2-0)(1) \\& \\\\leq  0.05 \\\\\\\\ h^2 \\& \\\\leq  0.3 \\\\\\\\ h \\&  \\\\leq   0.548 \\\\\\\\ \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "n = \\frac{b-a}{h} \\geq \\frac{2}{0.548} = 3.65",
                      expression:
                        "'n = \\\\frac{b-a}{h} \\\\geq \\\\frac{2}{0.548} = 3.65'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Hence, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n = 4",
                      expression: "'n = 4'"
                    }
                  ]
                }),
                _vm._v(" or more points will produce the desired accuracy. "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} \\int_0^2 f(x)~dx &\\approx \\frac{0.5}{2}\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\right]\\\\ &= 0.25 \\left[\\ln(1) + 2\\ln(1.5) + 2\\ln(2) + 2\\ln(2.5) + \\ln(3)\\right] \\\\ &= 1.282105 \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\\\int_0^2 f(x)~dx \\&\\\\approx \\\\frac{0.5}{2}\\\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\\\right]\\\\\\\\ \\&= 0.25 \\\\left[\\\\ln(1) + 2\\\\ln(1.5) + 2\\\\ln(2) + 2\\\\ln(2.5) + \\\\ln(3)\\\\right] \\\\\\\\ \\&= 1.282105 \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            )
          ]),
          _c("div", { staticClass: "my-3 py-3" }, [
            _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
              _vm._v(" 5.3.2 Measuring Precision ")
            ]),
            _c("div", { staticClass: "note note-definition my-2" }, [
              _c("span", { staticClass: "text-success" }, [
                _vm._v(" Definition 5.1 ")
              ]),
              _c("strong", [_vm._v("degree of accuracy")]),
              _vm._v(" or "),
              _c("strong", [_vm._v("precision")]),
              _vm._v(
                " of a quadrature formula is the largest positive integer "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n",
                    expression: "'n'"
                  }
                ]
              }),
              _vm._v(" such that the formula is exact for "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x^k",
                    expression: "'x^k'"
                  }
                ]
              }),
              _vm._v(" for each "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "k = 0,1,2,\\ldots,n",
                    expression: "'k = 0,1,2,\\\\ldots,n'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _vm._v(" The degree of a quadrature formula is "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n",
                  expression: "'n'"
                }
              ]
            }),
            _vm._v(
              " if and only if the error is zero for all polynomials of degree "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "k=0,1,\\ldots,n",
                  expression: "'k=0,1,\\\\ldots,n'"
                }
              ]
            }),
            _vm._v(", but it not zero for some polynomials of degree "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n+1",
                  expression: "'n+1'"
                }
              ]
            }),
            _vm._v(". "),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.6")
                ]),
                _vm._v(" The quadrature formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\displaystyle \\int_{-1}^{1} f(x)~dx \\approx c_0 f(-1) +c_1f(0)+c_2f(1)",
                      expression:
                        "'\\\\displaystyle \\\\int_{-1}^{1} f(x)~dx \\\\approx c_0 f(-1) +c_1f(0)+c_2f(1)'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " is exact for all polynomials of degree less than or equal to 2 "
                ),
                _c("br"),
                _vm._v(" Determine "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0",
                      expression: "'c_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_2",
                      expression: "'c_2'"
                    }
                  ]
                }),
                _vm._v("."),
                _c("br"),
                _c("deep", [_vm._v("Solution:")]),
                _vm._v(" Since the formula is exact for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = 1,\\;\\;x,\\;\\;x^2",
                      expression: "'f(x) = 1,\\\\;\\\\;x,\\\\;\\\\;x^2'"
                    }
                  ]
                }),
                _vm._v(", we have "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} \\int_{-1}^1 1~dx &= c_0 + c_1 + c_2 = 2\\\\ \\int_{-1}^1 x~dx &= -c_0 + c_2 = 0\\\\ \\int_{-1}^1 x^2~dx &= c_0 + c_2 = \\frac{2}{3}\\\\ & c_0 = c_2 = \\frac{1}{3},\\;\\;\\; c_1 = \\frac{4}{3} \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\\\int_{-1}^1 1~dx \\&= c_0 + c_1 + c_2 = 2\\\\\\\\ \\\\int_{-1}^1 x~dx \\&= -c_0 + c_2 = 0\\\\\\\\ \\\\int_{-1}^1 x^2~dx \\&= c_0 + c_2 = \\\\frac{2}{3}\\\\\\\\ \\& c_0 = c_2 = \\\\frac{1}{3},\\\\;\\\\;\\\\; c_1 = \\\\frac{4}{3} \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.7")
                ]),
                _vm._v(" Find the constants "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0",
                      expression: "'c_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1",
                      expression: "'x_1'"
                    }
                  ]
                }),
                _vm._v(" so that the quadrature formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{0}^1 f(x) dx = c_0 f(0) + c_1 f(x_1)",
                      expression:
                        "'\\\\int_{0}^1 f(x) dx = c_0 f(0) + c_1 f(x_1)'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" has the highest possible degree of precision."),
                _c("br"),
                _c("deep", [_vm._v("Solution:")]),
                _vm._v(" Since there are three unknowns "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0",
                      expression: "'c_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1",
                      expression: "'x_1'"
                    }
                  ]
                }),
                _vm._v(", we expect the formula to be exact for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = 1, x",
                      expression: "'f(x) = 1, x'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x^2",
                      expression: "'x^2'"
                    }
                  ]
                }),
                _vm._v(". Thus, "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned}f(x) = 1:,\\;\\; \\int_{0}^1 f(x) dx &= 1 = c_0 + c_1,\\\\ f(x) = x:,\\;\\; \\int_{0}^1 f(x) dx &= \\frac{1}{2} = c_1x_1,\\\\ f(x) = x^2:,\\;\\; \\int_{0}^1 f(x) dx &= \\frac{1}{3} = c_1x_1^2, \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned}f(x) = 1:,\\\\;\\\\; \\\\int_{0}^1 f(x) dx \\&= 1 = c_0 + c_1,\\\\\\\\ f(x) = x:,\\\\;\\\\; \\\\int_{0}^1 f(x) dx \\&= \\\\frac{1}{2} = c_1x_1,\\\\\\\\ f(x) = x^2:,\\\\;\\\\; \\\\int_{0}^1 f(x) dx \\&= \\\\frac{1}{3} = c_1x_1^2, \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Solving, yields "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1 = \\frac{2}{3}",
                      expression: "'x_1 = \\\\frac{2}{3}'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1 = \\frac{3}{4}",
                      expression: "'c_1 = \\\\frac{3}{4}'"
                    }
                  ]
                }),
                _vm._v(". The first equation gives "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0=1 - c_1=\\frac{1}{4}",
                      expression: "'c_0=1 - c_1=\\\\frac{1}{4}'"
                    }
                  ]
                }),
                _vm._v(". The formula is "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_0^1 f(x)dx = \\frac{1}{4}f(0) + \\frac{3}{4}f\\left(\\frac{2}{3}\\right)",
                      expression:
                        "'\\\\int_0^1 f(x)dx = \\\\frac{1}{4}f(0) + \\\\frac{3}{4}f\\\\left(\\\\frac{2}{3}\\\\right)'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            )
          ])
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "my-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.4 Gaussian Quadrature Formulas ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(
            " Most numerical integration formulas are based on the pattern "
          ),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              " \\int_{a}^b f(x)dx \\approx A_0f(x_0) + A_1f(x_1) + A_2f(x_2) + \\cdots + A_nf(x_n).",
                            expression:
                              "' \\\\int_{a}^b f(x)dx \\\\approx A_0f(x_0) + A_1f(x_1) + A_2f(x_2) + \\\\cdots + A_nf(x_n).'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.14)",
                            expression: "'(5.14)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" The formula can be used for any prescribed "),
          _c("deep", [_vm._v("nodes")]),
          _vm._v(" "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1,\\ldots, x_n",
                expression: "'x_1,\\\\ldots, x_n'"
              }
            ]
          }),
          _vm._v(" and the "),
          _c("deep", [_vm._v("weights")]),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "A_0, A_1,\\ldots, A_n",
                expression: "'A_0, A_1,\\\\ldots, A_n'"
              }
            ]
          }),
          _vm._v(
            ". To determine the weights, it may be assumed that an interpolation polynomial "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P(x)",
                expression: "'P(x)'"
              }
            ]
          }),
          _vm._v(" is a good approximation of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\int_{a}^b P(x)dx",
                expression: "'\\\\int_{a}^b P(x)dx'"
              }
            ]
          }),
          _vm._v(" is a good approximation of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\int_{a}^b f(x)dx",
                expression: "'\\\\int_{a}^b f(x)dx'"
              }
            ]
          }),
          _vm._v(". If the polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P(x)",
                expression: "'P(x)'"
              }
            ]
          }),
          _vm._v(" that interpolates "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "P(x)=\\sum_{i=0}^nf(x_i)\\ell_i(x),",
                expression: "'P(x)=\\\\sum_{i=0}^nf(x_i)\\\\ell_i(x),'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\displaystyle \\ell_i(x)",
                expression: "'\\\\displaystyle \\\\ell_i(x)'"
              }
            ]
          }),
          _vm._v(" is the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\displaystyle i^{\\text{th}}",
                expression: "'\\\\displaystyle i^{\\\\text{th}}'"
              }
            ]
          }),
          _vm._v(" Lagrange polynomial, then "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\int_a^b\\;f(x)\\;dx\\simeq \\int_a^b\\;P(x)dx=\\sum_{i=0}^nf(x_i)\\; \\int_a^b\\;\\ell_i(x)\\;dx,",
                expression:
                  "'\\\\int_a^b\\\\;f(x)\\\\;dx\\\\simeq \\\\int_a^b\\\\;P(x)dx=\\\\sum_{i=0}^nf(x_i)\\\\; \\\\int_a^b\\\\;\\\\ell_i(x)\\\\;dx,'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" If we let "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "\\displaystyle A_i=\\int_a^b\\;\\ell_i(x)",
                expression:
                  "'\\\\displaystyle A_i=\\\\int_a^b\\\\;\\\\ell_i(x)'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" then we have a quadrature rule. "),
          _c(
            "div",
            {
              staticClass: "my-3  p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.8")
              ]),
              _vm._v(
                " Construct a quadrature rule on the interval [0,4] using the nodes 0, 1, 2 and use your quadrature rule to approximate "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^4\\;\\frac{4x}{\\sqrt{x^2+1}}\\;dx.",
                    expression:
                      "'\\\\int_0^4\\\\;\\\\frac{4x}{\\\\sqrt{x^2+1}}\\\\;dx.'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The nodes are given: "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_0=0, ~ x_1=1, ~ x_2=2",
                    expression: "'x_0=0, ~ x_1=1, ~ x_2=2'"
                  }
                ]
              }),
              _vm._v(
                " so we need to first find and then integrate the Lagrange polynomials "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle \\ell_i(x)",
                    expression: "'\\\\displaystyle \\\\ell_i(x)'"
                  }
                ]
              }),
              _vm._v("."),
              _c("br"),
              _vm._v(" Nb. "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_0^4\\;f(x)\\;dx\\simeq f(x_0)\\;  \\int_0^4\\;\\ell_0(x)\\;dx+f(x_1)\\; \\int_0^4\\;\\ell_1(x)\\;dx+f(x_2)\\; \\int_0^4\\;\\ell_2(x)\\;dx",
                    expression:
                      "'\\\\displaystyle \\\\int_0^4\\\\;f(x)\\\\;dx\\\\simeq f(x_0)\\\\;  \\\\int_0^4\\\\;\\\\ell_0(x)\\\\;dx+f(x_1)\\\\; \\\\int_0^4\\\\;\\\\ell_1(x)\\\\;dx+f(x_2)\\\\; \\\\int_0^4\\\\;\\\\ell_2(x)\\\\;dx'"
                  }
                ]
              }),
              _vm._v(" where "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} \\ell_0(x)&=\\frac{(x-1)(x-2}{(0-1)(0-2)}=\\frac{1}{2}(x-1)(x-2),\\cr \\ell_1(x)&=\\frac{(x-0)(x-2)}{(1-0)(1-2)}=-x(x-2)\\cr \\ell_2(x)&=\\frac{(x-0)(x-1)}{(2-0)(2-1)}=\\frac{1}{2}x(x-1). \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} \\\\ell_0(x)\\&=\\\\frac{(x-1)(x-2}{(0-1)(0-2)}=\\\\frac{1}{2}(x-1)(x-2),\\\\cr \\\\ell_1(x)\\&=\\\\frac{(x-0)(x-2)}{(1-0)(1-2)}=-x(x-2)\\\\cr \\\\ell_2(x)\\&=\\\\frac{(x-0)(x-1)}{(2-0)(2-1)}=\\\\frac{1}{2}x(x-1). \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The coefficients are then "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} A_0=\\int_0^4\\;\\ell_0(x)\\;dx&=\\int_0^4\\;\\frac{1}{2}(x-1)(x-2)\\;dx=\\frac{8}{3},\\cr A_1=\\int_0^4\\;\\ell_1(x)\\;dx&=\\int_0^4\\;-x(x-2)\\;dx=-\\frac{16}{3}\\cr A_2=\\int_0^4\\;\\ell_2(x)\\;dx&=\\int_0^4\\;\\frac{1}{2}x(x-1)\\;dx=~~~\\frac{20}{3}. \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} A_0=\\\\int_0^4\\\\;\\\\ell_0(x)\\\\;dx&=\\\\int_0^4\\\\;\\\\frac{1}{2}(x-1)(x-2)\\\\;dx=\\\\frac{8}{3},\\\\cr A_1=\\\\int_0^4\\\\;\\\\ell_1(x)\\\\;dx&=\\\\int_0^4\\\\;-x(x-2)\\\\;dx=-\\\\frac{16}{3}\\\\cr A_2=\\\\int_0^4\\\\;\\\\ell_2(x)\\\\;dx\\&=\\\\int_0^4\\\\;\\\\frac{1}{2}x(x-1)\\\\;dx=~~~\\\\frac{20}{3}. \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Thus the quadrature rule is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_0^4\\;f(x)\\;dx\\approx \\frac{8}{3}f(0)-\\frac{16}{3}f(1)+\\frac{20}{3}f(2).",
                    expression:
                      "'\\\\int_0^4\\\\;f(x)\\\\;dx\\\\approx \\\\frac{8}{3}f(0)-\\\\frac{16}{3}f(1)+\\\\frac{20}{3}f(2).'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Now, "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\dosplaystyle f(x)=\\frac{4x}{\\sqrt{x^2+1}}",
                    expression:
                      "'\\\\dosplaystyle f(x)=\\\\frac{4x}{\\\\sqrt{x^2+1}}'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle f(0)=0, ~~ f(1)=2\\sqrt{2}, ~~f(2)=\\frac{8}{\\sqrt{5}}",
                    expression:
                      "'\\\\displaystyle f(0)=0, ~~ f(1)=2\\\\sqrt{2}, ~~f(2)=\\\\frac{8}{\\\\sqrt{5}}'"
                  }
                ]
              }),
              _vm._v(". Thus "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_0^4\\;f(x)\\;dx\\approx \\frac{8}{3}\\times 0-\\frac{16}{3}\\times 2\\sqrt{2}+\\frac{20}{3}\\times \\frac{8}{\\sqrt{5}}=8.766447.",
                    expression:
                      "'\\\\int_0^4\\\\;f(x)\\\\;dx\\\\approx \\\\frac{8}{3}\\\\times 0-\\\\frac{16}{3}\\\\times 2\\\\sqrt{2}+\\\\frac{20}{3}\\\\times \\\\frac{8}{\\\\sqrt{5}}=8.766447.'",
                    arg: "display"
                  }
                ]
              })
            ]
          ),
          _c(
            "h5",
            { staticClass: "h5-responsive font-weight-bold mt-3 py-3" },
            [
              _vm._v(
                " Determining the nodes weights by undetermined coefficients "
              )
            ]
          ),
          _vm._v(
            " The following example illustrates how nodes and weights may be determined by the method of undetermined coefficients. "
          ),
          _c(
            "div",
            {
              staticClass: "my-3  p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.9")
              ]),
              _vm._v(" For the case "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n=2",
                    expression: "'n=2'"
                  }
                ]
              }),
              _vm._v(", the quadrature formula is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_{-1}^1\\,f(x)\\,dx= A_1f(x_1)+A_2f(x_2).",
                    expression:
                      "'\\\\int_{-1}^1\\\\,f(x)\\\\,dx= A_1f(x_1)+A_2f(x_2).'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" In the formula we have 4 unknowns, "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "A_1, A_2",
                    expression: "'A_1, A_2'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_1",
                    expression: "'x_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_2",
                    expression: "'x_2'"
                  }
                ]
              }),
              _vm._v(
                ", so we are possibly looking at a cubic polynomial. To obtain the unknowns we thus evaluate the integral when: "
              ),
              _c("ol", [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=x^3",
                        expression: "'f(x)=x^3'"
                      }
                    ]
                  }),
                  _vm._v(", ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=x^2",
                        expression: "'f(x)=x^2'"
                      }
                    ]
                  }),
                  _vm._v(", ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=x ",
                        expression: "'f(x)=x '"
                      }
                    ]
                  }),
                  _vm._v(" and, ")
                ]),
                _c("li", [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=1",
                        expression: "'f(x)=1'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ])
              ]),
              _vm._v(" Doing so gives "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "A_1=A_2=1",
                    expression: "'A_1=A_2=1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle x_2=-x_1=\\sqrt{\\frac{1}{3}}",
                    expression:
                      "'\\\\displaystyle x_2=-x_1=\\\\sqrt{\\\\frac{1}{3}}'"
                  }
                ]
              }),
              _vm._v(". This yields the formula "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_{-1}^{1}f(x)dx \\approx f\\left(-\\frac{1}{\\sqrt{3}}\\right)+f\\left(\\frac{1}{\\sqrt{3}}\\right)",
                    expression:
                      "'\\\\int_{-1}^{1}f(x)dx \\\\approx f\\\\left(-\\\\frac{1}{\\\\sqrt{3}}\\\\right)+f\\\\left(\\\\frac{1}{\\\\sqrt{3}}\\\\right)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(". ")
            ]
          ),
          _c("div", { staticClass: "my-3 py-3" }, [
            _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
              _vm._v(" 3.4.1 Gaussian Quadrature Theorem")
            ]),
            _vm._v(
              " It was observed by Friedrich Gauss that a special placement of the nodes may yield better accuracy of the integration instead of searching for arbitrary nodes. The result of Gauss is summarised in the theorem below, "
            ),
            _c(
              "div",
              { staticClass: "theorem my-3 p-3 " },
              [
                _c("theorem-color", [_vm._v("Theorem 5.2")]),
                _c("deep", [_vm._v("Gauss Quadrature Theorem")]),
                _c("br"),
                _vm._v(" Let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" be a non-trivial polynomial of degree "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n+1",
                      expression: "'n+1'"
                    }
                  ]
                }),
                _vm._v(" such that "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " \\int_a^b x^k q(x) dx = 0,\\;\\;\\; 0 \\leq k \\leq n",
                      expression:
                        "' \\\\int_a^b x^k q(x) dx = 0,\\\\;\\\\;\\\\; 0 \\\\leq k \\\\leq n'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0, x_1,\\ldots, x_n",
                      expression: "'x_0, x_1,\\\\ldots, x_n'"
                    }
                  ]
                }),
                _vm._v(" be the zeros of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(". Then the formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " \\int_a^b f(x) dx \\approx \\sum_{i = 0}^n A_i f(x_i),;\\;\\;\\text{where }\\;\\;\\; A_i = \\int_a^b \\ell_i(x)dx",
                      expression:
                        "' \\\\int_a^b f(x) dx \\\\approx \\\\sum_{i = 0}^n A_i f(x_i),;\\\\;\\\\;\\\\text{where }\\\\;\\\\;\\\\; A_i = \\\\int_a^b \\\\ell_i(x)dx'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" with these "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_i",
                      expression: "'x_i'"
                    }
                  ]
                }),
                _vm._v(
                  "'s as nodes will be exact for all polynomials of degree at most "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "2n+1",
                      expression: "'2n+1'"
                    }
                  ]
                }),
                _vm._v(". Furthermore, the nodes line in the open interval "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(a,b)",
                      expression: "'(a,b)'"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.10")
                ]),
                _vm._v(
                  " Determine the Gaussian quadrature formula with three Gaussian nodes and three weights for the integral "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{-1}^{1}f(x)",
                      expression: "'\\\\int_{-1}^{1}f(x)'",
                      arg: "display"
                    }
                  ]
                }),
                _c("deep", [_vm._v("Solution.")]),
                _vm._v(
                  " Applying the Gaussian Quadrature Theorem, we must find the polynomial "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" and its roots. The degree of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" is 3, so "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" takes the form "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "q(x) = c_0 + c_1x + c_2x^2 + c_3x^3",
                      expression: "'q(x) = c_0 + c_1x + c_2x^2 + c_3x^3'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" The conditions that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" must satisfy are "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^1 q(x)dx = \\int_{-1}^1 x q(x)dx = \\int_{-1}^1x^2q(x)dx = 0.",
                      expression:
                        "'\\\\int_{-1}^1 q(x)dx = \\\\int_{-1}^1 x q(x)dx = \\\\int_{-1}^1x^2q(x)dx = 0.'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" If we let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0 = c_2 = 0",
                      expression: "'c_0 = c_2 = 0'"
                    }
                  ]
                }),
                _vm._v(", then "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q(x) = c_1x + c_3x^3",
                      expression: "'q(x) = c_1x + c_3x^3'"
                    }
                  ]
                }),
                _vm._v(", and so "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{-1}^1 q(x)dx = \\int_{-1}^1x^2q(x)dx = 0",
                      expression:
                        "'\\\\int_{-1}^1 q(x)dx = \\\\int_{-1}^1x^2q(x)dx = 0'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " because the integral of an odd function over a symmetric interval is 0. To obtain "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_3",
                      expression: "'c_3'"
                    }
                  ]
                }),
                _vm._v(", we impose the condition "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{-1}^{1}x(c_1x + c_3x^3)dx = 0 ",
                      expression: "'\\\\int_{-1}^{1}x(c_1x + c_3x^3)dx = 0 '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" to obtain "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\frac{2}{3}c_1 + \\frac{2}{5}c_3 = 0",
                      expression: "'\\\\frac{2}{3}c_1 + \\\\frac{2}{5}c_3 = 0'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" A convenient solution of this is "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1 = -3",
                      expression: "'c_1 = -3'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_3 = 5",
                      expression: "'c_3 = 5'"
                    }
                  ]
                }),
                _vm._v(". Hence, we obtain "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "q(x) = 5x^3 - 3x ",
                      expression: "'q(x) = 5x^3 - 3x '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" with roots "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "-\\sqrt{3/5}",
                      expression: "'-\\\\sqrt{3/5}'"
                    }
                  ]
                }),
                _vm._v(", 0 and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\sqrt{3 /5}",
                      expression: "'\\\\sqrt{3 /5}'"
                    }
                  ]
                }),
                _vm._v(
                  ". These are the Gaussian nodes for the desired quadrature formula."
                ),
                _c("br"),
                _vm._v(" To obtain the weights "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_0, A_1",
                      expression: "'A_0, A_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_2",
                      expression: "'A_2'"
                    }
                  ]
                }),
                _vm._v(
                  ", we use the method of undetermined coefficients. We want to determine "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_0",
                      expression: "'A_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_1",
                      expression: "'A_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_2",
                      expression: "'A_2'"
                    }
                  ]
                }),
                _vm._v(" in the formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^1 f(x)dx \\approx A_0f\\left(\\sqrt{-\\frac{3}{5}}\\right)+ A_1f(0) + A_2f\\left(\\sqrt{\\frac{3}{5}}\\right) ",
                      expression:
                        "'\\\\int_{-1}^1 f(x)dx \\\\approx A_0f\\\\left(\\\\sqrt{-\\\\frac{3}{5}}\\\\right)+ A_1f(0) + A_2f\\\\left(\\\\sqrt{\\\\frac{3}{5}}\\\\right) '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" This equation must be exact for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = 1, x",
                      expression: "'f(x) = 1, x'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x^2",
                      expression: "'x^2'"
                    }
                  ]
                }),
                _vm._v(". Substituting these "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f",
                      expression: "'f'"
                    }
                  ]
                }),
                _vm._v(" monomials and computing the integrals gives "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} A_0 + A_1 + A_2& = 2\\\\ A_0 - A_2& = 0\\\\ A_0 + A_2 &= \\frac{10}{9} \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} A_0 + A_1 + A_2\\& = 2\\\\\\\\ A_0 - A_2\\& = 0\\\\\\\\ A_0 + A_2 \\&= \\\\frac{10}{9} \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" The weights are "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_0 = A_2 = \\frac{5}{9}",
                      expression: "'A_0 = A_2 = \\\\frac{5}{9}'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_1 = \\frac{8}{9}",
                      expression: "'A_1 = \\\\frac{8}{9}'"
                    }
                  ]
                }),
                _vm._v(". Thus the formula is "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^1 f(x)dx \\approx \\frac{5}{9} f\\left(\\sqrt{-\\frac{3}{5}}\\right)+ \\frac{8}{9}f(0) + \\frac{5}{9}f\\left(\\sqrt{\\frac{3}{5}}\\right) ",
                      expression:
                        "'\\\\int_{-1}^1 f(x)dx \\\\approx \\\\frac{5}{9} f\\\\left(\\\\sqrt{-\\\\frac{3}{5}}\\\\right)+ \\\\frac{8}{9}f(0) + \\\\frac{5}{9}f\\\\left(\\\\sqrt{\\\\frac{3}{5}}\\\\right) '",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.11")
                ]),
                _vm._v(" Use the two-point Gaussian Quadrature rule, "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^{1}f(x)~dx \\approx f\\left(\\frac{-\\sqrt{3}}{3}\\right) + f\\left(\\frac{\\sqrt{3}}{3} \\right),",
                      expression:
                        "'\\\\int_{-1}^{1}f(x)~dx \\\\approx f\\\\left(\\\\frac{-\\\\sqrt{3}}{3}\\\\right) + f\\\\left(\\\\frac{\\\\sqrt{3}}{3} \\\\right),'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" to approximate the integral "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_0^1 x^2 e^{-x}~dx",
                      expression: "'\\\\int_0^1 x^2 e^{-x}~dx'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " and compare your result against the exact value of the integral"
                ),
                _c("br"),
                _c("deep", [_vm._v("Solution:")]),
                _vm._v(" We note that the limits of integration are not "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "-1",
                      expression: "'-1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "1",
                      expression: "'1'"
                    }
                  ]
                }),
                _vm._v(". In this case, we use a linear shift using "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "      x=\\frac{(b-a)t+b+a}{2} ",
                      expression: "'      x=\\\\frac{(b-a)t+b+a}{2} '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" to transform the interval "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[a,b]",
                      expression: "'[a,b]'"
                    }
                  ]
                }),
                _vm._v(" to "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[-1,1]",
                      expression: "'[-1,1]'"
                    }
                  ]
                }),
                _vm._v("."),
                _c("br"),
                _vm._v(" To use the formula, we start by defining "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle x = \\frac{1+t}{2}",
                      expression: "'\\\\displaystyle x = \\\\frac{1+t}{2}'"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} & ~~~~\\int_0^1 x^2 e^{-x}~dx = \\frac{1}{2}\\int_{-1}^{1}\\left(\\frac{1+t}{2}\\right)^2\\exp(-\\frac{1+t}{2})\\\\ &\\approx \\frac{1}{2}\\left\\{\\left(\\frac{1-\\frac{\\sqrt{3}}{2}}{2} \\right)^2\\exp\\left[-\\left(\\frac{1-\\frac{\\sqrt{3}}{2}}{2}\\right)\\right] +   \\left(\\frac{1 + \\frac{\\sqrt{3}}{2}}{2}\\right)^2\\exp\\left[-\\left(\\frac{1+\\frac{\\sqrt{3}}{2}}{2}\\right)\\right] \\right\\}\\\\  &= \\frac{1}{2}\\left\\{(0.8095)(0.04466) + (0.4544)(0.6220) \\right\\} = 0.1594 \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\& ~~~~\\\\int_0^1 x^2 e^{-x}~dx = \\\\frac{1}{2}\\\\int_{-1}^{1}\\\\left(\\\\frac{1+t}{2}\\\\right)^2\\\\exp(-\\\\frac{1+t}{2})\\\\\\\\ \\&\\\\approx \\\\frac{1}{2}\\\\left\\\\{\\\\left(\\\\frac{1-\\\\frac{\\\\sqrt{3}}{2}}{2} \\\\right)^2\\\\exp\\\\left[-\\\\left(\\\\frac{1-\\\\frac{\\\\sqrt{3}}{2}}{2}\\\\right)\\\\right] +   \\\\left(\\\\frac{1 + \\\\frac{\\\\sqrt{3}}{2}}{2}\\\\right)^2\\\\exp\\\\left[-\\\\left(\\\\frac{1+\\\\frac{\\\\sqrt{3}}{2}}{2}\\\\right)\\\\right] \\\\right\\\\}\\\\\\\\  \\&= \\\\frac{1}{2}\\\\left\\\\{(0.8095)(0.04466) + (0.4544)(0.6220) \\\\right\\\\} = 0.1594 \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Exact value of the integral is "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_0^1 x^2 e^{-x}~dx = \\left. -x^2e^{-x} - 2xe^{-x}-2e^{-x}\\right |_0^1 = 0.1606",
                      expression:
                        "'\\\\int_0^1 x^2 e^{-x}~dx = \\\\left. -x^2e^{-x} - 2xe^{-x}-2e^{-x}\\\\right |_0^1 = 0.1606'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Thus, the Error is "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "= 0.0012",
                      expression: "'= 0.0012'"
                    }
                  ]
                })
              ],
              1
            )
          ])
        ],
        1
      ),
      _c(
        "div",
        {
          staticClass: "my-3 p-3",
          staticStyle: { "background-color": "#fff3e0" }
        },
        [
          _c(
            "h5",
            { staticClass: "h4-responsive" },
            [
              _vm._v("Exercise 5.1 "),
              _c("deep", [_vm._v("Numerical Integration:")])
            ],
            1
          ),
          _c("ol", [
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Using the smallest step-size possible, approximate "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_2^6 \\frac{1}{1 + x}~dx",
                    expression: "'\\\\int_2^6 \\\\frac{1}{1 + x}~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Simpson's rule using only the values of "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" at "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x = 2, 3, 4, 5 ",
                    expression: "'x = 2, 3, 4, 5 '"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "6",
                    expression: "'6'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Evaluate the integral "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "{\\displaystyle \\int_0^1 x^2e^{-x}\\,dx}",
                    expression:
                      "'{\\\\displaystyle \\\\int_0^1 x^2e^{-x}\\\\,dx}'"
                  }
                ]
              }),
              _vm._v(
                " analytically correct to two decimal places. Use the trapezoidal rule, then Simpson's rule both with "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h=0.25",
                    expression: "'h=0.25'"
                  }
                ]
              }),
              _vm._v(" to compute the same integral. Compare the results. ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Determine the values of "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n",
                    expression: "'n'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h",
                    expression: "'h'"
                  }
                ]
              }),
              _vm._v(" required to approximate "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^2 \\frac{1}{x+4}~dx",
                    expression: "'\\\\int_0^2 \\\\frac{1}{x+4}~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" to within "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "10^{-5}",
                    expression: "'10^{-5}'"
                  }
                ]
              }),
              _vm._v(" then compute the approximation using "),
              _vm._m(1)
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Consider the integral "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "{\\displaystyle \\int_0^1 \\sin \\left(\\frac{\\pi x^2}{2}\\right)dx}",
                    expression:
                      "'{\\\\displaystyle \\\\int_0^1 \\\\sin \\\\left(\\\\frac{\\\\pi x^2}{2}\\\\right)dx}'"
                  }
                ]
              }),
              _vm._v(
                ". Suppose that we wish to integrate numerically, with an error of magnitude less than "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "10^{-3}",
                    expression: "'10^{-3}'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" What width "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h",
                        expression: "'h'"
                      }
                    ]
                  }),
                  _vm._v(
                    " is needed if we wish to use the composite Trapezoid rule? "
                  )
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" What width "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h",
                        expression: "'h'"
                      }
                    ]
                  }),
                  _vm._v(
                    " is needed if we wish to use the composite Simpson rule? "
                  )
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Evaluate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^2 \\ln(1 + x)~dx",
                    expression: "'\\\\int_0^2 \\\\ln(1 + x)~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" by "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Trapezoidal rule with accuracy "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\epsilon = 0.05",
                        expression: "'\\\\epsilon = 0.05'"
                      }
                    ]
                  })
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Simpson rule using step size "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h = 0.5",
                        expression: "'h = 0.5'"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Suppose an approximation to "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle I=\\int_0^{2h} f(x) \\, dx",
                    expression:
                      "'\\\\displaystyle I=\\\\int_0^{2h} f(x) \\\\, dx'"
                  }
                ]
              }),
              _vm._v(" is sought, and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" in "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[0,2h]",
                    expression: "'[0,2h]'"
                  }
                ]
              }),
              _vm._v(
                " is approximated by the linear function through the TWO points "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(0,f(0))",
                    expression: "'(0,f(0))'"
                  }
                ]
              }),
              _vm._v(", and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(h,f(h))",
                    expression: "'(h,f(h))'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(
                    " Write down the Lagrange representation of the polynomial that interpolates "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f",
                        expression: "'f'"
                      }
                    ]
                  }),
                  _vm._v(" at the two points "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "(0,f(0))",
                        expression: "'(0,f(0))'"
                      }
                    ]
                  }),
                  _vm._v(", and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "(h,f(h))",
                        expression: "'(h,f(h))'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(
                    " By integrating the polynomial in (a) above between "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "0",
                        expression: "'0'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "2h",
                        expression: "'2h'"
                      }
                    ]
                  }),
                  _vm._v(
                    ", prove that the desired quadrature formula is simply "
                  ),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: " I \\approx \\tilde{I} =2hf(h).",
                        expression: "' I \\\\approx \\\\tilde{I} =2hf(h).'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c(
                  "li",
                  { staticStyle: { "margin-bottom": "10px" } },
                  [
                    _vm._v(
                      " Use a three-point Gaussian Quadrature rule to approximate "
                    ),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "\\displaystyle=\\int_0^2 e^{-x^2} \\, dx",
                          expression:
                            "'\\\\displaystyle=\\\\int_0^2 e^{-x^2} \\\\, dx'"
                        }
                      ]
                    }),
                    _vm._v("."),
                    _c("br"),
                    _c("deep", [_vm._v("Note:")]),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            " \\displaystyle \\left \\{ \\begin{array}{ccc} x_0 = -\\sqrt{\\frac{3}{5}}& ~~ & A_0=\\frac{5}{9}\\\\ x_1 = 0& ~~ & A_1=\\frac{8}{9}\\\\ x_2 = \\sqrt{\\frac{3}{5}}& ~~ & A_2=\\frac{5}{9} \\end{array} \\right .",
                          expression:
                            "' \\\\displaystyle \\\\left \\\\{ \\\\begin{array}{ccc} x_0 = -\\\\sqrt{\\\\frac{3}{5}}& ~~ \\& A_0=\\\\frac{5}{9}\\\\\\\\ x_1 = 0\\& ~~ \\& A_1=\\\\frac{8}{9}\\\\\\\\ x_2 = \\\\sqrt{\\\\frac{3}{5}}\\& ~~ \\& A_2=\\\\frac{5}{9} \\\\end{array} \\\\right .'",
                          arg: "display"
                        }
                      ]
                    })
                  ],
                  1
                )
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "p_2(x)",
                    expression: "'p_2(x)'"
                  }
                ]
              }),
              _vm._v(" be the quadratic polynomial interpolating "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" at "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(0,f(0))",
                    expression: "'(0,f(0))'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(h,f(h))",
                    expression: "'(h,f(h))'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(2h,f(2h))",
                    expression: "'(2h,f(2h))'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Write down the Lagrange representation of "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" By integrating "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(" between "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "0",
                        expression: "'0'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "3h",
                        expression: "'3h'"
                      }
                    ]
                  }),
                  _vm._v(
                    ", derive the following numerical integration rule that approximates "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\displaystyle I=\\int_0^{3h} f(x)\\, dx",
                        expression:
                          "'\\\\displaystyle I=\\\\int_0^{3h} f(x)\\\\, dx'"
                      }
                    ]
                  }),
                  _vm._v("; that is, show that "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "I \\approx \\frac{3h}{4} \\left [ f(0) +3f(2h)\\right ].",
                        expression:
                          "'I \\\\approx \\\\frac{3h}{4} \\\\left [ f(0) +3f(2h)\\\\right ].'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "p_2(x)",
                    expression: "'p_2(x)'"
                  }
                ]
              }),
              _vm._v(" be the quadratic polynomial interpolating "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" at "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(0,f(0))",
                    expression: "'(0,f(0))'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(h,f(h))",
                    expression: "'(h,f(h))'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(2h,f(2h))",
                    expression: "'(2h,f(2h))'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Write down the the polynomial "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(" in Newton forward-difference form. ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" By integrating "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(" between "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h",
                        expression: "'h'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "2h",
                        expression: "'2h'"
                      }
                    ]
                  }),
                  _vm._v(
                    ", derive the following numerical integration rule that approximates "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\displaystyle I=\\int_h^{2h} f(x)\\, dx",
                        expression:
                          "'\\\\displaystyle I=\\\\int_h^{2h} f(x)\\\\, dx'"
                      }
                    ]
                  }),
                  _vm._v("; that is, show that "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "  I \\approx \\frac{h}{12} \\left [ -f(0) +8f(h)+5f(2h)\\right ].",
                        expression:
                          "'  I \\\\approx \\\\frac{h}{12} \\\\left [ -f(0) +8f(h)+5f(2h)\\\\right ].'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Use the two-point Gaussian Quadrature rule, "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_{-1}^{1}f(x)~dx \\approx f\\left(\\frac{-\\sqrt{3}}{3}\\right) + f\\left(\\frac{\\sqrt{3}}{3} \\right),",
                    expression:
                      "'\\\\int_{-1}^{1}f(x)~dx \\\\approx f\\\\left(\\\\frac{-\\\\sqrt{3}}{3}\\\\right) + f\\\\left(\\\\frac{\\\\sqrt{3}}{3} \\\\right),'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" to approximate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^1 x^2 e^{-x}~dx",
                    expression: "'\\\\int_0^1 x^2 e^{-x}~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " and compare your result against the exact value of the integral. "
              )
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(
                " Prove that the Gaussian quadrature formula with three Gaussian nodes and three weights for the integral "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle \\int_{-1}^1 f(x)~dx",
                    expression: "'\\\\displaystyle \\\\int_{-1}^1 f(x)~dx'"
                  }
                ]
              }),
              _vm._v(" is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " \\int_{-1}^{1} f(x)~dx \\approx \\frac{5}{9} f\\left( -\\sqrt{\\frac{3}{5}} \\right) + \\frac{8}{9} f(0) + \\frac{5}{9}f\\left( \\sqrt{\\frac{3}{5}}\\right)",
                    expression:
                      "' \\\\int_{-1}^{1} f(x)~dx \\\\approx \\\\frac{5}{9} f\\\\left( -\\\\sqrt{\\\\frac{3}{5}} \\\\right) + \\\\frac{8}{9} f(0) + \\\\frac{5}{9}f\\\\left( \\\\sqrt{\\\\frac{3}{5}}\\\\right)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" use the above formula to approximate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_{-1}^1 x^4~dx",
                    expression: "'\\\\int_{-1}^1 x^4~dx'",
                    arg: "display"
                  }
                ]
              })
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" The quadrature formula "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_{-1}^{1} f(x)~dx \\approx c_0 f(-1) +c_1f(0)+c_2f(1)",
                    expression:
                      "'\\\\displaystyle \\\\int_{-1}^{1} f(x)~dx \\\\approx c_0 f(-1) +c_1f(0)+c_2f(1)'"
                  }
                ]
              }),
              _vm._v(
                " is exact for all polynomials of degree less than or equal to 2. Determine "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_0",
                    expression: "'c_0'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_1",
                    expression: "'c_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_2",
                    expression: "'c_2'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" The quadrature formula "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_{0}^{1} f(x)~dx \\approx c_0 f(0) +c_1f(x_1)",
                    expression:
                      "'\\\\displaystyle \\\\int_{0}^{1} f(x)~dx \\\\approx c_0 f(0) +c_1f(x_1)'"
                  }
                ]
              }),
              _vm._v(" has the highest degree of precision. Determine "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_0",
                    expression: "'c_0'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_1",
                    expression: "'c_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_1",
                    expression: "'x_1'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" The quadrature formula "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_{0}^{1} f(x)~dx \\approx \\frac{1}{2} f(x_0) +c_1f(x_1)",
                    expression:
                      "'\\\\displaystyle \\\\int_{0}^{1} f(x)~dx \\\\approx \\\\frac{1}{2} f(x_0) +c_1f(x_1)'"
                  }
                ]
              }),
              _vm._v(" has the highest degree of precision. Determine "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_0",
                    expression: "'x_0'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_1",
                    expression: "'c_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_1",
                    expression: "'x_1'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Establish a numerical integration formula of the form "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_a^b f(x)~dx \\approx A f(a) + B f'(b)",
                    expression:
                      "'\\\\int_a^b f(x)~dx \\\\approx A f(a) + B f\\'(b)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " that is accurate for polynomials of as high a degree as possible. "
              )
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Construct a quadrature rule of the form "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " \\int_{-1}^{1} f(x)~dx \\approx \\alpha f\\left(-\\frac{1}{2}\\right) + \\beta f(0) + \\gamma f\\left(\\frac{1}{2}\\right)",
                    expression:
                      "' \\\\int_{-1}^{1} f(x)~dx \\\\approx \\\\alpha f\\\\left(-\\\\frac{1}{2}\\\\right) + \\\\beta f(0) + \\\\gamma f\\\\left(\\\\frac{1}{2}\\\\right)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" that is exact for all polynomials of degree "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\leq 2",
                    expression: "'\\\\leq 2'"
                  }
                ]
              }),
              _vm._v("; that is, determine values for "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\alpha",
                    expression: "'\\\\alpha'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\beta",
                    expression: "'\\\\beta'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\gamma",
                    expression: "'\\\\gamma'"
                  }
                ]
              }),
              _vm._v(". ")
            ])
          ])
        ]
      )
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "section",
      {
        staticClass: "py-3 px-3 mx-4 grey-text",
        staticStyle: { "background-color": "#fff3e0" }
      },
      [
        _c("h3", { staticClass: " h3-responsive font-weight-bold" }, [
          _vm._v(" 5.Numerical Integration")
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
        _vm._v(" Composite Trapezoid rule ")
      ]),
      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
        _vm._v(" Composite Simpson rule ")
      ])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}