{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit1.vue?vue&type=template&id=8572c1fa&scoped=true&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit1.vue","mtime":1599870868084},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAidW5pdDEiIH0sCiAgICBbCiAgICAgIF92bS5fbSgwKSwKICAgICAgX2MoInNlY3Rpb24iLCB7IHN0YXRpY0NsYXNzOiAiZGFyay1ncmV5LXRleHQgbWItNCBwdC0zIHB4LTMgbXgtNCIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImg0IiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIHB0LTIgZm9udC13ZWlnaHQtYm9sZCBibHVlLXRleHQiIH0sCiAgICAgICAgICBbX3ZtLl92KCIgMS4xIFNvdXJjZXMgb2YgZXJyb3JzICIpXQogICAgICAgICksCiAgICAgICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogImJsdWUgbWItNCBtdC0wICIgfSksCiAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoIiBFcnJvcnMgbWF5IGJlIGNhdGVnb3JpemVkIGFzIGZvbGxvd3M6ICIpLAogICAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgICAgX3ZtLl9tKDEpLAogICAgICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgICAgICBfdm0uX20oMyksCiAgICAgICAgICAgICAgX3ZtLl9tKDQpLAogICAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWF0aGVtYXRpY2FsIEFwcHJveGltYXRpb25zOiIpXSksCiAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICIgU29tZSBtYXRoZW1hdGljYWwgY2FsY3VsYXRpb25zIHNpbXBseSBjYW5ub3QgYmUgZ2l2ZW4gZXhhY3RseS4gSW5zdGVhZCBhbiBhcHByb3hpbWF0aW9uIG1heSBiZSB1c2VkLiBFeGFtcGxlcyBvZiBtYXRoZW1hdGljYWwgYXBwcm94aW1hdGlvbiBhcmUgVGF5bG9yIHNlcmllcyByZXByZXNlbnRhdGlvbiBlLmcgIgogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfVxcY29zIHggJlxcYXBwcm94IDEgLSBcXGZyYWN7eF4yfXsyIX0gKyBcXGZyYWN7eF40fXs0IX0gXFxsZG90cywgfn5+fn5+fiYoMS4xKVxcXFxcXGZyYWN7MX17MS14fSY9IDEgKyB4ICsgeF4yICsgXFxsZG90cyAmICgxLjIpIFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIidcXFxcYmVnaW57YWxpZ25lZH1cXFxcY29zIHggXFwmXFxcXGFwcHJveCAxIC0gXFxcXGZyYWN7eF4yfXsyIX0gKyBcXFxcZnJhY3t4XjR9ezQhfSBcXFxcbGRvdHMsIH5+fn5+fn5cXCYoMS4xKVxcXFxcXFxcXFxcXGZyYWN7MX17MS14fVxcJj0gMSArIHggKyB4XjIgKyBcXFxcbGRvdHMgXFwmICgxLjIpIFxcXFxlbmR7YWxpZ25lZH0nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgVGhlIGFib3ZlIGFwcHJveGltYXRpb25zIGFyZSBnb29kIHdoZW4gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIngiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIid4JyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgc21hbGwgYnV0IGFyZSB2ZXJ5IGNydWRlIHdoZW4gIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIngiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIid4JyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgbGFyZ2UuICIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtYi00IHB0LTMiIH0sIFsKICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIGZvbnQtd2VpZ2h0LWJvbGQiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIxLjEuMSBEZWZpbml0aW9ucyIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLWRlZmluaXRpb24iIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWNjZXNzIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgRGVmaW5pdGlvbiAxLjEiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFcnJvciIpXSksCiAgICAgICAgICAgIF92bS5fdigiIFN1cHBvc2UgdGhhdCAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAieCIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIneCciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXHRpbGRle3h9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcdGlsZGV7eH0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGFyZSB0d28gbnVtYmVycyBvZiB3aGljaCAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFx0aWxkZXt4fSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXHRpbGRle3h9JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBpcyBhbiBhcHByb3hpbWF0aW9uIHRvICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ4IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIid4JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIi4gVGhlIGVycm9yIG9mICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXHRpbGRle3h9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcdGlsZGV7eH0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGFzIGFuIGFwcHJveGltYXRpb24gdG8gIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIngiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3gnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGlzIGRlZmluZWQgYXMgIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IHRleHQtY2VudGVyIG10LTIiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfXtcXHJtIEVycm9yfSAmPSB7XFxybSBleGFjdH4gdmFsdWUgLSBhcHByb3hpbWF0ZX4gdmFsdWV9fn5+fn5+fn5+fn5+fn5+JiAoMS4zKVxcXFx7XFxybSBFcnJvcn0gJj0geCAtIFxcdGlsZGV7eH0gJiAoMS40KSBcXGVuZHthbGlnbmVkfSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfXtcXFxccm0gRXJyb3J9IFxcJj0ge1xcXFxybSBleGFjdH4gdmFsdWUgLSBhcHByb3hpbWF0ZX4gdmFsdWV9fn5+fn5+fn5+fn5+fn5+XFwmICgxLjMpXFxcXFxcXFx7XFxcXHJtIEVycm9yfSBcXCY9IHggLSBcXFxcdGlsZGV7eH0gXFwmICgxLjQpIFxcXFxlbmR7YWxpZ25lZH0nIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90ZSBub3RlLWRlZmluaXRpb24gbXQtMiIgfSwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXN1Y2Nlc3MiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBEZWZpbml0aW9uIDEuMiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFic29sdXRlIGVycm9yIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgSWYgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcdGlsZGV7eH0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFx0aWxkZXt4fSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgaXMgYW4gYXBwcm94aW1hdGlvbiB0byAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAieCIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIneCciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIsIHdlIHNheSB0aGF0IHRoZSBhYnNvbHV0ZSBlcnJvciBpbiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFx0aWxkZXt4fSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXHRpbGRle3h9JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBpcyAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgdGV4dC1jZW50ZXIgbXQtMiIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXHRleHR7QWJzb2x1dGUgRXJyb3J9ID18eCAtIFxcdGlsZGV7eH18IiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICInXFxcXHRleHR7QWJzb2x1dGUgRXJyb3J9ID18eCAtIFxcXFx0aWxkZXt4fXwnIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMS41KSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygxLjUpJyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS1kZWZpbml0aW9uIG10LTIiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWNjZXNzIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgRGVmaW5pdGlvbiAxLjMiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJSZWxhdGl2ZSBlcnJvciIpXSksCiAgICAgICAgICAgIF92bS5fdigiIElmICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXHRpbGRle3h9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcdGlsZGV7eH0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGlzIGFuIGFwcHJveGltYXRpb24gdG8geCwgd2Ugc2F5IHRoYXQgdGhlIHJlbGF0aXZlIGVycm9yIGluICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFx0aWxkZXt4fSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXHRpbGRle3h9JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBpcyAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgdGV4dC1jZW50ZXIgbXQtMiIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9e1xccm0gUmVsYXRpdmV+IEVycm9yfSAmPSBcXGZyYWN7XFxybSB8ZXhhY3R+IHZhbHVlIC0gYXBwcm94aW1hdGV+IHZhbHVlfH17XFxybSB8ZXhhY3QgfnZhbHVlfH1+fn5+fn5+fn5+JigxLjYpXFxcXHtcXHJtIFJlbGF0aXZlfiBFcnJvcn0gJj0gXFxmcmFje3x4IC0gXFx0aWxkZXt4fXx9e3x4fH0mKDEuNylcXGVuZHthbGlnbmVkfSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfXtcXFxccm0gUmVsYXRpdmV+IEVycm9yfSBcXCY9IFxcXFxmcmFje1xcXFxybSB8ZXhhY3R+IHZhbHVlIC0gYXBwcm94aW1hdGV+IHZhbHVlfH17XFxcXHJtIHxleGFjdCB+dmFsdWV8fX5+fn5+fn5+fn5cXCYoMS42KVxcXFxcXFxce1xcXFxybSBSZWxhdGl2ZX4gRXJyb3J9IFxcJj0gXFxcXGZyYWN7fHggLSBcXFxcdGlsZGV7eH18fXt8eHx9XFwmKDEuNylcXFxcZW5ke2FsaWduZWR9JyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm5vdGUgbm90ZS1kZWZpbml0aW9uIG10LTIiIH0sIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWNjZXNzIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgRGVmaW5pdGlvbiAxLjQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQZXJjZW50YWdlIGVycm9yIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgSWYgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcdGlsZGV7eH0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFx0aWxkZXt4fSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgaXMgYW4gYXBwcm94aW1hdGlvbiB0byAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAieCIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIneCciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIsIHdlIHNheSB0aGF0IHRoZSBwZXJjZW50YWdlIGVycm9yIGluICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXHRpbGRle3h9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcdGlsZGV7eH0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGlzICIpLAogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyB0ZXh0LWNlbnRlciBtdC0yIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgIlxcdGV4dHtQZXJjZW50YWdlIEVycm9yfT0gMTAwXFxmcmFje3x4LVxcdGlsZGV7eH18fXt8eHx9IiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICInXFxcXHRleHR7UGVyY2VudGFnZSBFcnJvcn09IDEwMFxcXFxmcmFje3x4LVxcXFx0aWxkZXt4fXx9e3x4fH0nIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMS44KSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygxLjgpJyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIiBteS0zIHAtMyIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2UyZTNlNSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgRXhhbXBsZSAxLjEgIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIkNvbnNpZGVyIHRoZSBmb2xsb3dpbmcgYXBwcm94aW1hdGlvbnMgIiksCiAgICAgICAgICAgICAgX2MoIm9sIiwgeyBzdGF0aWNTdHlsZTogeyAibGlzdC1zdHlsZSI6ICJsb3dlci1yb21hbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAifn54ID0gMjM0Ny41OX5+fn5+fn5+e1xccm0gYnl9fn5+fn5+flxcdGlsZGV7eH0gPSAyMzQ3LjYiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICInfn54ID0gMjM0Ny41OX5+fn5+fn5+e1xcXFxybSBieX1+fn5+fn5+XFxcXHRpbGRle3h9ID0gMjM0Ny42JyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICJ+fnggPSAwLjAyfn5+fn5+fn57XFxybSBieX1+fn5+fn5+XFx0aWxkZXt4fSA9IDAuMDEiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICInfn54ID0gMC4wMn5+fn5+fn5+e1xcXFxybSBieX1+fn5+fn5+XFxcXHRpbGRle3h9ID0gMC4wMSciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIEZpbmQgdGhlIGFic29sdXRlLCByZWxhdGl2ZSBhbmQgcGVyY2VudGFnZSBlcnJvciBpbiBlYWNoIGNhc2UiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICBfdm0uX3YoIiBBbnN3ZXI6ICIpLAogICAgICAgICAgICAgIF9jKCJvbCIsIHsgc3RhdGljU3R5bGU6IHsgImxpc3Qtc3R5bGUiOiAibG93ZXItcm9tYW4iIH0gfSwgWwogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfXtcXHJtIEFic29sdXRlfiBlcnJvcn0gJj0gfDIzNDcuNTkgLSAyMzQ3LjZ8ID0gMC4wMSB+fn5+fn5+fn5+JigxLjkpXFxcXCB7XFxybSBSZWxhdGl2ZX4gZXJyb3J9ICY9IFxcZnJhY3t8MjM0Ny41OSAtIDIzNDcuNnx9ezIzNDcuNTl9ID0gXFxmcmFjezAuMDF9ezIzNDcuNTl9ID0gMC4wMDAwMDQyNTkgJigxLjEwKVxcXFwge1xccm0gUGVyY2VudGFnZSB+ZXJyb3J9ICY9IDEwMFxcZnJhY3t8MjM0Ny41OSAtIDIzNDcuNnx9ezIzNDcuNTl9ID0gMTAwXFxmcmFjezAuMDF9ezIzNDcuNTl9ID0gMC4wMDA0MjU5ICYoMS4xMSkgXFxlbmR7YWxpZ25lZH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIidcXFxcYmVnaW57YWxpZ25lZH17XFxcXHJtIEFic29sdXRlfiBlcnJvcn0gXFwmPSB8MjM0Ny41OSAtIDIzNDcuNnwgPSAwLjAxIH5+fn5+fn5+fn5cXCYoMS45KVxcXFxcXFxcIHtcXFxccm0gUmVsYXRpdmV+IGVycm9yfSBcXCY9IFxcXFxmcmFje3wyMzQ3LjU5IC0gMjM0Ny42fH17MjM0Ny41OX0gPSBcXFxcZnJhY3swLjAxfXsyMzQ3LjU5fSA9IDAuMDAwMDA0MjU5IFxcJigxLjEwKVxcXFxcXFxcIHtcXFxccm0gUGVyY2VudGFnZSB+ZXJyb3J9IFxcJj0gMTAwXFxcXGZyYWN7fDIzNDcuNTkgLSAyMzQ3LjZ8fXsyMzQ3LjU5fSA9IDEwMFxcXFxmcmFjezAuMDF9ezIzNDcuNTl9ID0gMC4wMDA0MjU5IFxcJigxLjExKSBcXFxcZW5ke2FsaWduZWR9JyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9e1xccm0gQWJzb2x1dGV+IGVycm9yfSAmPSB8MC4wMiAtIDAuMDF8ID0gMC4wMSB+fn5+fn5+fn5+fn5+JigxLjEyKVxcXFx7XFxybSBSZWxhdGl2ZX4gZXJyb3J9ICY9IFxcZnJhY3t8MC4wMiAtIDAuMDF8fXswLjAyfSA9IFxcZnJhY3swLjAxfXswLjAyfSA9IDAuNSYoMS4xMykgXFxcXHtcXHJtIFBlcmNlbnRhZ2UgfmVycm9yfSAmPSAxMDBcXGZyYWN7fDAuMDIgLSAwLjAxfH17MC4wMn0gPSAxMDBcXGZyYWN7MC4wMX17MC4wMn0gPSA1MCYoMS4xNCkgXFxlbmR7YWxpZ25lZH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIidcXFxcYmVnaW57YWxpZ25lZH17XFxcXHJtIEFic29sdXRlfiBlcnJvcn0gXFwmPSB8MC4wMiAtIDAuMDF8ID0gMC4wMSB+fn5+fn5+fn5+fn5+XFwmKDEuMTIpXFxcXFxcXFx7XFxcXHJtIFJlbGF0aXZlfiBlcnJvcn0gXFwmPSBcXFxcZnJhY3t8MC4wMiAtIDAuMDF8fXswLjAyfSA9IFxcXFxmcmFjezAuMDF9ezAuMDJ9ID0gMC41XFwmKDEuMTMpIFxcXFxcXFxce1xcXFxybSBQZXJjZW50YWdlIH5lcnJvcn0gXFwmPSAxMDBcXFxcZnJhY3t8MC4wMiAtIDAuMDF8fXswLjAyfSA9IDEwMFxcXFxmcmFjezAuMDF9ezAuMDJ9ID0gNTBcXCYoMS4xNCkgXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAic2VjdGlvbiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJkYXJrLWdyZXktdGV4dCBtYi00IHB0LTMgcHgtMyBteC00IiwKICAgICAgICAgIGF0dHJzOiB7IGlkOiAiYy0xLTIiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiaDQiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSBwdC0yIGZvbnQtd2VpZ2h0LWJvbGQgYmx1ZS10ZXh0IiB9LAogICAgICAgICAgICBbX3ZtLl92KCIgMS4yIEVycm9yIEFuYWx5c2lzICIpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJociIsIHsgc3RhdGljQ2xhc3M6ICJibHVlIG1iLTQgbXQtMCAiIH0pLAogICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IiwgYXR0cnM6IHsgaWQ6ICJjLTEtMi0yIiB9IH0sIFsKICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImg0LXJlc3BvbnNpdmUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjEuMi4yIENob3BwaW5nIGFuZCBSb3VuZGluZyBPZmYiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgQ29uc2lkZXIgYW55IHJlYWwgbnVtYmVyICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJSIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidSJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiB0aGF0IGlzIGV4cHJlc3NlZCBpbiBhICIpLAogICAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJub3JtYWxpemVkIGRlY2ltYWwgZm9ybSIpXSksCiAgICAgICAgICAgIF92bS5fdigiOiAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAiUiA9ICBcXHBtIDAuZF8xZF8yZF8zXFxjZG90cyBkX2tkX3trKzF9XFxjZG90cyBcXHRpbWVzIDEwXntufSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ1IgPSAgXFxcXHBtIDAuZF8xZF8yZF8zXFxcXGNkb3RzIGRfa2Rfe2srMX1cXFxcY2RvdHMgXFxcXHRpbWVzIDEwXntufSciLAogICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigxLjE1KSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygxLjE1KSciLAogICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIHdoZXJlICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJkXzEgXFxuZXEgMCIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZF8xIFxcXFxuZXEgMCciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIwIFxcbGVxIGRfaiBcXGxlcSA5IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicwIFxcXFxsZXEgZF9qIFxcXFxsZXEgOSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgZm9yICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJqICAgPiAxIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidqICAgPiAxJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIi4gU3VwcG9zZSB0aGF0ICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJrIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidrJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBpcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgZGVjaW1hbCBkaWdpdHMgY2FycmllZCBpbiB0aGUgZmxvYXRpbmctcG9pbnQgY29tcHV0YXRpb25zIG9mIGEgY29tcHV0ZXIsIHRoZW4gdGhlIHJlYWwgbnVtYmVyICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUiIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInUiciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgaXMgcmVwcmVzZW50ZWQgYnkgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogImZsX3tcXHJtIGNob3B9KFIpIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidmbF97XFxcXHJtIGNob3B9KFIpJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiwgd2hpY2ggaXMgZ2l2ZW4gYnkgIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgImZsX3tcXHJtIGNob3B9KFIpID0gXFxwbSAwLmRfMWRfMmRfM1xcY2RvdHMgZF9rICBcXHRpbWVzIDEwXntufSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidmbF97XFxcXHJtIGNob3B9KFIpID0gXFxcXHBtIDAuZF8xZF8yZF8zXFxcXGNkb3RzIGRfayAgXFxcXHRpbWVzIDEwXntufSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIHdoZXJlICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIgZF8xIFxcbmVxIDAiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJyBkXzEgXFxcXG5lcSAwJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4MCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4MCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiIFxcbGVxIGRfaiBcXGxlcSA5IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicgXFxcXGxlcSBkX2ogXFxcXGxlcSA5JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBmb3IgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIjEgPCBqIGxlcSBrIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxIDwgaiBcXGxlcSBrJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIi4gVGhlIG51bWJlciAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiIGZsX3tccm0gY2hvcH0oUikiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJyBmbF97XFxybSBjaG9wfShSKSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgaXMgY2FsbGVkIHRoZSAiKSwKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImNob3BwZWQgZmxvYXRpbmctcG9pbnQgcmVwcmVzZW50YXRpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBvZiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUiIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInUiciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgLiBJbiB0aGlzIGNhc2UsIHRoZSAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiayIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInayciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCJ0aCBkaWdpdCBvZiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiZmxfe1xccm0gY2hvcH0oUikgIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidmbF97XFxcXHJtIGNob3B9KFIpICciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgYWdyZWVzIHdpdGggdGhlICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJrIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidrJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoInRoIGRpZ2l0IG9mICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJSIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidSJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIi4iKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF92bS5fdigiIEFuIGFsdGVybmF0aXZlICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJrLSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInay0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiZGlnaXQgcmVwcmVzZW50YXRpb24gaXMgdGhlICIpLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigicm91bmRlZCBmbG9hdGluZy1wb2ludCByZXByZXNlbnRhdGlvbiIpXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmbF97XFxybSByb3VuZH0oUikgIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidmbF97XFxcXHJtIHJvdW5kfShSKSAnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiLCB3aGljaCBpcyBnaXZlbiBieSAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiZmxfe1xccm0gcm91bmR9KFIpID0gXFxwbSAwLmRfMWRfMmRfM1xcY2RvdHMgcl9rICBcXHRpbWVzIDEwXntufSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidmbF97XFxcXHJtIHJvdW5kfShSKSA9IFxcXFxwbSAwLmRfMWRfMmRfM1xcXFxjZG90cyByX2sgIFxcXFx0aW1lcyAxMF57bn0nIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiB3aGVyZSAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiZF8xIFxcbmVxIDAiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2RfMSBcXFxcbmVxIDAnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMCBcXGxlcSBkX2ogXFxsZXEgOSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMCBcXFxcbGVxIGRfaiBcXFxcbGVxIDknIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGZvciAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMSA8IGogPCBrIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxIDwgaiA8IGsnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZCB0aGUgbGFzdCBkaWdpdCAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAicl9rIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidyX2snIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGlzIG9idGFpbmVkIGJ5IHJvdW5kaW5nIHRoZSBudW1iZXIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogImRfayBkX3trKzF9ZF97aysyfVxcY2RvdHMiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2RfayBkX3trKzF9ZF97aysyfVxcXFxjZG90cyciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgdG8gdGhlIG5lYXJlc3QgaW50ZWdlci4gRm9yIGV4YW1wbGUsIHRoZSByZWFsIG51bWJlciAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIiBSID0gXFxmcmFjezIyfXs3fSA9ICAgIDMuMTQyODU3MTQyODU3MTQzICIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInIFIgPSBcXFxcZnJhY3syMn17N30gPSAgICAzLjE0Mjg1NzE0Mjg1NzE0MyAnIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBoYXMgdGhlIGZvbGxvd2luZyBzaXggZGlnaXQgcmVwcmVzZW50YXRpb25zOiAiKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfSBmbF97XFxybSBjaG9wfShSKSY9IDAuMzE0Mjg1IFxcdGltZXMgMTBeezF9XFxcXGZsX3tcXHJtIHJvdW5kfShSKSY9IDAuMzE0Mjg2IFxcdGltZXMgMTBeezF9XFxlbmR7YWxpZ25lZH0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInXFxcXGJlZ2lue2FsaWduZWR9IGZsX3tcXFxccm0gY2hvcH0oUilcXCY9IDAuMzE0Mjg1IFxcXFx0aW1lcyAxMF57MX1cXFxcXFxcXGZsX3tcXFxccm0gcm91bmR9KFIpXFwmPSAwLjMxNDI4NiBcXFxcdGltZXMgMTBeezF9XFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEZvciBjb21tb24gcHVycG9zZXMgdGhlIGNob3BwaW5nIGFuZCByb3VuZGluZyB3b3VsZCBiZSB3cml0dGVuIGFzIDMuMTQyODUgYW5kIDMuMTQyODYgcmVzcGVjdGl2ZWx5LiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtdC00IiwgYXR0cnM6IHsgaWQ6ICJjLTEtMi0zIiB9IH0sIFsKICAgICAgICAgICAgX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImg0LXJlc3BvbnNpdmUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjEuMi4zIExvc3Mgb2YgU2lnbmlmaWNhbmNlIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgT25lIG9mIHRoZSBtb3N0IGNvbW1vbiBkZXRlcmlvcmF0aW9uIGluIHByZWNpc2lvbiBpcyB0aGUgc3VidHJhY3Rpb24gb2Ygb25lIHF1YW50aXR5IGZyb20gYW5vdGhlciBuZWFybHkgZXF1YWwgcXVhbnRpdHkuIFRoZSBjbG9zZXIgdGhlc2UgdHdvIG51bWJlcnMgYXJlIHRvIGVhY2ggb3RoZXIgdGhlIG1vcmUgcHJvbm91bmNlZCBpcyB0aGUgZWZmZWN0LiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgQ29uc2lkZXIgdGhlIHR3byBudW1iZXJzICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJwID0gMy4xNDE1OTI2NTM2IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidwID0gMy4xNDE1OTI2NTM2JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogInEgPSAzLjE0MTU5NTczNDEiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3EgPSAzLjE0MTU5NTczNDEnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiLCB3aGljaCBhcmUgbmVhcmx5IGVxdWFsIGFuZCBib3RoIGNhcnJ5IDExIGRlY2ltYWwgZGlnaXRzIG9mIHByZWNpc2lvbi4gU3VwcG9zZSB0aGF0IHRoZWlyIGRpZmZlcmVuY2UgaXMgZm9ybWVkICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogInAgLSBxID0gLTAuMDAwMDAzMDgwNSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIncCAtIHEgPSAtMC4wMDAwMDMwODA1JyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgU2luY2UgdGhlIGZpcnN0IHNpeCBkaWdpdHMgb2YgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogInAiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3AnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAicSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIncSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgYXJlIHRoZSBzYW1lLCB0aGVpciBkaWZmZXJlbmNlICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJwIC0gcSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIncCAtIHEnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGNvbnRhaW5zIG9ubHkgZml2ZSBkZWNpbWFsIGRpZ2l0cyBvZiBwcmVjaXNpb24uIFRoaXMgcGhlbm9tZW5vbiBpcyBjYWxsZWQgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigibG9zcyBvZiBzaWduaWZpY2FuY2UgIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgb3IgIiksCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJzdWJ0cmFjdGl2ZSBjYW5jZWxsYXRpb24iKV0pLAogICAgICAgICAgICBfdm0uX3YoIi4gIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXktNCBwLTMiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2UyZTNlNSIgfQogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkV4YW1wbGUgMS4yIildKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIENvbXBhcmUgdGhlIHJlc3VsdHMgb2YgY2FsY3VsYXRpbmcgIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogImYoNTAwKSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2YoNTAwKSciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiZyg1MDApIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZyg1MDApJyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgdXNpbmcgc2l4IGRpZ2l0cyBhbmQgcm91bmRpbmcuIFRoZSBmdW5jdGlvbnMgYXJlICIpLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAiZih4KSA9IHhcXGxlZnQoXFxzcXJ0e3grMX0gLSBcXHNxcnR7eH1cXHJpZ2h0KVxcO1xcO1xcO1xcO1xcdGV4dHthbmR9XFw7XFw7XFw7XFw7Zyh4KSA9IFxcZGlzcGxheXN0eWxle1xcZnJhY3t4fXtcXHNxcnR7eCsxfStcXHNxcnR7eH19fSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ2YoeCkgPSB4XFxcXGxlZnQoXFxcXHNxcnR7eCsxfSAtIFxcXFxzcXJ0e3h9XFxcXHJpZ2h0KVxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXHRleHR7YW5kfVxcXFw7XFxcXDtcXFxcO1xcXFw7Zyh4KSA9IFxcXFxkaXNwbGF5c3R5bGV7XFxcXGZyYWN7eH17XFxcXHNxcnR7eCsxfStcXFxcc3FydHt4fX19JyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fdigiIEFuc3dlcjogRm9yIHRoZSBmaXJzdCBmdW5jdGlvbiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiZih4KSwiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2YoeCksJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9IGYoNTAwKSY9NTAwIChcXHNxcnR7NTAxfSAtIFxcc3FydHs1MDB9KVxcXFwgICAgICAmPTUwMCAoMjIuMzgzMCAtIDIyLjM2MDcpID0gNTAwKDAuMDIyMykgPSAxMS4xNTAwIFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfSBmKDUwMClcXCY9NTAwIChcXFxcc3FydHs1MDF9IC0gXFxcXHNxcnR7NTAwfSlcXFxcXFxcXCAgICAgIFxcJj01MDAgKDIyLjM4MzAgLSAyMi4zNjA3KSA9IDUwMCgwLjAyMjMpID0gMTEuMTUwMCBcXFxcZW5ke2FsaWduZWR9JyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgZm9yICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJnKHgpLCIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZyh4KSwnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgIlxcYmVnaW57YWxpZ25lZH0gZyg1MDApJj0gXFxmcmFjezUwMH17XFxzcXJ0ezUwMX0gKyBcXHNxcnR7NTAwfX1cXFxcICAgICAgJj0gXFxmcmFjezUwMH17MjIuMzgzMCArIDIyLjM2MDd9ID0gXFxmcmFjezUwMH17NDQuNzQzN30gPSAxMS4xNzQ4IFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfSBnKDUwMClcXCY9IFxcXFxmcmFjezUwMH17XFxcXHNxcnR7NTAxfSArIFxcXFxzcXJ0ezUwMH19XFxcXFxcXFwgICAgICBcXCY9IFxcXFxmcmFjezUwMH17MjIuMzgzMCArIDIyLjM2MDd9ID0gXFxcXGZyYWN7NTAwfXs0NC43NDM3fSA9IDExLjE3NDggXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibXQtNCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiIE5vdGUgdGhhdCB0aGUgc2Vjb25kIGZ1bmN0aW9uICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJnKHgpLCIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidnKHgpLCciCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiBpcyBhbGdlYnJhaWNhbGx5IGVxdWl2YWxlbnQgdG8gIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogImYoeCksIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2YoeCksJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFzIHNob3duIGJ5IHRoZSBjb21wdXRhdGlvbiAiKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9IGYoeCkmPSBcXGZyYWN7eChcXHNxcnR7eCsxfS1cXHNxcnR7eH0pKFxcc3FydHt4KzF9K1xcc3FydHt4fSl9eyhcXHNxcnR7eCsxfStcXHNxcnR7eH0pfVxcXFwgICAgJj0gXFxmcmFje3h9eyhcXHNxcnR7eCsxfS1cXHNxcnR7eH0pfSA9IGcoeCkgXFxlbmR7YWxpZ25lZH0iLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfSBmKHgpXFwmPSBcXFxcZnJhY3t4KFxcXFxzcXJ0e3grMX0tXFxcXHNxcnR7eH0pKFxcXFxzcXJ0e3grMX0rXFxcXHNxcnR7eH0pfXsoXFxcXHNxcnR7eCsxfStcXFxcc3FydHt4fSl9XFxcXFxcXFwgICAgXFwmPSBcXFxcZnJhY3t4fXsoXFxcXHNxcnR7eCsxfS1cXFxcc3FydHt4fSl9ID0gZyh4KSBcXFxcZW5ke2FsaWduZWR9JyIsCiAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIFRoZSBhbnN3ZXIsICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJnKDUwMCkgPSAxMS4xNzQ4IiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2coNTAwKSA9IDExLjE3NDgnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiwgaW52b2x2ZXMgbGVzcyBlcnJvciBhbmQgaXMgdGhlIHNhbWUgYXMgdGhhdCBvYnRhaW5lZCBieSByb3VuZGluZyB0aGUgdHJ1ZSBhbnN3ZXIgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjExLjE3NDc1NTMwMDc0NzE5OC4uLiIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxMS4xNzQ3NTUzMDA3NDcxOTguLi4nIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gc2l4IGRpZ2l0cy4gIiksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJteS00IHAtMyIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNlMmUzZTUiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIgRXhhbXBsZSAxLjMiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBDb21wYXJlIHRoZSByZXN1bHRzIG9mIGNhbGN1bGF0aW5nICIpLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmKDAuMDEpIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidmKDAuMDEpJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlAoMC4wMSkgIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidQKDAuMDEpICciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgdXNpbmcgc2l4IGRpZ2l0cyBhbmQgcm91bmRpbmcsIHdoZXJlICIpLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICIgZih4KSA9IFxcZnJhY3tlXnt4fSAtIDEgLSB4fXt4XjJ9XFw7XFw7XFw7XFw7XFx0ZXh0e2FuZH1cXDtcXDtcXDtcXDsgUCh4KSA9IFxcZnJhY3sxfXsyfSArIFxcZnJhY3t4fXs2fSArIFxcZnJhY3t4XjJ9ezI0fS4iLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICInIGYoeCkgPSBcXFxcZnJhY3tlXnt4fSAtIDEgLSB4fXt4XjJ9XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcdGV4dHthbmR9XFxcXDtcXFxcO1xcXFw7XFxcXDsgUCh4KSA9IFxcXFxmcmFjezF9ezJ9ICsgXFxcXGZyYWN7eH17Nn0gKyBcXFxcZnJhY3t4XjJ9ezI0fS4nIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBBbnN3ZXI6VGhlIGZ1bmN0aW9uICIpLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJQKHgpIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidQKHgpJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBpcyB0aGUgVGF5bG9yIHBvbHlub21pYWwgb2YgZGVncmVlICIpLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJuID0gMiIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInbiA9IDInIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGZvciAiKSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiZih4KSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZih4KSciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZXhwYW5kZWQgYWJvdXQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIng9MCIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIneD0wJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIi4gRm9yIHRoZSBmaXJzdCBmdW5jdGlvbiAiKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAiZigwLjAxKSA9IFxcZnJhY3tlXnswLjAxfSAtIDEgLSAwLjAxfXsoMC4wMSleMn0gPVxcZnJhY3sxLjAxMDA1MCAtIDEgLSAwLjAxfXswLjAwMX0gPSAwLjUuIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAiJ2YoMC4wMSkgPSBcXFxcZnJhY3tlXnswLjAxfSAtIDEgLSAwLjAxfXsoMC4wMSleMn0gPVxcXFxmcmFjezEuMDEwMDUwIC0gMSAtIDAuMDF9ezAuMDAxfSA9IDAuNS4nIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBGb3IgdGhlIHNlY29uZCBmdW5jdGlvbiAiKSwKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfSBQKDAuMDEpICY9IFxcZnJhY3sxfXsyfSArIFxcZnJhY3swLjAxfXs2fSArIFxcZnJhY3swLjAwMDF9ezI0fVxcXFwgICAgICAgICAmPSAwLjUgICsgMC4wMDE2NjcgKyAwLjAwMDAwNCA9IDAuNTAxNjcxIFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfSBQKDAuMDEpIFxcJj0gXFxcXGZyYWN7MX17Mn0gKyBcXFxcZnJhY3swLjAxfXs2fSArIFxcXFxmcmFjezAuMDAwMX17MjR9XFxcXFxcXFwgICAgICAgICBcXCY9IDAuNSAgKyAwLjAwMTY2NyArIDAuMDAwMDA0ID0gMC41MDE2NzEgXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIFRoZSBhbnN3ZXIgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlAoMC4wMSkgPSAwLjUwMTY3MSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInUCgwLjAxKSA9IDAuNTAxNjcxJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiBjb250YWlucyBsZXNzIGVycm9yIGFuZCBpcyB0aGUgc2FtZSBhcyB0aGF0IG9idGFpbmVkIGJ5IHJvdW5kaW5nIHRoZSB0cnVlIGFuc3dlciAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjAuNTAxNjcwODQxNjgwNTc1NDIiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzAuNTAxNjcwODQxNjgwNTc1NDInIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIC4uLiB0byBzaXggZGlnaXRzLiAiKQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJteS00IHAtMyIsCiAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNlMmUzZTUiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFeGFtcGxlIDEuNCIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIExldCAiKSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUCh4KSA9IHheMyAtIDN4XjIgKyAzeCAtIDEiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1AoeCkgPSB4XjMgLSAzeF4yICsgM3ggLSAxJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlEoeCkgPSAoKHgtMyl4ICsgMyl4IC0gMSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInUSh4KSA9ICgoeC0zKXggKyAzKXggLSAxJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIi4gVXNlIHRocmVlLWRpZ2l0IHJvdW5kaW5nIGFyaXRobWV0aWMgdG8gY29tcHV0ZSBhcHByb3hpbWF0aW9ucyB0byAiCiAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlAoMi4xOSkiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1AoMi4xOSknIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiJFEoMi4xOSkkIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIickUSgyLjE5KSQnIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiLiBDb21wYXJlIHRoZW0gd2l0aCB0aGUgdHJ1ZSB2YWx1ZXMsICIpLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJQKDIuMTkpID0gUSgyLjE5KSA9IDEuNjg1MTU5IiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidQKDIuMTkpID0gUSgyLjE5KSA9IDEuNjg1MTU5JyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9UCgyLjE5KSAmIFxcYXBwcm94ICAoMi4xOSleMyAtIDMoMi4xOSleMiArIDMoMi4xOSkgLSAxIFxcXFwgICY9MTAuNSAtIDE0LjQgICsgNi41NyAtIDEgPSAxLjY3IFxcXFwgIFEoMi4xOSkgJlxcYXBwcm94ICgoMi4xOSAtIDMpMi4xOSArIDMpIC0gMSA9IDEuNjkgXFxlbmR7YWxpZ25lZH0iLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICInXFxcXGJlZ2lue2FsaWduZWR9UCgyLjE5KSBcXCYgXFxcXGFwcHJveCAgKDIuMTkpXjMgLSAzKDIuMTkpXjIgKyAzKDIuMTkpIC0gMSBcXFxcXFxcXCAgXFwmPTEwLjUgLSAxNC40ICArIDYuNTcgLSAxID0gMS42NyBcXFxcXFxcXCAgUSgyLjE5KSAmXFxcXGFwcHJveCAoKDIuMTkgLSAzKTIuMTkgKyAzKSAtIDEgPSAxLjY5IFxcXFxlbmR7YWxpZ25lZH0nIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBUaGUgZXJyb3JzIGFyZSAiKSwKICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMC4wMTUxNTkiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzAuMDE1MTU5JyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIi0wLjAwNDg0MSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInLTAuMDA0ODQxJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiwgcmVzcGVjdGl2ZWx5LiBUaHVzIHRoZSBhcHByb3hpbWF0aW9uICIpLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJRKDIuMTkpIFxcYXBwcm94IDEuNjkiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1EoMi4xOSkgXFxcXGFwcHJveCAxLjY5JyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBoYXMgbGVzcyBlcnJvci4gIikKICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgVGhlIGxhc3QgdGhyZWUgZXhhbXBsZXMgc3VnZ2VzdCB0aHJlZSBkaWZmZXJlbnQgd2F5cyBvZiBhdm9pZGluZyBsb3NzIG9mIHNpZ25pZmljYW5jZS4gU29tZXRpbWVzIHRoZSBsb3NzIG9mIHNpZ25pZmljYW5jZSBjYW4gYmUgYXZvaWRlZCBieSByZWFycmFuZ2luZyB0ZXJtcyBpbiB0aGUgZnVuY3Rpb24gdXNpbmcgYSBrbm93biBpZGVudGl0eSBmcm9tIHRyaWdvbm9tZXRyeSBvciBhbGdlYnJhLiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfdm0uX20oNikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAic2VjdGlvbiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJkYXJrLWdyZXktdGV4dCBtYi00IHB5LTMgcHgtMyBteC00ICIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjZmZmM2UwIiB9LAogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJleC0xIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX20oNyksCiAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFVzaW5nIHRocmVlLWRpZ2l0IHJvdW5kaW5nIGFyaXRobWV0aWMsIHBlcmZvcm0gdGhlIGZvbGxvd2luZyBjYWxjdWxhdGlvbnMuIENvbXB1dGUgdGhlIGFic29sdXRlIGFuZCByZWxhdGl2ZSBlcnJvci4gUmVwZWF0IHRoZSBjb21wdXRhdGlvbnMgdXNpbmcgdGhyZWUtZGlnaXQgY2hvcHBpbmcgYXJpdGhtZXRpYy4gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoIm9sIiwgeyBzdGF0aWNTdHlsZTogeyAibGlzdC1zdHlsZSI6ICJsb3dlci1sYXRpbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjEzMyArIDAuOTIxIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxMzMgKyAwLjkyMSciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjEzMyAtIDAuNDk5IiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxMzMgLSAwLjQ5OSciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigxMjEgLSAwLjMyNykgLSAxMTkiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygxMjEgLSAwLjMyNykgLSAxMTknIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgIlxcZGlzcGxheXN0eWxlIFxcbGVmdChcXGZyYWN7Mn17OX1cXHJpZ2h0KVxcY2RvdFxcbGVmdChcXGZyYWN7OX17N30gXFxyaWdodCkiLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICInXFxcXGRpc3BsYXlzdHlsZSBcXFxcbGVmdChcXFxcZnJhY3syfXs5fVxcXFxyaWdodClcXFxcY2RvdFxcXFxsZWZ0KFxcXFxmcmFjezl9ezd9IFxcXFxyaWdodCknIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFN1cHBvc2UgdGhhdCB3ZSBhcmUgd29ya2luZyB3aXRoIGEgZml2ZS1wbGFjZSBkZWNpbWFsIG1hY2hpbmUgYW5kIHdpc2ggdG8gYWRkIHRoZSBudW1iZXJzICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ4IiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3gnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5IiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3knIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgd2hlcmUgIiksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAiIHg9MC4zNzIxOCBcXHRpbWVzIDEwXjR+fn5+fn5cXHRleHR7YW5kfX5+fn5+fnk9MC43MTQyMlxcdGltZXMgMTBeey0xfSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICInIHg9MC4zNzIxOCBcXFxcdGltZXMgMTBeNH5+fn5+flxcXFx0ZXh0e2FuZH1+fn5+fn55PTAuNzE0MjJcXFxcdGltZXMgMTBeey0xfSciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIFNob3cgdGhhdCB0aGUgcmVsYXRpdmUgZXJyb3IgaW52b2x2ZWQgaW4gdGhlIG1hY2hpbmUgYWRkaXRpb24gaXMgYXBwcm94aW1hdGVseSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFxkaXNwbGF5c3R5bGUgMC43NyBcXHRpbWVzIDEwXnstNX0iLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZSAwLjc3IFxcXFx0aW1lcyAxMF57LTV9JyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgV2hhdCBpcyB0aGUgcmVsYXRpdmUgZXJyb3IgaW52b2x2ZWQgaW4gcm91bmRpbmcgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjQuOTk5NyIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIic0Ljk5OTcnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgdG8gIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjUuMDAwMCIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIic1LjAwMDAnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCI/ICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBDb25zaWRlciBhIGNvbXB1dGVyIHRoYXQgdXNlcyBmaXZlLWRlY2ltYWwtZGlnaXQgbnVtYmVycy4gTGV0ICIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmbCh4KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidmbCh4KSciCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiBkZW5vdGUgdGhlIGZsb2F0aW5nLXBvaW50IG1hY2hpbmUgbnVtYmVyIGNsb3Nlc3QgdG8gIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIngiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIneCciCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIi4gU2hvdyB0aGF0IGlmICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ4PTAuNTMyMTQ4NzUxMyIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIid4PTAuNTMyMTQ4NzUxMyciCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInk9MC41MzIxMzA0NDIxIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3k9MC41MzIxMzA0NDIxJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRoZW4gdGhlIG9wZXJhdGlvbiAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiZmwoeCkgLSBmbCh5KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidmbCh4KSAtIGZsKHkpJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIGludm9sdmVzIGEgbGFyZ2UgcmVsYXRpdmUgZXJyb3Igb2YgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjlcXCUiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInOVxcXFwlJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgVXNpbmcgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInggPSAwLjc4NTM5OCIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIid4ID0gMC43ODUzOTgnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiwgY29tcHV0ZSBlYWNoIG9mIHRoZSBmb2xsb3dpbmcuIFRoZW9yZXRpY2FsbHksIGFsbCB2YWx1ZXMgc2hvdWxkIGJlIHRoZSBzYW1lLiBBcmUgdGhleT8/PyAoTi5CIHB1dCB5b3VyIGNhbGN1bGF0b3IgaW4gcmFkaWFucyBtb2RlKSAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICJcXGNvc14yIHggLSBcXHNpbl4yIHh+fix+fihcXGNvcyB4IC0gXFxzaW4geCkoXFxjb3MgeCAtIFxcc2luIHgpfn4sfn5+MSAtIDJcXHNpbl4yIHh+fn5+LH5+flxcY29zIDJ4IiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgIidcXFxcY29zXjIgeCAtIFxcXFxzaW5eMiB4fn4sfn4oXFxcXGNvcyB4IC0gXFxcXHNpbiB4KShcXFxcY29zIHggLSBcXFxcc2luIHgpfn4sfn5+MSAtIDJcXFxcc2luXjIgeH5+fn4sfn5+XFxcXGNvcyAyeCciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigiIExldCAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUCh4KSA9IHheMyAtIDN4XjIgKyAzeCAtIDEiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInUCh4KSA9IHheMyAtIDN4XjIgKyAzeCAtIDEnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIEZpbmQgYSBmdW5jdGlvbiAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUSh4KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidRKHgpJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIHRoYXQgaXMgYSByZWZvcm11bGF0aW9uIG9mICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJQKHgpIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1AoeCknIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiB0byBhdm9pZCBsb3NzIG9mIHNpZ25pZmljYW5jZS4gVXNlIHRocmVlIGRpZ2l0IHJvdW5kaW5nIGFyaXRobWV0aWMgdG8gY29tcHV0ZSBhcHByb3hpbWF0aW9ucyB0byAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUCgyLjE5KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidQKDIuMTkpJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUSgyLjE5KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidRKDIuMTkpJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIuIEZpbmQgdGhlIGFic29sdXRlIGVycm9ycyBpbnZvbHZlZCBpbiB0aGUgY29tcHV0YXRpb25zLiAiCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgSG93IGNhbiB0aGUgZm9sbG93aW5nIGZ1bmN0aW9ucyBiZSByZS13cml0dGVuIHRvIGF2b2lkIHByb2JsZW1zIGR1ZSB0byBsb3NzIG9mIHByZWNpc2lvbj8gIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfSBmKHgpJj1cXHNxcnR7eF4yICsgNH0gLSAyXFxcXGYoeCkgJj0gMSAtIFxcY29zIHh+fn5cXHRleHR7aW4gdGhlIHZpY2luaXR5IG9mIH0geCA9IDAgXFxcXGYoeCkgJj0geCAtIFxcc2luIHh+fn5cXHRleHR7aW4gdGhlIHZpY2luaXR5IG9mIH14ID0gMCBcXFxcZih4KSAmPWVeeCAtIHggLSAxIH5+flxcdGV4dHtpbiB0aGUgdmljaW5pdHkgb2YgfSB4ID0gMFxcXFwgZih4KSAmPSBcXGxuKHgrMSkgLSBcXGxuKHgpfn5+XFx0ZXh0e2ZvciBsYXJnZSB9eCBcXFxcIGYoeCkgJj0gXFxjb3NeMih4KSAtIFxcc2luXjIoeCl+fn5cXHRleHR7Zm9yIH14IFxcYXBwcm94IFxccGkvNCBcXFxcIGYoeCkgJj0gXFxzcXJ0e1xcZnJhY3sxK1xcY29zKHgpfXsyfX1+fn5cXHRleHR7Zm9yIH14IFxcYXBwcm94IFxccGkgXFxlbmR7YWxpZ25lZH0iLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfSBmKHgpXFwmPVxcXFxzcXJ0e3heMiArIDR9IC0gMlxcXFxcXFxcZih4KVxcICY9IDEgLSBcXFxcY29zIHh+fn5cXFxcdGV4dHtpbiB0aGUgdmljaW5pdHkgb2YgfSB4ID0gMCBcXFxcXFxcXGYoeCkgXFwmPSB4IC0gXFxcXHNpbiB4fn5+XFxcXHRleHR7aW4gdGhlIHZpY2luaXR5IG9mIH14ID0gMCBcXFxcXFxcXGYoeCkgXFwmPWVeeCAtIHggLSAxIH5+flxcXFx0ZXh0e2luIHRoZSB2aWNpbml0eSBvZiB9IHggPSAwXFxcXFxcXFwgZih4KSBcXCY9IFxcXFxsbih4KzEpIC0gXFxcXGxuKHgpfn5+XFxcXHRleHR7Zm9yIGxhcmdlIH14IFxcXFxcXFxcIGYoeCkgXFwmPSBcXFxcY29zXjIoeCkgLSBcXFxcc2luXjIoeCl+fn5cXFxcdGV4dHtmb3IgfXggXFxcXGFwcHJveCBcXFxccGkvNCBcXFxcXFxcXCBmKHgpIFxcJj0gXFxcXHNxcnR7XFxcXGZyYWN7MStcXFxcY29zKHgpfXsyfX1+fn5cXFxcdGV4dHtmb3IgfXggXFxcXGFwcHJveCBcXFxccGkgXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgRmluZCB0aGUgcm9vdHMgb2YgdGhlIGZvbGxvd2luZyBxdWFkcmF0aWMgZXF1YXRpb24gKGFzIGFjY3VyYXRlbHkgYXMgcG9zc2libGUpIHVzaW5nIGVpZ2h0IGRpZ2l0cyBhbmQgcm91bmRpbmcgIgogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ4XjIgLSAxMDAwMDB4ICsgMSA9IDAgIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3heMiAtIDEwMDAwMHggKyAxID0gMCAnIiwKICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIiBHaXZlbiB0aGUgZnVuY3Rpb24gIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxle2YoaCkgPSBcXHNxcnR7OS1ofSAtIDN9IiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxkaXNwbGF5c3R5bGV7ZihoKSA9IFxcXFxzcXJ0ezktaH0gLSAzfSciCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfYygib2wiLCB7IHN0YXRpY1N0eWxlOiB7ICJsaXN0LXN0eWxlIjogImxvd2VyLXJvbWFuIiB9IH0sIFsKICAgICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgZmluZCBhIHN1aXRhYmxlIGZ1bmN0aW9uICIpLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJnKGgpIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidnKGgpJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiB0aGF0IGhhcyBiZWVuIHJlZm9ybXVsYXRlZCB0byBiZSBhbGdlYnJhaWNhbGx5IGVxdWl2YWxlbnQgdG8gIgogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmKGgpIiwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidmKGgpJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgIiB3aXRoIHRoZSBhaW0gb2YgYXZvaWRpbmcgbG9zcyBvZiBzaWduaWZpY2FuY2UgZXJyb3IuICIKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigiIENvbXBhcmUgdGhlIHJlc3VsdHMgb2YgY2FsY3VsYXRpbmcgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogImYoMC4wMDAxKSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZigwLjAwMDEpJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogImcoMC4wMDAxKSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZygwLjAwMDEpJyIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiB1c2luZyAiKSwKICAgICAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInNpeCBkaWdpdHMiKV0pLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJjaG9wcGluZyIpXSksCiAgICAgICAgICAgICAgICAgIF92bS5fdigiLiAiKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJQbG90bHkiLCB7CiAgICAgICAgYXR0cnM6IHsgZGF0YTogX3ZtLmRhdGEsIGxheW91dDogX3ZtLmxheW91dCwgImRpc3BsYXktbW9kZS1iYXIiOiBmYWxzZSB9CiAgICAgIH0pCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAicHktMyBweC0zIG14LTQiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNmZmYzZTAiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICIgaDMtcmVzcG9uc2l2ZSBmb250LXdlaWdodC1ib2xkIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIiAxLiBFcnJvcnMiKQogICAgICAgIF0pCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1vZGVsbGluZyBFcnJvcnM6IildKSwKICAgICAgX3ZtLl92KAogICAgICAgICJNYXRoZW1hdGljYWwgZXF1YXRpb25zIHdoaWNoIGFyZSB1c2VkIHRvIHJlcHJlc2VudCBwaHlzaWNhbCBwaGVub21lbmEgYXJlIGtub3duIGFzICIKICAgICAgKSwKICAgICAgX2MoImkiLCBbX3ZtLl92KCJtYXRoZW1hdGljYWwgbW9kZWxzIildKSwKICAgICAgX3ZtLl92KAogICAgICAgICIuIE1hdGhlbWF0aWNhbCBmb3JtdWxhdGlvbnMgYXJlIHNlbGRvbSBleGFjdGx5IGRlc2NyaXB0aXZlIG9mIGFueSByZWFsIHNpdHVhdGlvbiwgYnV0IG9ubHkgb2YgbW9yZSBvciBsZXNzIGlkZWFsaXplZCBtb2RlbHMuIFRoZSBtb2RlbGxpbmcgaXRzZWxmIGludHJvZHVjZXMgZXJyb3JzIGludG8gdGhlIG1peC4gTWF0aGVtYXRpY2FsIGVxdWF0aW9ucyBjYW4gYmUgc29sdmVkIGV4YWN0bHkgYnV0IHRoZSBzb2x1dGlvbiBkaWZmZXJzIGZyb20gcGh5c2ljYWwgcmVhbGl0eSB0aGF0IGlzIGJlaW5nIG1vZGVsbGVkLiAiCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIgfSB9LCBbCiAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJIdW1hbiBFcnJvcnM6IildKSwKICAgICAgX3ZtLl92KAogICAgICAgICJUaGlzIGNsYXNzaWZpY2F0aW9uIGluY2x1ZGVzIGFsbCBhc3BlY3RzIG9mIGh1bWFuIGludGVydmVudGlvbiB3aGljaCBjYXVzZSBlcnJvcnMgaW4gdGhlIGNhbGN1bGF0aW9uIGUuZyBhcml0aG1ldGljIGVycm9ycywgcHJvZ3JhbW1pbmcgZXJyb3JzLCBldGMuICIKICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1lYXN1cmVtZW50IEVycm9yczoiKV0pLAogICAgICBfdm0uX3YoCiAgICAgICAgIkluIG1lYXN1cmluZyBvYnNlcnZhYmxlIHBoZW5vbWVuYSwgZXJyb3JzIGFyZSBpbnRyb2R1Y2VkIGJ5IG1lYXN1cmluZyBkZXZpY2VzIGFuZCB0aGUgbWFubmVyIGluIHdoaWNoIGRhdGEgaXMgY29sbGVjdGVkLiAiCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIgfSB9LCBbCiAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJNYWNoaW5lIEVycm9yczoiKV0pLAogICAgICBfdm0uX3YoCiAgICAgICAgIlRoZXdheSBpbiB3aGljaCBjb21wdXRlcnMgcmVwcmVzZW50IG51bWJlcnMgaW50ZXJuYWxseSBpbnRyb2R1Y2VzIGVycm9ycyBpbnRvIHRoZSBtaXguICIKICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIFsKICAgICAgX3ZtLl92KAogICAgICAgICIgQSBjb21wdXRlcidzIHJlcHJlc2VudGF0aW9uIG9mIHJlYWwgbnVtYmVycyBpcyBsaW1pdGVkIHRvIHRoZSBmaXhlZCBwcmVjaXNpb24gb2YgdGhlIG1hbnRpc3NhLiBUcnVlIHZhbHVlcyBhcmUgc29tZXRpbWVzIG5vdCBzdG9yZWQgZXhhY3RseSBieSBhIGNvbXB1dGVyJ3MgcmVwcmVzZW50YXRpb24uIFRoaXMgaXMgY2FsbGVkICIKICAgICAgKSwKICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoInJvdW5kLW9mZiBlcnJvciIpXSksCiAgICAgIF92bS5fdigKICAgICAgICAiLiBUaGUgYWN0dWFsIG51bWJlciBzdG9yZWQgaW4gYSBjb21wdXRlciBtYXkgdW5kZXJnbyBjaG9wcGluZyBvciByb3VuZGluZyBvZiB0aGUgbGFzdCBkaWdpdC4gIgogICAgICApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm10LTQiLCBhdHRyczogeyBpZDogImMtMS0yLTEiIH0gfSwgWwogICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIjEuMi4xIFNpZ25pZmljYW50IGRpZ2l0cyIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJub3RlIG5vdGUtZGVmaW5pdGlvbiIgfSwgWwogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1zdWNjZXNzIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiRGVmaW5hdGlvbiAxLjUiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBTaWduaWZpY2FudCBkaWdpdHMgKGZpZ3VyZXMpIGFyZSBkaWdpdHMgYmVnaW5uaW5nIHdpdGggdGhlIGxlZnRtb3N0ICIKICAgICAgICAgICksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigibm9uemVybyIpXSksCiAgICAgICAgICBfdm0uX3YoIiBkaWdpdCBhbmQgZW5kaW5nIHdpdGggdGhlIHJpZ2h0bW9zdCAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJjb3JyZWN0IildKSwKICAgICAgICAgIF92bS5fdigiIGRpZ2l0LCBpbmNsdWRpbmcgZmluYWwgemVyb3MgdGhhdCBhcmUgZXhhY3QuICIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtbC0zIG10LTIiIH0sIFsKICAgICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIG15LTQiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJCYXNpYyBSdWxlcyBvZiBzaWduaWZpY2FudCBkaWdpdHMiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgQWxsIG5vbnplcm8gZGlnaXRzIGFyZSBzaWduaWZpY2FudC4gIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIgQWxsIHplcm9lcyBiZXR3ZWVuIHNpZ25pZmljYW50IGRpZ2l0cyBhcmUgc2lnbmlmaWNhbnQuICIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBBbGwgemVyb2VzIHdoaWNoIGFyZSBib3RoIHRvIHRoZSByaWdodCBvZiB0aGUgZGVjaW1hbCBwb2ludCBhbmQgdG8gdGhlIHJpZ2h0IG9mIGFsbCBub24temVybyBzaWduaWZpY2FudCBkaWdpdHMgYXJlIHRoZW1zZWx2ZXMgc2lnbmlmaWNhbnQuICIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgU2lnbmlmaWNhbnQgZmlndXJlIGFyZSB0aGUgImludGVyZXN0aW5nIiBvciAiaW1wb3J0YW50IiBmaWd1cmVzIGUuZyAnCiAgICAgICAgKSwKICAgICAgICBfYygidWwiLCBbCiAgICAgICAgICBfYygibGkiLCB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tYm90dG9tIjogIjEwcHgiIH0gfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiAzLjE0MTU5IGhhcyBzaXggc2lnbmlmaWNhbnQgZGlnaXRzIChhbGwgdGhlIG51bWJlcnMgZ2l2ZSB5b3UgdXNlZnVsIGluZm9ybWF0aW9uKSAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgMTAwMCBoYXMgb25lIHNpZ25pZmljYW50IGRpZ2l0IChvbmx5IHRoZSAxIGlzIGludGVyZXN0aW5nOyB5b3UgZG9uJ3Qga25vdyBhbnl0aGluZyBmb3Igc3VyZSBhYm91dCB0aGUgaHVuZHJlZHMsIHRlbnMsIG9yIHVuaXRzIHBsYWNlczsgdGhlIHplcm9lcyBtYXkganVzdCBiZSBwbGFjZWhvbGRlcnM7IHRoZXkgbWF5IGhhdmUgcm91bmRlZCBzb21ldGhpbmcgb2ZmIHRvIGdldCB0aGlzIHZhbHVlKSAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICcgMTAwMC4wIGhhcyBmaXZlIHNpZ25pZmljYW50IGRpZ2l0cyAodGhlICIuMCIgdGVsbHMgdXMgc29tZXRoaW5nIGludGVyZXN0aW5nIGFib3V0IHRoZSBwcmVzdW1lZCBhY2N1cmFjeSBvZiB0aGUgbWVhc3VyZW1lbnQgYmVpbmcgbWFkZTogdGhhdCB0aGUgbWVhc3VyZW1lbnQgaXMgYWNjdXJhdGUgdG8gdGhlIHRlbnRocyBwbGFjZSwgYnV0IHRoYXQgdGhlcmUgaGFwcGVuIHRvIGJlIHplcm8gdGVudGhzKSAnCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgMC4wMDAzNSBoYXMgdHdvIHNpZ25pZmljYW50IGRpZ2l0cyAob25seSB0aGUgMyBhbmQgNSB0ZWxsIHVzIHNvbWV0aGluZzsgdGhlIG90aGVyIHplcm9lcyBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IHByb3ZpZGluZyBpbmZvcm1hdGlvbiBhYm91dCByZWxhdGl2ZSBzaXplKSAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgMC4wMDAzNTAgaGFzIHRocmVlIHNpZ25pZmljYW50IGRpZ2l0cyAodGhhdCBsYXN0IHplcm8gdGVsbHMgdXMgdGhhdCB0aGUgbWVhc3VyZW1lbnQgd2FzIG1hZGUgYWNjdXJhdGUgdG8gdGhhdCBsYXN0IGRpZ2l0LCB3aGljaCBqdXN0IGhhcHBlbmVkIHRvIGhhdmUgYSB2YWx1ZSBvZiB6ZXJvKSAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgMTAwNiBoYXMgZm91ciBzaWduaWZpY2FudCBkaWdpdHMgKHRoZSAxIGFuZCA2IGFyZSBpbnRlcmVzdGluZywgYW5kIHdlIGhhdmUgdG8gY291bnQgdGhlIHplcm9lcywgYmVjYXVzZSB0aGV5J3JlIGJldHdlZW4gdGhlIHR3byBpbnRlcmVzdGluZyBudW1iZXJzKSAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWJvdHRvbSI6ICIxMHB4IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgNTYwIGhhcyB0d28gc2lnbmlmaWNhbnQgZGlnaXRzICh0aGUgbGFzdCB6ZXJvIGlzIGp1c3QgYSBwbGFjZWhvbGRlcikgIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1ib3R0b20iOiAiMTBweCIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIDU2MC4wIGhhcyBmb3VyIHNpZ25pZmljYW50IGRpZ2l0cyAodGhlIHplcm8gaW4gdGhlIHRlbnRocyBwbGFjZSBtZWFucyB0aGF0IHRoZSBtZWFzdXJlbWVudCB3YXMgbWFkZSBhY2N1cmF0ZSB0byB0aGUgdGVudGhzIHBsYWNlLCBhbmQgdGhhdCB0aGVyZSBqdXN0IGhhcHBlbiB0byBiZSB6ZXJvIHRlbnRoczsgdGhlIDUgYW5kIDYgZ2l2ZSB1c2VmdWwgaW5mb3JtYXRpb24sIGFuZCB0aGUgb3RoZXIgemVybyBpcyBiZXR3ZWVuIHNpZ25pZmljYW50IGRpZ2l0cywgYW5kIG11c3QgdGhlcmVmb3JlIGFsc28gYmUgY291bnRlZCkgIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogIm15LTQgcC0zIiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjZTJlM2U1IiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRXhhbXBsZSAxLjUgIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIFJlZmVyIHRvIFBhZ2UgNjIgLSA2NyBvZiBDaGVuZXkgYW5kIEtpbmNhaWQgaS5lIENoYXB0ZXIgNCBmcm9tIEV4YW1wbGUgNC41ICIKICAgICAgICApCiAgICAgIF0KICAgICkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImg0IiwgeyBzdGF0aWNDbGFzczogImg0LXJlc3BvbnNpdmUiIH0sIFsKICAgICAgX3ZtLl92KCJFeGVyY2lzZTEuMSAiKSwKICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVycm9yIGFuYWx5c2lzIildKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}