{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit2.vue?vue&type=template&id=855692f8&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit2.vue","mtime":1601211594279},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidW5pdDIiIH0sIFsKICAgIF92bS5fbSgwKSwKICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImRhcmstZ3JleS10ZXh0IG1iLTQgcHQtMyBweC0zIG14LTQiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSBwdC0yIGZvbnQtd2VpZ2h0LWJvbGQgYmx1ZS10ZXh0IiB9LAogICAgICAgIFtfdm0uX3YoIiAyLjEgRGVjaW1hbCBhbmQgQmluYXJ5IHN5c3RlbSAiKV0KICAgICAgKSwKICAgICAgX2MoImhyIiwgeyBzdGF0aWNDbGFzczogImJsdWUgbWItNCBtdC0wICIgfSksCiAgICAgIF9jKCJkaXYiLCBbCiAgICAgICAgX3ZtLl92KCIgVGhlIG51bWJlciBzeXN0ZW0gdXNlZCBvbiBhIGRhaWx5IGJhc2lzIGlzIGNhbGxlZCBhICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJkZWNpbWFsIHN5c3RlbSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gSW4gZGVjaW1hbCByZXByZXNlbnRhdGlvbiBvZiBpbnRlZ2VycyB3ZSBpZGVudGlmeSBhbiBpbnRlZ2VyICIKICAgICAgICApLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiZF9uZF97bi0xfVxcY2RvdHMgZF8xZF8wIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidkX25kX3tuLTF9XFxcXGNkb3RzIGRfMWRfMCciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIigyLjEpIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4xKSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgd2l0aCAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiZF9uMTBebiArIGRfe24tMX0xMF57bi0xfSArIFxcY2RvdHMgKyBkXzEgMTBeMSArIGRfMCAxMF4wIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ2RfbjEwXm4gKyBkX3tuLTF9MTBee24tMX0gKyBcXFxcY2RvdHMgKyBkXzEgMTBeMSArIGRfMCAxMF4wJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDIuMikiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjIpJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBTaW1pbGFybHksIGFuIGluZmluaXRlIGRlY2ltYWwgb2YgdGhlIGZvcm0gIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJkX25kX3tuLTF9XFxjZG90cyBkXzFkXzAuZF97LTF9ZF97LTJ9ZF97LTN9XFxsZG90cyIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidkX25kX3tuLTF9XFxcXGNkb3RzIGRfMWRfMC5kX3stMX1kX3stMn1kX3stM31cXFxcbGRvdHMnIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4zKSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuMyknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIGNhbiBiZSByZXByZXNlbnRlZCBhcyAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiZF9uMTBebiArIGRfe24tMX0xMF57bi0xfSArIFxcY2RvdHMgKyBkXzEgMTBeMSArIGRfMCAxMF4wICsgZF97LTF9MTBeey0xfSArIGRfey0yfTEwXnstMn0gKyBcXGxkb3RzIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ2RfbjEwXm4gKyBkX3tuLTF9MTBee24tMX0gKyBcXFxcY2RvdHMgKyBkXzEgMTBeMSArIGRfMCAxMF4wICsgZF97LTF9MTBeey0xfSArIGRfey0yfTEwXnstMn0gKyBcXFxcbGRvdHMnIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi40KSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuNCknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIHdoZXJlICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICJkX2siLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZF9rJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGlzIGFuIGludGVnZXIgZnJvbSAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgeyBuYW1lOiAia2F0ZXgiLCByYXdOYW1lOiAidi1rYXRleCIsIHZhbHVlOiAiMCIsIGV4cHJlc3Npb246ICInMCciIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiB0byAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgeyBuYW1lOiAia2F0ZXgiLCByYXdOYW1lOiAidi1rYXRleCIsIHZhbHVlOiAiOSIsIGV4cHJlc3Npb246ICInOSciIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiwgd2l0aCAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiZF9uIFxcbmVxIDAiLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZF9uIFxcXFxuZXEgMCciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIi4gRm9yIGV4YW1wbGUsICIpLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtMyBtYi00IHAtMyIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNlMmUzZTUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJkZWVwIiwgW192bS5fdigiRXhhbXBsZSAyLjEiKV0pLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInRhYmxlLXJlc3BvbnNpdmUiLAogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxMDAlIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygidGFibGUiLCB7IHN0YXRpY0NsYXNzOiAidGFibGUiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJ0aCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfTIzNDU2ICY9IDJcXHRpbWVzIDEwXjQgKyAzXFx0aW1lcyAxMF4zICsgNFxcdGltZXMgMTBeMiArIDVcXHRpbWVzIDEwXjEgKyA2IFxcdGltZXMgMTBeMCB+fn5+fn5+fn5+fiYoMi41KVxcXFwgMjM0LjU2ICY9IDJcXHRpbWVzIDEwXjIgKyAzXFx0aW1lcyAxMF4xICsgNFxcdGltZXMgMTBeMCArIDVcXHRpbWVzIDEwXnstMX0gKyA2IFxcdGltZXMgMTBeey0yfSYoMi42KVxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfTIzNDU2IFxcJj0gMlxcXFx0aW1lcyAxMF40ICsgM1xcXFx0aW1lcyAxMF4zICsgNFxcXFx0aW1lcyAxMF4yICsgNVxcXFx0aW1lcyAxMF4xICsgNiBcXFxcdGltZXMgMTBeMCB+fn5+fn5+fn5+flxcJigyLjUpXFxcXFxcXFwgMjM0LjU2IFxcJj0gMlxcXFx0aW1lcyAxMF4yICsgM1xcXFx0aW1lcyAxMF4xICsgNFxcXFx0aW1lcyAxMF4wICsgNVxcXFx0aW1lcyAxMF57LTF9ICsgNiBcXFxcdGltZXMgMTBeey0yfVxcJigyLjYpXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSW4gZ2VuZXJhbCwgYW4gIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogIihuKzEpIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJyhuKzEpJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGRpZ2l0IGludGVnZXIgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsgbmFtZTogImthdGV4IiwgcmF3TmFtZTogInYta2F0ZXgiLCB2YWx1ZTogIkkiLCBleHByZXNzaW9uOiAiJ0knIiB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgY2FuIGJlIGV4cHJlc3NlZCBpbiBiYXNlICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJrYXRleCIsIHJhd05hbWU6ICJ2LWthdGV4IiwgdmFsdWU6ICJiIiwgZXhwcmVzc2lvbjogIidiJyIgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGFzICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiSSA9IChhX25hX3tuLTF9YV97bi0yfVxcbGRvdHNcXGxkb3RzIGFfMmFfMWFfMClfYiIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidJID0gKGFfbmFfe24tMX1hX3tuLTJ9XFxcXGxkb3RzXFxcXGxkb3RzIGFfMmFfMWFfMClfYiciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIigyLjcpIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi43KSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgSWYgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogImIgPSAxMCIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidiID0gMTAnIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgdGhlIGRpZ2l0cyAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiYV9qIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2FfaiciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBjYW4gdGFrZSB2YWx1ZXMgYmV0d2VlbiAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgeyBuYW1lOiAia2F0ZXgiLCByYXdOYW1lOiAidi1rYXRleCIsIHZhbHVlOiAiMCIsIGV4cHJlc3Npb246ICInMCciIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBhbmQgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogIjkgXFxzcGFjZSAoYV9uIFxuZXEgMCkiLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInOSBcXFxcc3BhY2UgKGFfbiBcXG5lcSAwKSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfYygidWwiLCB7IHN0YXRpY1N0eWxlOiB7ICJsaXN0LXN0eWxlIjogIm5vbmUiIH0gfSwgWwogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoIiBJZiAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiYiA9IDIiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2IgPSAyJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiB0aGUgZGlnaXRzICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJhX2oiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2FfaiciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgY2FuIGVpdGhlciBiZSAwIG9yIDEuICIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KCIgVGhlIGRlY2ltYWwgdmFsdWUgb2YgdGhlIG51bWJlciAod2l0aCBiYXNlICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJiIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidiJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIikgZ2l2ZW4gaW4gZXF1YXRpb24gKDIuNykgaXMgIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgIkkgPSBiXm5cXHRpbWVzIGFfbiArIGJee24tMX1cXHRpbWVzIGFfe24tMX0gKyBcXGNkb3RzICsgYl4xIFxcdGltZXMgYV8xICsgYl4wIFxcdGltZXMgYV8wLiIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ0kgPSBiXm5cXFxcdGltZXMgYV9uICsgYl57bi0xfVxcXFx0aW1lcyBhX3tuLTF9ICsgXFxcXGNkb3RzICsgYl4xIFxcXFx0aW1lcyBhXzEgKyBiXjAgXFxcXHRpbWVzIGFfMC4nIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi44KSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjgpJyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIE1vc3QgY29tcHV0ZXJzIHJlcHJlc2VudCBudW1iZXJzIGFzIHN1bXMgb2YgbXVsdGlwbGUgcG93ZXJzIG9mIDIgKGEgIgogICAgICAgICksCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJiaW5hcnkiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc3lzdGVtKS4gSW4gYSBiaW5hcnkgc3lzdGVtLCB0aGUgbWF0aGVtYXRpY2FsIGV4cHJlc3Npb24gb2YgYW4gaW50ZWdlciBpcyAiCiAgICAgICAgKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIkkgPSAoYV9uYV97bi0xfWFfe24tMn1cXGxkb3RzXFxsZG90cyBhXzJhXzFhXzApXzIiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInSSA9IChhX25hX3tuLTF9YV97bi0yfVxcXFxsZG90c1xcXFxsZG90cyBhXzJhXzFhXzApXzInIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi45KSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuOSknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIHdoZXJlICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICJhX2kiLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInYV9pJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGlzIGEgIiksCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJiaW5hcnkgYml0IildKSwKICAgICAgICBfdm0uX3YoIiwgdGhhdCBpcyAwIG9yIDEuIFRoZSBkZWNpbWFsIHZhbHVlIG9mIGEgYmluYXJ5IG51bWJlciBpcyAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiIEkgPSAyXm5hX24gKyAyXntuLTF9YV97bi0xfSArIFxcY2RvdHMgKyAyXjFhXzEgKyAyXjBhXzAgPSBcXHN1bV97az0wfV57bn0gMl5rYV9rIC4iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInIEkgPSAyXm5hX24gKyAyXntuLTF9YV97bi0xfSArIFxcXFxjZG90cyArIDJeMWFfMSArIDJeMGFfMCA9IFxcXFxzdW1fe2s9MH1ee259IDJea2FfayAuJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDIuMTApIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4xMCknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSWYgdGhlIGJpbmFyeSBudW1iZXIgY29udGFpbnMgYSBmcmFjdGlvbmFsIHBhcnQsIGkuZSBpcyBvZiB0aGUgZm9ybSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiSSA9IChhX25hX3tuLTF9YV97bi0yfVxcbGRvdHNcXGxkb3RzIGFfMmFfMWFfMC5hX3stMX1hX3stMn1hX3stM31cXGxkb3RzKV8yIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ0kgPSAoYV9uYV97bi0xfWFfe24tMn1cXFxcbGRvdHNcXFxcbGRvdHMgYV8yYV8xYV8wLmFfey0xfWFfey0yfWFfey0zfVxcXFxsZG90cylfMiciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIigyLjExKSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuMTEpJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBpdCBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgIkkgPSAyXm5hX24gKyAyXntuLTF9YV97bi0xfSArIFxcY2RvdHMgKyAyXjFhXzEgKyAyXjBhXzAgKyAyXnstMX1hX3stMX0rMl57LTJ9YV97LTJ9ICsgMl57LTN9YV97LTN9ICsgXFxsZG90cyAiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInSSA9IDJebmFfbiArIDJee24tMX1hX3tuLTF9ICsgXFxcXGNkb3RzICsgMl4xYV8xICsgMl4wYV8wICsgMl57LTF9YV97LTF9KzJeey0yfWFfey0yfSArIDJeey0zfWFfey0zfSArIFxcXFxsZG90cyAnIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4xMikiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjEyKSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtdC0zIG1iLTQgcC0zIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2UyZTNlNSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImRlZXAiLCBbX3ZtLl92KCJFeGFtcGxlIDIuMiIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgIlxcYmVnaW57YWxpZ25lZH0oMTEwMDEpXzImPSAyXjRcXGNkb3QgMSArIDJeM1xcY2RvdCAxICsgMl4yXFxjZG90IDAgKyAyXjEgXFxjZG90IDAgKyAyXjBcXGNkb3QgMSBcXFxcICAgICAgICAmPSAxNiArOCArIDAgKyAwICsgMSA9ICgyNSlfezEwfVxcXFwgICAgICAgICAmIFxcXFwgKDAuMDExMSlfMiY9IDJeey0xfVxcY2RvdCAwICsgMl57LTJ9XFxjZG90IDEgKyAyXnstM31cXGNkb3QgMSArIDJeey00fVxcY2RvdCAxIFxcXFwgICAgICAgICY9IDAgKyAwLjI1ICsgMC4xMjUgKyAwLjA2MjUgPSAoMC40Mzc1KV97MTB9IFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfSgxMTAwMSlfMlxcJj0gMl40XFxcXGNkb3QgMSArIDJeM1xcXFxjZG90IDEgKyAyXjJcXFxcY2RvdCAwICsgMl4xIFxcXFxjZG90IDAgKyAyXjBcXFxcY2RvdCAxIFxcXFxcXFxcICAgICAgICBcXCY9IDE2ICs4ICsgMCArIDAgKyAxID0gKDI1KV97MTB9XFxcXFxcXFwgICAgICAgICBcXCYgXFxcXFxcXFwgKDAuMDExMSlfMlxcJj0gMl57LTF9XFxcXGNkb3QgMCArIDJeey0yfVxcXFxjZG90IDEgKyAyXnstM31cXFxcY2RvdCAxICsgMl57LTR9XFxcXGNkb3QgMSBcXFxcXFxcXCAgICAgICAgXFwmPSAwICsgMC4yNSArIDAuMTI1ICsgMC4wNjI1ID0gKDAuNDM3NSlfezEwfSBcXFxcZW5ke2FsaWduZWR9JyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInB5LTMiIH0sIFsKICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSBweS0yIGZvbnQtd2VpZ2h0LWJvbGQiIH0sIFsKICAgICAgICAgIF92bS5fdigiIDIuMS4xIENvbnZlcnNpb24gZnJvbSBkZWNpbWFsIG51bWJlciB0byBiaW5hcnkgbnVtYmVyICIpCiAgICAgICAgXSksCiAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImZvbnQtd2VpZ2h0LWJvbGQgcHktMiIgfSwgWwogICAgICAgICAgX3ZtLl92KCJDb252ZXJ0aW5nIG9mIHRoZSBpbnRlZ2VyIHBhcnQiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIEEgZGVjaW1hbCBudW1iZXIgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogIklfezEwfSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidJX3sxMH0nIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgY2FuIGJlIHJlcHJlc2VudGVkIGluIGJpbmFyeSBmb3JtIGFzICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICJJX3sxMH0gPSAoYV9uYV97bi0xfVxcbGRvdHMgYV8xYV8wKV8yID0gMl5uIGFfbiArIDJee24tMX1hX3tuLTF9K1xcbGRvdHMgKzJeMWFfMSArIDJeMGFfMCA9IChhX25hX3tuLTF9YV97bi0yfVxcbGRvdHNcXGxkb3RzIGFfMmFfMWFfMClfMi4iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInSV97MTB9ID0gKGFfbmFfe24tMX1cXFxcbGRvdHMgYV8xYV8wKV8yID0gMl5uIGFfbiArIDJee24tMX1hX3tuLTF9K1xcXFxsZG90cyArMl4xYV8xICsgMl4wYV8wID0gKGFfbmFfe24tMX1hX3tuLTJ9XFxcXGxkb3RzXFxcXGxkb3RzIGFfMmFfMWFfMClfMi4nIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4xMykiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjEzKSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgRm9yIGV4YW1wbGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtdC0zIG1iLTQgcC0zIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2UyZTNlNSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImRlZXAiLCBbX3ZtLl92KCJFeGFtcGxlIDIuMyIpXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgIlxcYmVnaW57YWxpZ25lZH03ICY9IDQgKyAyICsgMSA9IDJeMiArMl4xICsgMl4wID0gKDExMSlfMn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fiYoMi4xNClcXFxcIDI1Jj0gMTYgKyA4ICsgMSA9IDJeNCArIDJeMyArIDBcXGNkb3QgMl4yICsgMCBcXGNkb3QgMl4xICsgMl4wID0gKDExMDAxKV8yICYoMi4xNSlcXGVuZHthbGlnbmVkfSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfTcgXFwmPSA0ICsgMiArIDEgPSAyXjIgKzJeMSArIDJeMCA9ICgxMTEpXzJ+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5cXCYoMi4xNClcXFxcXFxcXCAyNVxcJj0gMTYgKyA4ICsgMSA9IDJeNCArIDJeMyArIDBcXFxcY2RvdCAyXjIgKyAwIFxcXFxjZG90IDJeMSArIDJeMCA9ICgxMTAwMSlfMiBcXCYoMi4xNSlcXFxcZW5ke2FsaWduZWR9JyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVGhlIGZvbGxvd2luZyBwcm9jZWR1cmUgaXMgYSBtb3JlIGdlbmVyYWwgYXBwcm9hY2ggdGhhdCBjYW4gYmUgdXNlZCB0byBjb252ZXJ0IGRlY2ltYWwgaW50ZWdlcnMgdG8gYmluYXJ5IGZvcm0uIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgR2l2ZW4gYW4gaW50ZWdlciAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiSV97MTB9IiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ0lfezEwfSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiwgZGV0ZXJtaW5lIHRoZSBxdW90aWVudHMgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogIlFfaSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidRX2knIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgYW5kIHRoZSByZW1haW5kZXJzICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICJSX2kiLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInUl9pJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIHN1Y2ggdGhhdCAiKSwKICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9IElfezEwfSY9JiAyUV8wICsgUl8wXFxcXCAgUV8wICY9JjJRXzEgKyBSXzEgXFxcXCAgUV8xICY9JiAyUV8yICsgUl8yIFxcXFwgXFx2ZG90cyYgJlxcdmRvdHMgXFxcXCBRX3tuLTF9ICY9JiAyUV9uICsgUl9uIFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgIidcXFxcYmVnaW57YWxpZ25lZH0gSV97MTB9XFwmPVxcJiAyUV8wICsgUl8wXFxcXFxcXFwgIFFfMCBcXCY9XFwmMlFfMSArIFJfMSBcXFxcXFxcXCAgUV8xIFxcJj1cXCYgMlFfMiArIFJfMiBcXFxcXFxcXCBcXFxcdmRvdHNcXCYgXFwmXFxcXHZkb3RzIFxcXFxcXFxcIFFfe24tMX0gXFwmPVxcJiAyUV9uICsgUl9uIFxcXFxlbmR7YWxpZ25lZH0nIiwKICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBUaGUgcmVtYWluZGVycyBhcmUgMHMgYW5kIDFzIGFuZCB0aGUgYmluYXJ5IGZvcm0gZm9yIHRoZSBudW1iZXIgIgogICAgICAgICksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogIklfezEwfSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidJX3sxMH0nIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgaXMgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJSX25SX3tuLTF9Ul97bi0yfVxcbGRvdHMgUl8xUl8wIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidSX25SX3tuLTF9Ul97bi0yfVxcXFxsZG90cyBSXzFSXzAnIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4xNikiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjE2KSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgSXQgc2hvdWxkIGJlIG5vdGVkIHRoYXQgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgIlJfblJfe24tMX1SX3tuLTJ9XFxsZG90cyBSXzFSXzAgID0gYV9uYV97bi0xfWFfe24tMn1cXGxkb3RzIGFfMWFfMCIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidSX25SX3tuLTF9Ul97bi0yfVxcXFxsZG90cyBSXzFSXzAgID0gYV9uYV97bi0xfWFfe24tMn1cXFxcbGRvdHMgYV8xYV8wJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDIuMTcpIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4xNyknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtMyBtYi00IHAtMyIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNlMmUzZTUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJkZWVwIiwgW192bS5fdigiRXhhbXBsZSAyLjQiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBDb252ZXJ0IHRoZSBmb2xsb3dpbmcgZGVjaW1hbCBudW1iZXJzIGludG8gYmluYXJ5IGZvcm0gIiksCiAgICAgICAgICAgIF9jKCJvbCIsIHsgc3RhdGljU3R5bGU6IHsgImxpc3Qtc3R5bGUiOiAibG93ZXItbGF0aW4iIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoNTMpX3sxMH0iLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoNTMpX3sxMH0nIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigzMTUpX3sxMH0iLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMzE1KV97MTB9JyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBbnN3ZXI6ICIpLAogICAgICAgIF9jKCJvbCIsIHsgc3RhdGljU3R5bGU6IHsgImxpc3Qtc3R5bGUiOiAibG93ZXItbGF0aW4iIH0gfSwgWwogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgIlxcdGV4dGJme1RoaXMgcmVxdWlyZXMgc3BlY2lhbCBhdHRlbnRpb259IFxcdGV4dGl0e2Fyb3VuZCBsaW5lIDQwMCBpbiB0aGUgdGV4IGZpbGV9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ1xcXFx0ZXh0YmZ7VGhpcyByZXF1aXJlcyBzcGVjaWFsIGF0dGVudGlvbn0gXFxcXHRleHRpdHthcm91bmQgbGluZSA0MDAgaW4gdGhlIHRleCBmaWxlfSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthcnJheX17Y3xyY2NjfSBcXG11bHRpY29sdW1uezJ9e3J9e1xccm0gUXVvdGllbnRzfSYgJiB7XFxybSBSZW1haW5kZXJzfSBcXFxcIDImNTMmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcOyYgIFxcXFwgXFxjbGluZXsyLTJ9IDImMjYmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcOyYgMSA9IGFfMCBcXFxcIFxcY2xpbmV7Mi0yfSAyJjEzJiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDsmIDAgPSBhXzEgXFxcXCBcXGNsaW5lezItMn0gMiY2JiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDsmICAxID0gYV8yIFxcXFwgXFxjbGluZXsyLTJ9IDImMyYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7JiAgMCA9IGFfMyBcXFxcIFxcY2xpbmV7Mi0yfSAyJjEmIFxcO1xcOztcXDtcXDtcXDtcXDtcXDsmICAxID0gYV80IFxcXFwgXFxjbGluZXsyLTJ9IDImMCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7JiAgMSA9IGFfNSBcXFxcIFxcY2xpbmV7Mi0yfSBcXGVuZHthcnJheX0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInXFxcXGJlZ2lue2FycmF5fXtjfHJjY2N9IFxcXFxtdWx0aWNvbHVtbnsyfXtyfXtcXFxccm0gUXVvdGllbnRzfVxcJiBcXCYge1xcXFxybSBSZW1haW5kZXJzfSBcXFxcXFxcXCAyXFwmNTNcXCYgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiAgXFxcXFxcXFwgXFxcXGNsaW5lezItMn0gMlxcJjI2XFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXCYgMSA9IGFfMCBcXFxcXFxcXCBcXFxcY2xpbmV7Mi0yfSAyXFwmMTNcXCYgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiAwID0gYV8xIFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCY2XFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXCYgIDEgPSBhXzIgXFxcXFxcXFwgXFxcXGNsaW5lezItMn0gMlxcJjNcXCYgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiAgMCA9IGFfMyBcXFxcXFxcXCBcXFxcY2xpbmV7Mi0yfSAyXFwmMVxcJiBcXFxcO1xcXFw7XFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiAgMSA9IGFfNCBcXFxcXFxcXCBcXFxcY2xpbmV7Mi0yfSAyXFwmMFxcJiBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFwmICAxID0gYV81IFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IFxcXFxlbmR7YXJyYXl9JyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgVGh1cyAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDUzKV97MTB9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoNTMpX3sxMH0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiID0gIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIigxMTAxMDEpX3syfSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDExMDEwMSlfezJ9JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFx0ZXh0YmZ7SGVuY2UgSSB3aWxsIGdpdmUgaXQgdGhhdCBhdHRlbnRpb24gbGF0ZXJ9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ1xcXFx0ZXh0YmZ7SGVuY2UgSSB3aWxsIGdpdmUgaXQgdGhhdCBhdHRlbnRpb24gbGF0ZXJ9JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FycmF5fXtjfHJjY2N9ICBcXG11bHRpY29sdW1uezJ9e3J9e1xccm0gUXVvdGllbnRzfSYgJiB7XFxybSBSZW1haW5kZXJzfSBcXFxcIDImMzE1JiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDsmICBcXFxcIFxcY2xpbmV7Mi0yfSAyJjE1NyYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7JiAxID0gYV8wIFxcXFwgXFxjbGluZXsyLTJ9IDImNzgmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcOyYgIDEgPSBhXzEgXFxcXCBcXGNsaW5lezItMn0gMiYzOSYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7JiAgMCA9IGFfMiBcXFxcIFxcY2xpbmV7Mi0yfSAyJjE5JiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDsmICAxID0gYV8zIFxcXFwgXFxjbGluZXsyLTJ9IDImOSYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7JiAgIDEgPSBhXzQgXFxcXCBcXGNsaW5lezItMn0gMiY0JiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDsmICAgMSA9IGFfNSBcXFxcIFxcY2xpbmV7Mi0yfSAyJjImIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcOyYgIDAgPSBhXzYgXFxcXCBcXGNsaW5lezItMn0gMiYxJiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDsmICAgMCA9IGFfNyBcXFxcIFxcY2xpbmV7Mi0yfSAyJjAmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcOyYgICAxID0gYV84IFxcXFwgXFxjbGluZXsyLTJ9IFxcZW5ke2FycmF5fSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidcXFxcYmVnaW57YXJyYXl9e2N8cmNjY30gIFxcXFxtdWx0aWNvbHVtbnsyfXtyfXtcXFxccm0gUXVvdGllbnRzfVxcJiBcXCYge1xcXFxybSBSZW1haW5kZXJzfSBcXFxcXFxcXCAyXFwmMzE1XFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXCYgIFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCYxNTdcXCYgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiAxID0gYV8wIFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCY3OFxcJiBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFwmICAxID0gYV8xIFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCYzOVxcJiBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFwmICAwID0gYV8yIFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCYxOVxcJiBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFwmICAxID0gYV8zIFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCY5XFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXCYgICAxID0gYV80IFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCY0XFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXCYgICAxID0gYV81IFxcXFxcXFxcIFxcXFxjbGluZXsyLTJ9IDJcXCYyXFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXCYgIDAgPSBhXzYgXFxcXFxcXFwgXFxcXGNsaW5lezItMn0gMlxcJjFcXCYgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiAgIDAgPSBhXzcgXFxcXFxcXFwgXFxcXGNsaW5lezItMn0gMlxcJjBcXCYgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiAgIDEgPSBhXzggXFxcXFxcXFwgXFxcXGNsaW5lezItMn0gXFxcXGVuZHthcnJheX0nIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBUaHVzICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMzE1KV97MTB9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMzE1KV97MTB9JyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiA9ICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMTAwMTExMDExKV97Mn0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygxMDAxMTEwMTEpX3syfSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAiZm9udC13ZWlnaHQtYm9sZCBweS0yIiB9LCBbCiAgICAgICAgICBfdm0uX3YoIkNvbnZlcnRpbmcgdGhlIGZyYWN0aW9uYWwgcGFydCAoYmluYXJ5IGZyYWN0aW9uKSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgSW4gdGhlIGNhc2Ugb2YgYSBkZWNpbWFsIGZyYWN0aW9uICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJrYXRleCIsIHJhd05hbWU6ICJ2LWthdGV4IiwgdmFsdWU6ICJJIiwgZXhwcmVzc2lvbjogIidJJyIgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIHN1Y2ggdGhhdCAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiIDAgPCBJIDwgMSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicgMCA8IEkgPCAxJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiLCB3ZSBub3RlIHRoYXQgdGhlIGJpbmFyeSBmb3JtIGlzICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICJJID0gKDAuZF8xZF8yZF8zXFxsZG90cyBkX3tuLTF9ZF97bn0pXzIgPSBcXGZyYWN7ZF8xfXsyfSArIFxcZnJhY3tkXzJ9ezJeMn0gKyBcXGZyYWN7ZF8zfXsyXjN9ICsgXFxsZG90cyArIFxcZnJhY3tkX259ezJebn0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInSSA9ICgwLmRfMWRfMmRfM1xcXFxsZG90cyBkX3tuLTF9ZF97bn0pXzIgPSBcXFxcZnJhY3tkXzF9ezJ9ICsgXFxcXGZyYWN7ZF8yfXsyXjJ9ICsgXFxcXGZyYWN7ZF8zfXsyXjN9ICsgXFxcXGxkb3RzICsgXFxcXGZyYWN7ZF9ufXsyXm59JyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDIuMTgpIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4xOCknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIHRoZW4gIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgIjJJID0gIGRfMSArIFxcbGVmdChcXGZyYWN7ZF8yfXsyfSArIFxcZnJhY3tkXzN9ezJeMn0gKyBcXGxkb3RzICsgXFxmcmFje2Rfbn17Ml57bi0xfX1cXHJpZ2h0KSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIicySSA9ICBkXzEgKyBcXFxcbGVmdChcXFxcZnJhY3tkXzJ9ezJ9ICsgXFxcXGZyYWN7ZF8zfXsyXjJ9ICsgXFxcXGxkb3RzICsgXFxcXGZyYWN7ZF9ufXsyXntuLTF9fVxcXFxyaWdodCknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4xOSkiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjE5KSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBUaGUgcXVhbnRpdHkgaW4gcGFyZW50aGVzaXMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgZXF1YXRpb24gKDIuMTkpIGlzIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBpcyBsZXNzIHRoYW4gMS4gVGhlcmVmb3JlICIKICAgICAgICApLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICJkXzEiLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInZF8xJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGlzIHRoZSBpbnRlZ2VyIHBhcnQgb2YgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogIjJJIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzJJJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiLCBkZW5vdGVkICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICJkXzE9aW50KDJJKSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidkXzE9aW50KDJJKSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBUbyBjb250aW51ZSB0aGUgcHJvY2VzcywgdGFrZSB0aGUgZnJhY3Rpb25zIHBhcnQgb2YgKDIuMTkpIGFuZCB3cml0ZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiRl8xID0gZnJhYygySSkgID0gIFxcZnJhY3tkXzJ9ezJ9ICsgXFxmcmFje2RfM317Ml4yfSArIFxcbGRvdHMgKyBcXGZyYWN7ZF9ufXsyXntuLTF9fSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidGXzEgPSBmcmFjKDJJKSAgPSAgXFxcXGZyYWN7ZF8yfXsyfSArIFxcXFxmcmFje2RfM317Ml4yfSArIFxcXFxsZG90cyArIFxcXFxmcmFje2Rfbn17Ml57bi0xfX0nIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4yMCkiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjIwKSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgd2hlcmUgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogImZyYWMoMkkpIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2ZyYWMoMkkpJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGlzIHRoZSBmcmFjdGlvbmFsIHBhcnQgb2YgdGhlIHJlYWwgbnVtYmVyICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICIySSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicySSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIi4gTXVsdGlwbHlpbmcgYm90aCBzaWRlcyBvZiBlcXVhdGlvbiAoMi4yMCkgYnkgMiByZXN1bHRzIGluICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICIyRl8xID0gZF8yICsgXFxsZWZ0KFxcZnJhY3tkXzN9ezJ9ICsgXFxsZG90cyArIFxcZnJhY3tkX259ezJee24tMn19XFxyaWdodCkiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICInMkZfMSA9IGRfMiArIFxcXFxsZWZ0KFxcXFxmcmFje2RfM317Mn0gKyBcXFxcbGRvdHMgKyBcXFxcZnJhY3tkX259ezJee24tMn19XFxcXHJpZ2h0KSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIigyLjIxKSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuMjEpJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBOb3csIHRha2UgdGhlIGludGVnZXIgcGFydCBvZiBlcXVhdGlvbiAoMi4yMSkgYW5kIG9idGFpbiAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiZF8yID0gaW50KDJGXzEpIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2RfMiA9IGludCgyRl8xKSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIi4gVGhpcyBwcm9jZXNzIGlzIGNvbnRpbnVlZCBhbmQgdHdvIHNlcXVlbmNlcyAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAie2RfayB9IiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xce2RfayBcXH0nIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgYW5kICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICJ7Rl9rIH0iLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFx7Rl9rIFxcfSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBhcmUgcmVjdXJzaXZlbHkgZ2VuZXJhdGVkIHN1Y2ggdGhhdCAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAiZF9rID0gaW50KDJGX3trLTF9KSxcXDtcXDtcXDtcXDtcXDtGX2sgPSBmcmFjKDJGX3trLTF9KSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgIidkX2sgPSBpbnQoMkZfe2stMX0pLFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtGX2sgPSBmcmFjKDJGX3trLTF9KSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIigyLjIyKSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuMjIpJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiB3aGVyZSAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiZF8xID0gaW50KDJJKSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidkXzEgPSBpbnQoMkkpJyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiRl8xID0gZnJhYygySSkiLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInRl8xID0gZnJhYygySSknIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIuICIpLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtMyBtYi00IHAtMyIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNlMmUzZTUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZvbnQtd2VpZ2h0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkV4YW1wbGUgMi41IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIENvbnZlcnQgdGhlIGZvbGxvd2luZyBkZWNpbWFsIG51bWJlcnMgdG8gYmluYXJ5IG51bWJlcnMgIiksCiAgICAgICAgICAgIF9jKCJvbCIsIHsgc3RhdGljU3R5bGU6IHsgImxpc3Qtc3R5bGUiOiAibG93ZXItbGF0aW4iIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDAuNDM3NSlfezEwfSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygwLjQzNzUpX3sxMH0nIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigwLjYpX3sxMH0iLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMC42KV97MTB9JyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiIEFuc3dlciAiKSwKICAgICAgICAgICAgX2MoIm9sIiwgeyBzdGF0aWNTdHlsZTogeyAibGlzdC1zdHlsZSI6ICJsb3dlci1sYXRpbiIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCIgTGV0ICIpLAogICAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJJID0gMC40Mzc1IiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInSSA9IDAuNDM3NSciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiLCB0aGVuICIpLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthcnJheX17bGxsbGx9IDJJID0gMC44NzUgJiBcXDtcXDtcXDtcXDtcXDtcXDsmIGRfMSA9IGludCgwLjg3NSkgPSAwICYgIFxcO1xcO1xcO1xcO1xcO1xcOyAmIEZfMSA9IGZyYWMoMC44NzUpID0gMC44NzUgXFxcXCAyRl8xID0gMS43NSAmIFxcO1xcO1xcO1xcO1xcO1xcOyYgZF8yID0gaW50KDEuNzUpICA9IDEmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBGXzIgPSBmcmFjKDEuNzUpID0gMC43NSBcXFxcIDJGXzIgPSAxLjUgJiBcXDtcXDtcXDtcXDtcXDtcXDsmIGRfMyA9IGludCgxLjUpICA9IDEmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBGXzMgPSBmcmFjKDEuNSkgPSAwLjUgXFxcXCAyRl8zID0gMS4wICYgXFw7XFw7XFw7XFw7XFw7XFw7JiBkXzQgPSBpbnQoMS4wKSAgPSAxJiAgXFw7XFw7XFw7XFw7XFw7XFw7ICYgRl80ID0gZnJhYygxLjApID0gMCBcXFxcIFxcZW5ke2FycmF5fSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthcnJheX17bGxsbGx9IDJJID0gMC44NzUgXFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiBkXzEgPSBpbnQoMC44NzUpID0gMCBcXCYgIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXCYgRl8xID0gZnJhYygwLjg3NSkgPSAwLjg3NSBcXFxcXFxcXCAyRl8xID0gMS43NSBcXCYgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFwmIGRfMiA9IGludCgxLjc1KSAgPSAxXFwmICBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDsgXFwmIEZfMiA9IGZyYWMoMS43NSkgPSAwLjc1IFxcXFxcXFxcIDJGXzIgPSAxLjUgXFwmIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcJiBkXzMgPSBpbnQoMS41KSAgPSAxXFwmICBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDsgXFwmIEZfMyA9IGZyYWMoMS41KSA9IDAuNSBcXFxcXFxcXCAyRl8zID0gMS4wIFxcJiBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXCYgZF80ID0gaW50KDEuMCkgID0gMVxcJiAgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcJiBGXzQgPSBmcmFjKDEuMCkgPSAwIFxcXFxcXFxcIFxcXFxlbmR7YXJyYXl9JyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBUaHVzLCAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDAuNDM3NSlfezEwfSA9ICgwLjAxMTEpXzIiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMC40Mzc1KV97MTB9ID0gKDAuMDExMSlfMiciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygiYnIiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiIExldCAiKSwKICAgICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiSSA9IDAuNiIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ0kgPSAwLjYnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FycmF5fXtsbGxsbH0gMkkgPSAxLjIgICAmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBkXzEgPSBpbnQoMS4yKSAgPSAxJiAgXFw7XFw7XFw7XFw7XFw7XFw7ICYgRl8xID0gZnJhYygxLjIpID0gMC4yIFxcXFwgMkZfMSA9IDAuNCAmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBkXzIgPSBpbnQoMC40KSAgPSAwJiAgXFw7XFw7XFw7XFw7XFw7XFw7ICYgRl8yID0gZnJhYygwLjQpID0gMC40XFxcXCAyRl8yID0gMC44ICYgIFxcO1xcO1xcO1xcO1xcO1xcOyAmIGRfMyA9IGludCgwLjgpICA9IDAmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBGXzMgPSBmcmFjKDAuOCkgPSAwLjggXFxcXCAyRl8zID0gMS42ICYgIFxcO1xcO1xcO1xcO1xcO1xcOyAmIGRfNCA9IGludCgxLjYpICA9IDEmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBGXzQgPSBmcmFjKDEuNikgPSAwLjYgXFxcXCAyRl80ID0gMS4yICYgIFxcO1xcO1xcO1xcO1xcO1xcOyAmIGRfNSA9IGludCgxLjIpICA9IDEmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBGXzUgPSBmcmFjKDEuMikgPSAwLjIgXFxcXCAyRl81ID0gMC40ICYgIFxcO1xcO1xcO1xcO1xcO1xcOyAmIGRfNiA9IGludCgwLjQpICA9IDAmICBcXDtcXDtcXDtcXDtcXDtcXDsgJiBGXzYgPSBmcmFjKDAuNCkgPSAwLjRcXFxcIDJGXzYgPSAwLjggJiAgXFw7XFw7XFw7XFw7XFw7XFw7ICYgZF83ID0gaW50KDAuOCkgID0gMCYgIFxcO1xcO1xcO1xcO1xcO1xcOyAmIEZfNyA9IGZyYWMoMC44KSA9IDAuOCBcXFxcIDJGXzcgPSAxLjYgJiAgXFw7XFw7XFw7XFw7XFw7XFw7ICYgZF84ID0gaW50KDEuNikgID0gMSYgIFxcO1xcO1xcO1xcO1xcO1xcOyAmIEZfOCA9IGZyYWMoMS42KSA9IDAuNiBcXFxcIFxcZW5ke2FycmF5fSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthcnJheX17bGxsbGx9IDJJID0gMS4yICAgXFwmICBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDsgXFwmIGRfMSA9IGludCgxLjIpICA9IDFcXCYgIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXCYgRl8xID0gZnJhYygxLjIpID0gMC4yIFxcXFxcXFxcIDJGXzEgPSAwLjQgXFwmICBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDsgXFwmIGRfMiA9IGludCgwLjQpICA9IDBcXCYgIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXCYgRl8yID0gZnJhYygwLjQpID0gMC40XFxcXFxcXFwgMkZfMiA9IDAuOCBcXCYgIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXCYgZF8zID0gaW50KDAuOCkgID0gMFxcJiAgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcJiBGXzMgPSBmcmFjKDAuOCkgPSAwLjggXFxcXFxcXFwgMkZfMyA9IDEuNiBcXCYgIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXCYgZF80ID0gaW50KDEuNikgID0gMVxcJiAgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcJiBGXzQgPSBmcmFjKDEuNikgPSAwLjYgXFxcXFxcXFwgMkZfNCA9IDEuMiBcXCYgIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXCYgZF81ID0gaW50KDEuMikgID0gMVxcJiAgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcJiBGXzUgPSBmcmFjKDEuMikgPSAwLjIgXFxcXFxcXFwgMkZfNSA9IDAuNCBcXCYgIFxcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXCYgZF82ID0gaW50KDAuNCkgID0gMFxcJiAgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcJiBGXzYgPSBmcmFjKDAuNCkgPSAwLjRcXFxcXFxcXCAyRl82ID0gMC44IFxcJiAgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcJiBkXzcgPSBpbnQoMC44KSAgPSAwXFwmICBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDsgXFwmIEZfNyA9IGZyYWMoMC44KSA9IDAuOCBcXFxcXFxcXCAyRl83ID0gMS42IFxcJiAgXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcJiBkXzggPSBpbnQoMS42KSAgPSAxXFwmICBcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDsgXFwmIEZfOCA9IGZyYWMoMS42KSA9IDAuNiBcXFxcXFxcXCBcXFxcZW5ke2FycmF5fSciLAogICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgVGh1cywgIiksCiAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgIigwLjYpX3sxMH0gPSAoMC4xMDAxMTAwMVxcbGRvdHMpXzIgPSAoMC5cXG92ZXJsaW5lezEwMDF9KV8yIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICInKDAuNilfezEwfSA9ICgwLjEwMDExMDAxXFxcXGxkb3RzKV8yID0gKDAuXFxcXG92ZXJsaW5lezEwMDF9KV8yJyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInB5LTMiIH0sIFsKICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSBweS0yIGZvbnQtd2VpZ2h0LWJvbGQiIH0sIFsKICAgICAgICAgIF92bS5fdigiIDIuMS4yIEJpbmFyeSBzaGlmdGluZyAiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIENvbnNpZGVyIHRoZSBiaW5hcnkgbnVtYmVyICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiUyA9ICgwLjAwMDAwXFxvdmVybGluZXsxMTAwMH0pXzIiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1MgPSAoMC4wMDAwMFxcXFxvdmVybGluZXsxMTAwMH0pXzInIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4yMykiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjIzKSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgTXVsdGlwbHlpbmcgYm90aCBzaWRlcyBvZiAoMi4yMykgYnkgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogIjJeNSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicyXjUnIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgc2hpZnRzIHRoZSBiaW5hcnkgcG9pbnQgZml2ZSBwbGFjZXMgdG8gdGhlIHJpZ2h0IHRvIG9idGFpbiAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIjMyUyA9ICgwLlxcb3ZlcmxpbmV7MTEwMDB9KV8yIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiczMlMgPSAoMC5cXFxcb3ZlcmxpbmV7MTEwMDB9KV8yJyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDIuMjQpIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4yNCknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIE11bHRpcGx5aW5nIGVxdWF0aW9uICgyLjIzKSBieSAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiMl57MTB9IiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzJeezEwfSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBzaGlmdHMgdGhlIGJpbmFyeSBwb2ludCB0ZW4gcGxhY2VzIHRvIHRoZSByaWdodCB0byBnaXZlICIpLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMTAyNFMgPSAoMTEwMDAuXFxvdmVybGluZXsxMTAwMH0pXzIiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzEwMjRTID0gKDExMDAwLlxcXFxvdmVybGluZXsxMTAwMH0pXzInIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4yNSkiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygyLjI1KSciLAogICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgU3VidHJhY3RpbmcgZXF1YXRpb24gKDIuMjMpIGZyb20gKDIuMjUpIGdpdmVzICIpLAogICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgIlxcYmVnaW57YWxpZ25lZH0gOTkyUyY9KDExMDAwKV8yIFxcXFwgOTkyUyY9IDI0IFxcXFwgICBTJj1cXGZyYWN7MjR9ezk5Mn0gPSBcXGZyYWN7M317MTI0fSBcXGVuZHthbGlnbmVkfSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICInXFxcXGJlZ2lue2FsaWduZWR9IDk5MlNcXCY9KDExMDAwKV8yIFxcXFxcXFxcIDk5MlNcXCY9IDI0IFxcXFxcXFxcICAgU1xcJj1cXFxcZnJhY3syNH17OTkyfSA9IFxcXFxmcmFjezN9ezEyNH0gXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBUaHVzLCAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgIlxcIFMgPSAoMC4wMDAwMFxcb3ZlcmxpbmV7MTEwMDB9KV8yICA9IFxcZGlzcGxheXN0eWxle1xcZnJhY3szfXsxMjR9fSIsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICInXFxcXCBTID0gKDAuMDAwMDBcXFxcb3ZlcmxpbmV7MTEwMDB9KV8yICA9IFxcXFxkaXNwbGF5c3R5bGV7XFxcXGZyYWN7M317MTI0fX0nIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSkKICAgICAgXSkKICAgIF0pLAogICAgX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAiZGFyay1ncmV5LXRleHQgbWItNCBwdC0zIHB4LTMgbXgtNCIsCiAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2ZmZjNlMCIgfSwKICAgICAgICBhdHRyczogeyBpZDogImV4LTEiIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF92bS5fbSgxKSwKICAgICAgICBfYygib2wiLCBbCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIENvbnZlcnQgdGhlIGZvbGxvd2luZyBiaW5hcnkgbnVtYmVycyB0byB0aGVpciBkZWNpbWFsIGVxdWl2YWxlbnQgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygib2wiLCB7IHN0YXRpY1N0eWxlOiB7ICJsaXN0LXN0eWxlLXR5cGUiOiAibG93ZXItbGF0aW4iIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIxMTAwMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzExMDAxJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIyNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzI1JyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjEwMDAuMDAxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMTAwMC4wMDEnIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjguMTI1IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInOC4xMjUnIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMTEwMTEuMDEiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxMTAxMS4wMSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMjcuMjUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicyNy4yNSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIxMDExMC4wMTAxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMTAxMTAuMDEwMSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMjIuMzEyNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzIyLjMxMjUnIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMTAwMDEwLjAxMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzEwMDAxMC4wMTEnIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjM0LjQzNzUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiczNC40Mzc1JyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlICgxMDEwMS4xMDEpXzIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcZGlzcGxheXN0eWxlICgxMDEwMS4xMDEpXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjIxLjYyNTAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicyMS42MjUwJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlICguMTAxMDEwMTAxXFxsZG90cylfMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxkaXNwbGF5c3R5bGUgKC4xMDEwMTAxMDFcXFxcbGRvdHMpXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlIFxcZnJhY3syfXszfSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxkaXNwbGF5c3R5bGUgXFxcXGZyYWN7Mn17M30nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkaXNwbGF5c3R5bGUgKC4wMDAxMTAwMTEwMDExMDAxMVxcbGRvdHMpXzIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIidcXFxcZGlzcGxheXN0eWxlICguMDAwMTEwMDExMDAxMTAwMTFcXFxcbGRvdHMpXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXsxMH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcZGlzcGxheXN0eWxlIFxcXFxmcmFjezF9ezEwfSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJcXGRpc3BsYXlzdHlsZSAoMTExMTExLi4uMSlfMiwgXFx0ZXh0e3dpdGggcGFyZW50aGVzZXMgZW5jbG9zaW5nIH0gbiBcXHRleHR7MXN9LiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxkaXNwbGF5c3R5bGUgKDExMTExMS4uLjEpXzIsIFxcXFx0ZXh0e3dpdGggcGFyZW50aGVzZXMgZW5jbG9zaW5nIH0gbiBcXFxcdGV4dHsxc30uJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZSAyXm4gLSAxIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZSAyXm4gLSAxJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgICAgICBfYygiYnIiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgVXNlIGJpbmFyeSBzaGlmdGluZyB0byBjb252ZXJ0IHRoZSBmb2xsb3dpbmcgYmluYXJ5IG51bWJlcnMgdG8gdGhlaXIgZGVjaW1hbCBlcXVpdmFsZW50ICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoIm9sIiwgeyBzdGF0aWNTdHlsZTogeyAibGlzdC1zdHlsZS10eXBlIjogImxvd2VyLWxhdGluIiB9IH0sIFsKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFxkaXNwbGF5c3R5bGUgKDAuMFxcb3ZlcmxpbmV7MDAxMX0pXzIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIidcXFxcZGlzcGxheXN0eWxlICgwLjBcXFxcb3ZlcmxpbmV7MDAxMX0pXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXsxMH0iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcZGlzcGxheXN0eWxlIFxcXFxmcmFjezF9ezEwfSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZSAoMC5cXG92ZXJsaW5lezEwfSlfMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxkaXNwbGF5c3R5bGUgKDAuXFxcXG92ZXJsaW5lezEwfSlfMiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFxkaXNwbGF5c3R5bGUgXFxmcmFjezJ9ezN9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZSBcXFxcZnJhY3syfXszfSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZSAoMC5cXG92ZXJsaW5lezEwMDF9KV8yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICInXFxcXGRpc3BsYXlzdHlsZSAoMC5cXFxcb3ZlcmxpbmV7MTAwMX0pXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlIFxcZnJhY3szfXs1fSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxkaXNwbGF5c3R5bGUgXFxcXGZyYWN7M317NX0nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiXFxkaXNwbGF5c3R5bGUgKDAuMDAwMDBcXG92ZXJsaW5lezExMDAwfSlfMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxkaXNwbGF5c3R5bGUgKDAuMDAwMDBcXFxcb3ZlcmxpbmV7MTEwMDB9KV8yJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZSBcXGZyYWN7M317MTI0fSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxkaXNwbGF5c3R5bGUgXFxcXGZyYWN7M317MTI0fSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZSAoMC4wXFxvdmVybGluZXsxfSlfMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxkaXNwbGF5c3R5bGUgKDAuMFxcXFxvdmVybGluZXsxfSlfMiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFxkaXNwbGF5c3R5bGUgXGZyYWN7MX17M30iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXszfSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZSAoMC4wXFxvdmVybGluZXsxfSlfMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxkaXNwbGF5c3R5bGUgKDAuMFxcXFxvdmVybGluZXsxfSlfMiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFxkaXNwbGF5c3R5bGUgXFxmcmFjezF9ezN9IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZSBcXFxcZnJhY3sxfXszfSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgX2MoImJyIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIENvbnZlcnQgdGhlIGZvbGxvd2luZyBkZWNpbWFsIG51bWJlcnMgdG8gdGhlaXIgYmluYXJ5IGVxdWl2YWxlbnQgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygib2wiLCB7IHN0YXRpY1N0eWxlOiB7ICJsaXN0LXN0eWxlLXR5cGUiOiAibG93ZXItbGF0aW4iIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIgMTkzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInIDE5MyciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMTEwMDAwMDEpXzIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxMTAwMDAwMSlfMiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIgMzc4MSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJyAzNzgxJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMTExMDExMDAwMTAxKV8yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDExMTAxMTAwMDEwMSlfMiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIwLjUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicwLjUnIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigwLjEpXzIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMC4xKV8yJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjAuODEyNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzAuODEyNSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDAuMTEwMSlfMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygwLjExMDEpXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMjIuMzEyNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzIyLjMxMjUnIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigxMDExMC4wMTAxKV8yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDEwMTEwLjAxMDEpXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiIDAuNjQwNjI1IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInIDAuNjQwNjI1JyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMC4xMDEwMDEpXzIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMC4xMDEwMDEpXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiMC4zMzIwMzEyNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzAuMzMyMDMxMjUnIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigwLjAxMDEwMTAxKV8yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDAuMDEwMTAxMDEpXzInIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiXFxkaXNwbGF5c3R5bGV7XFxmcmFjezN9ezV9fSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxkaXNwbGF5c3R5bGV7XFxcXGZyYWN7M317NX19JyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMC5cXG92ZXJsaW5lezEwMDF9KV8yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDAuXFxcXG92ZXJsaW5lezEwMDF9KV8yJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxle1xcZnJhY3s3fXsxNn19IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZXtcXFxcZnJhY3s3fXsxNn19JyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMC4wMTExKV8yIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDAuMDExMSlfMiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZXtcXGZyYWN7NX17OH19IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZXtcXFxcZnJhY3s1fXs4fX0nIgogICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigwLjEwMSlfMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJygwLjEwMSlfMiciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyLWZsdWlkIiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZXtcXGZyYWN7N317MTB9fSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxkaXNwbGF5c3R5bGV7XFxcXGZyYWN7N317MTB9fSciCiAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDAuMVxcb3ZlcmxpbmV7MDExMH0pXzIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMC4xXFxcXG92ZXJsaW5lezAxMTB9KV8yJyIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXQogICAgKSwKICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImRhcmstZ3JleS10ZXh0IG1iLTQgcHQtMyBweC0zIG14LTQiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSBwdC0yIGZvbnQtd2VpZ2h0LWJvbGQgYmx1ZS10ZXh0IiB9LAogICAgICAgIFtfdm0uX3YoIiAyLjIgUmVwcmVzZW50aW5nIE51bWJlcnMgIildCiAgICAgICksCiAgICAgIF9jKCJociIsIHsgc3RhdGljQ2xhc3M6ICJibHVlIG1iLTQgbXQtMCAiIH0pLAogICAgICBfdm0uX3YoCiAgICAgICAgIiBJbiB0aGlzIGNoYXB0ZXIgd2UgZXhwbGFpbiB0aGUgZGlmZmVyZW50IHdheXMgaW4gd2hpY2ggbnVtYmVycyBjYW4gYmUgcmVwcmVzZW50ZWQgYW5kIGhvdyBjb21wdXRlcnMgc3RvcmUgbnVtYmVycyBhbmQgd2UgZGV2ZWxvcCB0aGUgYmFzaWMgaWRlYXMgb2Ygcm91bmRvZmYgZXJyb3JzLiAiCiAgICAgICksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHktMyIgfSwgWwogICAgICAgIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIHB5LTIgZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgICAgX3ZtLl92KCIgMi4xLjIgRmxvYXRpbmctUG9pbnQgUmVwcmVzZW50YXRpb24gYW5kIEVycm9ycyAiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgVGhlIHN0YW5kYXJkIHdheSBvZiByZXByZXNlbnRpbmcgYSBwb3NpdGl2ZSByZWFsIG51bWJlciBpbiBkZWNpbWFsIGZvcm0gaXMgd2l0aCBhbiBpbnRlZ2VyIHBhcnQsIGEgZnJhY3Rpb25hbCBwYXJ0LCBhbmQgYSBkZWNpbWFsIHBvaW50IGJldHdlZW4gdGhlbSBlLmcgMTIuNDg0NTc0LCAwLjAwNDg1ODUsIDM5NDcwLjk4MjMzMS4gSW4gIgogICAgICAgICksCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgICAgX3ZtLl92KCJTY2llbnRpZmljIG5vdGF0aW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiwgbnVtYmVycyBhcmUgcmVwcmVzZW50ZWQgaW4gdGVybXMgb2YgYSAiKSwKICAgICAgICBfYygiaSIsIFtfdm0uX3YoInNpZ24iKV0pLAogICAgICAgIF92bS5fdigiLCBhbiAiKSwKICAgICAgICBfYygiaSIsIFtfdm0uX3YoImV4cG9uZW50IildKSwKICAgICAgICBfdm0uX3YoIiwgYW5kIGEgIiksCiAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJtYW50aXNzYSIpXSksCiAgICAgICAgX3ZtLl92KCIuIEZvciBleGFtcGxlLCBhbnkgbm9uemVybyBkZWNpbWFsIG51bWJlciAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgeyBuYW1lOiAia2F0ZXgiLCByYXdOYW1lOiAidi1rYXRleCIsIHZhbHVlOiAieCIsIGV4cHJlc3Npb246ICIneCciIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBjYW4gYmUgd3JpdHRlbiBpbiBhIHVuaXF1ZSB3YXkgYXMgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAieCA9IFxcc2lnbWFcXGNkb3RcXGJhcnt4fSBcXHRpbWVzIDEwXmUsXFw7XFw7XFw7XFw7XFw7IDEgXFxsZXEgXFxiYXJ7eH0gPCAxMCIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICIneCA9IFxcXFxzaWdtYVxcXFxjZG90XFxcXGJhcnt4fSBcXFxcdGltZXMgMTBeZSxcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IDEgXFxcXGxlcSBcXFxcYmFye3h9IDwgMTAnIiwKICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4yNikiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuMjYpJyIsCiAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIHdoZXJlICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICJcXHNpZ21hIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxzaWdtYSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiByZXByZXNlbnRzIHRoZSBzaWduIChpLmUgKzEgb3IgLTEpLCAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiXFxiYXJ7eH0iLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGJhcnt4fSciCiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBpcyB0aGUgbWFudGlzc2EsIGFuZCAiKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgeyBuYW1lOiAia2F0ZXgiLCByYXdOYW1lOiAidi1rYXRleCIsIHZhbHVlOiAiZSIsIGV4cHJlc3Npb246ICInZSciIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBpcyB0aGUgZXhwb25lbnQuICIpLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXQtMyBtYi00IHAtMyIsCiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNlMmUzZTUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZvbnQtd2VpZ2h0LWJvbGQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkV4YW1wbGUgMi42IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIFJlcHJlc2VudCB0aGUgZm9sbG93aW5nIG51bWJlcnMgMTIuNDg0NTc0LCAwLjAwNDg1ODUsIDM5NDcwLjk4MjMzMSBpbiBzY2llbnRpZmljIG5vdGF0aW9uICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBbnN3ZXI6IFdlIHNoaWZ0IHRoZSBkZWNpbWFsIHBvaW50IGluIHN1Y2ggYSB3YXkgdGhhdCB0aGUgbWFudGlzc2EgZmFsbHMgYmV0d2VlbiAxIGFuZCAxMC4gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9IDEyLjQ4NDU3NCAmPSArMS4yNDg0NTc0IFxcdGltZXMgMTBeMSxcXDtcXDtcXDsoXFx0ZXh0cm17U2hpZnQgZGVjaW1hbCB0byB0aGUgbGVmdCBvbmNlfSkgXFxcXCAwLjAwNDg1ODUgJj0gKzQuODU4NSBcXHRpbWVzIDEwXnstM30sXFw7XFw7XFw7KFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIHJpZ2h0IHRocmVlIHRpbWVzfSkgXFxcXCAzOTQ3MC45ODIzMzEmPSszLjk0NzA5ODIzMzEgXFx0aW1lcyAxMF57NH0sXFw7XFw7XFw7KFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgZm91ciB0aW1lc30pIFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfSAxMi40ODQ1NzQgXFwmPSArMS4yNDg0NTc0IFxcXFx0aW1lcyAxMF4xLFxcXFw7XFxcXDtcXFxcOyhcXFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgb25jZX0pIFxcXFxcXFxcIDAuMDA0ODU4NSBcXCY9ICs0Ljg1ODUgXFxcXHRpbWVzIDEwXnstM30sXFxcXDtcXFxcO1xcXFw7KFxcXFx0ZXh0cm17U2hpZnQgZGVjaW1hbCB0byB0aGUgcmlnaHQgdGhyZWUgdGltZXN9KSBcXFxcXFxcXCAzOTQ3MC45ODIzMzFcXCY9KzMuOTQ3MDk4MjMzMSBcXFxcdGltZXMgMTBeezR9LFxcXFw7XFxcXDtcXFxcOyhcXFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgZm91ciB0aW1lc30pIFxcXFxlbmR7YWxpZ25lZH0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJiciIpCiAgICAgICAgICBdCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBBbm90aGVyIGZvcm0sIGNhbGxlZCB0aGUgIiksCiAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgICAgX3ZtLl92KCIgbm9ybWFsaXplZCBzY2llbnRpZmljIG5vdGF0aW9uICIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgaXMgb2J0YWluZWQgYnkgc2hpZnRpbmcgdGhlIGRlY2ltYWwgcG9pbnQgYW5kIHN1cHBseWluZyB0aGUgYXBwcm9wcmlhdGUgcG93ZXJzIG9mIDEwLiBJbiB0aGlzIHR5cGUgb2YgcmVwcmVzZW50YXRpb24sIHRoZSBudW1iZXIgaXMgcmVwcmVzZW50ZWQgYnkgYSBmcmFjdGlvbiBtdWx0aXBsaWVkIGJ5ICIKICAgICAgICApLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgdmFsdWU6ICIxMF5uIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzEwXm4nIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiwgYW5kIHRoZSBsZWFkaW5nIGRpZ2l0IGluIHRoZSBmcmFjdGlvbiBpcyBub3QgemVyby4gRm9yIGV4YW1wbGUsIGFueSBub256ZXJvIGRlY2ltYWwgbnVtYmVyICIKICAgICAgICApLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJrYXRleCIsIHJhd05hbWU6ICJ2LWthdGV4IiwgdmFsdWU6ICJ4IiwgZXhwcmVzc2lvbjogIid4JyIgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGNhbiBiZSB3cml0dGVuIGluIGEgdW5pcXVlIHdheSBhcyAiKSwKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICJ4ID0gXFxzaWdtYVxcY2RvdFxcYmFye3h9IFxcdGltZXMgMTBeZSxcXDtcXDtcXDtcXDtcXDsgXFxmcmFjezF9ezEwfSBcXGxlcSBcXGJhcnt4fSA8IDEiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAiJ3ggPSBcXFxcc2lnbWFcXFxcY2RvdFxcXFxiYXJ7eH0gXFxcXHRpbWVzIDEwXmUsXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcOyBcXFxcZnJhY3sxfXsxMH0gXFxcXGxlcSBcXFxcYmFye3h9IDwgMSciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigyLjI3KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4yNyknIiwKICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBUaHVzLCB0aGUgbnVtYmVycyBpbiBleGFtcGxlIDIuNiBoYXZlIHRoZSBmb2xsb3dpbmcgcmVwcmVzZW50YXRpb25zICIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9IDEyLjQ4NDU3NCAmPSAwLjEyNDg0NTc0IFxcdGltZXMgMTBeMixcXDtcXDtcXDsoXFx0ZXh0cm17U2hpZnQgZGVjaW1hbCB0byB0aGUgbGVmdCB0d28gdGltZXN9KSBcXFxcIDAuMDA0ODU4NSAmPSAwLjQ4NTg1IFxcdGltZXMgMTBeey0yfSxcXDtcXDtcXDsoXFx0ZXh0cm17U2hpZnQgZGVjaW1hbCB0byB0aGUgcmlnaHQgdHdvIHRpbWVzfSkgXFxcXCAzOTQ3MC45ODIzMzEmPTAuMzk0NzA5ODIzMzEgXFx0aW1lcyAxMF57NX0sXFw7XFw7XFw7KFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgZml2ZSB0aW1lc30pIFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgIidcXFxcYmVnaW57YWxpZ25lZH0gMTIuNDg0NTc0IFxcJj0gMC4xMjQ4NDU3NCBcXFxcdGltZXMgMTBeMixcXFxcO1xcXFw7XFxcXDsoXFxcXHRleHRybXtTaGlmdCBkZWNpbWFsIHRvIHRoZSBsZWZ0IHR3byB0aW1lc30pIFxcXFxcXFxcIDAuMDA0ODU4NSBcXCY9IDAuNDg1ODUgXFxcXHRpbWVzIDEwXnstMn0sXFxcXDtcXFxcO1xcXFw7KFxcXFx0ZXh0cm17U2hpZnQgZGVjaW1hbCB0byB0aGUgcmlnaHQgdHdvIHRpbWVzfSkgXFxcXFxcXFwgMzk0NzAuOTgyMzMxXFwmPTAuMzk0NzA5ODIzMzEgXFxcXHRpbWVzIDEwXns1fSxcXFxcO1xcXFw7XFxcXDsoXFxcXHRleHRybXtTaGlmdCBkZWNpbWFsIHRvIHRoZSBsZWZ0IGZpdmUgdGltZXN9KSBcXFxcZW5ke2FsaWduZWR9JyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgSW4gdGhlIGNvbnRleHQgb2YgY29tcHV0ZXIgc2NpZW5jZSwgbm9ybWFsaXplZCBzY2llbnRpZmljIG5vdGF0aW9uIGlzIGFsc28gY2FsbGVkICIKICAgICAgICApLAogICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogImZvbnQtd2VpZ2h0LWJvbGQiIH0sIFsKICAgICAgICAgIF92bS5fdigiIG5vcm1hbGl6ZWQgZmxvYXRpbmcgcG9pbnQtcmVwcmVzZW50YXRpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIEluIGEgY29tcHV0ZXIncyBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiwgYWxsIG5vbnplcm8gZmxvYXRpbmctcG9pbnQgbnVtYmVyIGFyZSBub3JtYWxpc2VkIHdpdGggYmFzZXMgb2YgMiwgaS5lIHVzaW5nIHRoZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiaSIsIFtfdm0uX3YoImJpbmFyeSBzeXN0ZW0iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIFRoZSBmbG9hdGluZyBwb2ludCByZXByZXNlbnRhdGlvbiBpbiB0aGUgYmluYXJ5IHN5c3RlbSBpcyBzaW1pbGFyIHRvIHRoYXQgaW4gdGhlIGRlY2ltYWwgc3lzdGVtLiBJZiAiCiAgICAgICAgKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgeyBuYW1lOiAia2F0ZXgiLCByYXdOYW1lOiAidi1rYXRleCIsIHZhbHVlOiAieCIsIGV4cHJlc3Npb246ICIneCciIH0KICAgICAgICAgIF0KICAgICAgICB9KSwKICAgICAgICBfdm0uX3YoIiBpcyBhIG5vbi16ZXJvIG51bWJlciwgaXQgY2FuIGJlIHdyaXR0ZW4gYXMgIiksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAieCA9IFxccG0gcSBcXHRpbWVzIDJebSxcXDtcXDtcXDtcXDtcXDtcXDsgXFxsZWZ0KFxcZnJhY3sxfXsyfSBcXGxlcSBxIDwgMSBcXHJpZ2h0KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICIneCA9IFxcXFxwbSBxIFxcXFx0aW1lcyAyXm0sXFxcXDtcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7IFxcXFxsZWZ0KFxcXFxmcmFjezF9ezJ9IFxcXFxsZXEgcSA8IDEgXFxcXHJpZ2h0KSciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIigyLjI4KSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4yOCknIiwKICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgVGhlIG1hbnRpc3NhICIpLAogICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7IG5hbWU6ICJrYXRleCIsIHJhd05hbWU6ICJ2LWthdGV4IiwgdmFsdWU6ICJxIiwgZXhwcmVzc2lvbjogIidxJyIgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigiIGlzIGV4cHJlc3NlZCBhcyBhIHNlcXVlbmNlIG9mIHplcm9zIG9yIG9uZXMgaW4gdGhlIGZvcm0gIiksCiAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgdmFsdWU6ICIgcSA9IDAuYl8xYl8yYl8zIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJyBxID0gMC5iXzFiXzJiXzMnIiwKICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIgd2hlcmUgIiksCiAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICB2YWx1ZTogImJfMSBcXG5lcSAwIiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2JfMSBcXFxcbmVxIDAnIgogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSksCiAgICAgICAgX3ZtLl92KCIuICIpLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBUbyBhIGNvbXB1dGVyLCB0aGUgYWJpbGl0eSB0byBjb21wbGV0ZWx5IHJlcHJlc2VudCBhIG51bWJlcidzIG1hbnRpc3NhIGFuZCBleHBvbmVudCBpcyBsaW1pdGVkLiBBcyBhIHJlc3VsdCBtb3N0IHJlYWwgbnVtYmVycyBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgZXhhY3RseSBpbiBhIGNvbXB1dGVyLiBGdXJ0aGVybW9yZSwgbnVtYmVycyBtYXkgYmUgZWl0aGVyIHRvbyBsYXJnZSBvciB0b28gc21hbGwgdG8gYmUgcmVwcmVzZW50YWJsZS4gVGhlIHJlYWwgbnVtYmVycyB0aGF0IGFyZSByZXByZXNlbnRhYmxlIGluIGEgY29tcHV0ZXIgYXJlIGNhbGxlZCAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJkZWVwIiwgW192bS5fdigibWFjaGluZSBudW1iZXJzIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICcuIEEgY29tcHV0ZXIgd2lsbCBkZXNpZ25hdGUgYSBmaW5pdGUgbnVtYmVyIG9mIGJpbmFyeSAiYml0cyIgdG8gcmVwcmVzZW50IGEgbnVtYmVyIChpLmUgaXQgdXNlcyBhIGRpc2NyZXRlIHNldCBvZiBudW1iZXJzIG5vdCBhIGNvbnRpbnV1bSkuIFRvIGlsbHVzdHJhdGUsIGxldCB1cyB0YWtlIGFuIGV4YW1wbGUsIGluIHdoaWNoIHRoZSBmbG9hdGluZy1wb2ludCBudW1iZXJzIG11c3QgYmUgb2YgdGhlIGZvcm0gJwogICAgICAgICAgICApLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ4ID0gXFxwbSAoMC5iXzFiXzIpIFxcdGltZXMgMl57XFxwbSBtfSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIneCA9IFxcXFxwbSAoMC5iXzFiXzIpIFxcXFx0aW1lcyAyXntcXFxccG0gbX0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiLCB3aGVyZSAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiYl8xIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidiXzEnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAiYl8yIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidiXzInIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAibSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInbSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgYXJlIGFsbG93ZWQgdG8gaGF2ZSBvbmx5IHRoZSB2YWx1ZSAwIG9yIDEuICIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtdC0zIG1iLTQgcC0zIiwKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2UyZTNlNSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiRXhhbXBsZSAyLjciKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgTGlzdCBhbGwgdGhlIGZsb2F0aW5nLXBvaW50IG51bWJlcnMgdGhhdCBjYW4gYmUgZXhwcmVzc2VkIGluIHRoZSBmb3JtICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAieCA9IFxccG0gKDAuYl8xYl8yKV8yIFxcdGltZXMgMl57XFxwbSBrfSxcXDtcXDtcXDtcXDtcXDtcXDsoayxiX2kgXFxpbiBcXHsgMCwgMVxcfSkiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICIneCA9IFxcXFxwbSAoMC5iXzFiXzIpXzIgXFxcXHRpbWVzIDJee1xcXFxwbSBrfSxcXFxcO1xcXFw7XFxcXDtcXFxcO1xcXFw7XFxcXDsoayxiX2kgXFxcXGluIFxcXFx7IDAsIDFcXFxcfSknIiwKICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiBBbnN3ZXI6IFRoZXJlIGFyZSB0d28gY2hvaWNlcyBmb3IgdGhlICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXHBtIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxccG0nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiLCB0d28gY2hvaWNlcyBmb3IgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogImJfMSIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInYl8xJyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfdm0uX3YoIiwgdHdvIGNob2ljZXMgZm9yICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJiXzIiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2JfMiciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgYW5kIHRocmVlIGNob2ljZXMgZm9yIHRoZSBleHBvbmVudC4gVGh1cywgYXQgZmlyc3Qgb25lIHdvdWxkIGV4cGVjdCAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIjIgXFx0aW1lcyAyIFxcdGltZXMgMiBcXHRpbWVzIDM9MjQiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJzIgXFxcXHRpbWVzIDIgXFxcXHRpbWVzIDIgXFxcXHRpbWVzIDM9MjQnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGRpZmZlcmVudCBudW1iZXJzLiBIb3dldmVyLCB0aGVyZSBpcyBzb21lIGR1cGxpY2F0aW9uLiBGb3IgZXhhbXBsZSwgdGhlIHBvc2l0aXZlIG51bWJlcnMgYXJlIGFzIGZvbGxvd3MgIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FycmF5fXtjY2NjY2NjY2NjY2NjfSAwLjAwIFxcdGltZXMgMl4wICY9JjAgJn5+Jn5+JjAuMDAgXFx0aW1lcyAyXjEgJiA9ICYgMCAmfn4mfn4wLjAwIFxcdGltZXMgMl57LTF9ID0gMCBcXFxcIFxcXFwgMC4wMSBcXHRpbWVzIDJeMCAmPSYgIFxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXs0fSAmfn4mfn4mMC4wMSBcXHRpbWVzIDJeMSAmID0gJiBcXGRpc3BsYXlzdHlsZSBcXGZyYWN7MX17Mn0gJn5+Jn5+MC4wMSBcXHRpbWVzIDJeey0xfSA9IFxcZGlzcGxheXN0eWxlICBcXGZyYWN7MX17OH0gXFxcXCBcXFxcIDAuMTAgXFx0aW1lcyAyXjAgJj0mIFxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXsyfSAmfn4mfn4mMC4xMCBcXHRpbWVzIDJeMSAmID0gJjEgJn5+Jn5+MC4xMCBcXHRpbWVzIDJeey0xfSA9IFxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXs0fSBcXFxcIFxcXFwgMC4xMSBcXHRpbWVzIDJeMCAmPSYgXFxkaXNwbGF5c3R5bGUgXFxmcmFjezN9ezR9ICZ+fiZ+fiYwLjExIFxcdGltZXMgMl4xICYgPSAmIFxcZGlzcGxheXN0eWxlIFxcZnJhY3szfXsyfSAmfn4mfn4wLjExIFxcdGltZXMgMl57LTF9ICA9IFxcZGlzcGxheXN0eWxlIFxcZnJhY3szfXs4fVxcXFwgXFxlbmR7YXJyYXl9IiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthcnJheX17Y2NjY2NjY2NjY2NjY30gMC4wMCBcXFxcdGltZXMgMl4wIFxcJj1cXCYwIFxcJn5+XFwmfn5cXCYwLjAwIFxcXFx0aW1lcyAyXjEgXFwmID0gXFwmIDAgXFwmfn5cXCZ+fjAuMDAgXFxcXHRpbWVzIDJeey0xfSA9IDAgXFxcXFxcXFwgXFxcXFxcXFwgMC4wMSBcXFxcdGltZXMgMl4wIFxcJj1cXCYgIFxcXFxkaXNwbGF5c3R5bGUgXFxcXGZyYWN7MX17NH0gXFwmfn5cXCZ+flxcJjAuMDEgXFxcXHRpbWVzIDJeMSBcXCYgPSBcXCYgXFxcXGRpc3BsYXlzdHlsZSBcXFxcZnJhY3sxfXsyfSBcXCZ+flxcJn5+MC4wMSBcXFxcdGltZXMgMl57LTF9ID0gXFxcXGRpc3BsYXlzdHlsZSAgXFxcXGZyYWN7MX17OH0gXFxcXFxcXFwgXFxcXFxcXFwgMC4xMCBcXFxcdGltZXMgMl4wIFxcJj1cXCYgXFxcXGRpc3BsYXlzdHlsZSBcXFxcZnJhY3sxfXsyfSBcXCZ+flxcJn5+XFwmMC4xMCBcXFxcdGltZXMgMl4xIFxcJiA9IFxcJjEgXFwmfn5cXCZ+fjAuMTAgXFxcXHRpbWVzIDJeey0xfSA9IFxcXFxkaXNwbGF5c3R5bGUgXFxcXGZyYWN7MX17NH0gXFxcXFxcXFwgXFxcXFxcXFwgMC4xMSBcXFxcdGltZXMgMl4wIFxcJj1cXCYgXFxcXGRpc3BsYXlzdHlsZSBcXFxcZnJhY3szfXs0fSBcXCZ+flxcJn5+XFwmMC4xMSBcXFxcdGltZXMgMl4xIFxcJiA9IFxcJiBcXFxcZGlzcGxheXN0eWxlIFxcXFxmcmFjezN9ezJ9IFxcJn5+XFwmfn4wLjExIFxcXFx0aW1lcyAyXnstMX0gID0gXFxcXGRpc3BsYXlzdHlsZSBcXFxcZnJhY3szfXs4fVxcXFxcXFxcIFxcXFxlbmR7YXJyYXl9JyIsCiAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgVGhlIHBvc2l0aXZlIG51bWJlcnMgb2J0YWluZWQgYXJlIHNob3duIG9uIHRoZSBsaW5lIGJlbG93ICIKICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX2MoCiAgICAgICAgICAic3ZnIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICB2ZXJzaW9uOiAiMS4wIiwKICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICB3aWR0aDogIiIsCiAgICAgICAgICAgICAgaGVpZ2h0OiAiIiwKICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDEwOTkuMDAwMDAwIDExMC4wMDAwMDAiLAogICAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICJ4TWlkWU1pZCBtZWV0IgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOgogICAgICAgICAgICAgICAgICAgICJ0cmFuc2xhdGUoMC4wMDAwMDAsMTEwLjAwMDAwMCkgc2NhbGUoMC4xMDAwMDAsLTAuMTAwMDAwKSIsCiAgICAgICAgICAgICAgICAgIGZpbGw6ICIjMDAwMDAwIiwKICAgICAgICAgICAgICAgICAgc3Ryb2tlOiAibm9uZSIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTE5ODkgMTAxNiBjLTQgLTQgLTQgLTI3IC0xIC01MiAzIC0zMyAxIC00OSAtOSAtNTUgLTEwIC02IC01IC05IDE2XG4tOSAxNyAwIDI1IDMgMTggOCAtNiA0IC0xMyAzMSAtMTUgNjEgLTIgMjkgLTYgNTAgLTkgNDd6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTI4NTMgMTAxNCBjMjAgLTYgMjMgLTM0IDUgLTUyIC05IC05IC05IC0xMiAxIC0xMiA5IDAgMTIgLTkgOSAtMjRcbi00IC0xNyAtMSAtMjMgOSAtMTkgMTQgNiAxNyAyNSA2IDM3IC01IDQgLTggMjIgLTggMzkgMCAyNCAtNSAzMiAtMjAgMzQgLTE1XG4xIC0xNiAxIC0yIC0zeiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0zNzA5IDEwMTYgYy00IC00IC00IC0yNyAtMSAtNTIgMyAtMzMgMSAtNDkgLTkgLTU1IC0xMCAtNiAtNSAtOSAxNlxuLTkgMTcgMCAyNSAzIDE4IDggLTYgNCAtMTMgMzEgLTE1IDYxIC0yIDI5IC02IDUwIC05IDQ3eiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0xMDU1MyAxMDA1IGMtMyAtOSAtMyAtMTggLTEgLTIxIDMgLTMgOCA0IDExIDE2IDYgMjMgLTEgMjcgLTEwIDV6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTEwNTg5IDEwMDYgYzkgLTEwIDEwIC0yMCAzIC0zMiAtNyAtMTIgLTYgLTI0IDIgLTM2IDkgLTE1IDggLTIxIC00XG4tMjggLTggLTUgLTEwIC0xMCAtNCAtMTAgMjAgMCAzOSAyOSAyNiA0MiAtNiA2IC04IDIzIC01IDM4IDMgMjAgMCAyOSAtMTIgMzRcbi0xNSA1IC0xNiA0IC02IC04eiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0xMTMyIDk2MyBjLTEgLTMwIC03IC01MyAtMTQgLTU2IC03IC0zIDEgLTYgMTcgLTYgMTcgMCAyNSAzIDE4IDdcbi02IDQgLTEzIDMwIC0xNiA1NyBsLTMgNTAgLTIgLTUyeiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0yODIxIDk5NCBjMCAtMTEgMyAtMTQgNiAtNiAzIDcgMiAxNiAtMSAxOSAtMyA0IC02IC0yIC01IC0xM3oiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICJNMjM0IDkwNCBjLTkgLTIyIC0xMiAtNDggLTggLTcwIDExIC01OCAyMSAtNDcgMjAgMjIgLTEgNDcgMyA2NyAxNFxuNzQgMTEgNyAxMSAxMCAyIDEwIC03IDAgLTIwIC0xNiAtMjggLTM2eiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk03MTI1IDkyOSBjLTE3IC02IC0xNyAtOCAtMiAtOCAxNCAtMSAxNyAtMTEgMTcgLTY1IDAgLTUzIC0zIC02NVxuLTE3IC02OSAtMTAgLTMgMCAtNSAyMiAtNSAyMiAwIDM0IDIgMjggNSAtOSAzIC0xMyAyOCAtMTMgNzMgMCAzOCAtMyA3MSAtN1xuNzMgLTUgMyAtMTcgMSAtMjggLTR6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTMwNCA4NTkgYzAgLTQ1IDMgLTY2IDEwIC01OSAxMiAxMiAxMiA5MCAwIDExMiAtNiAxMSAtOSAtNSAtMTAgLTUzeiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0yODIwIDkyMSBjMCAtNiA0IC0xMyAxMCAtMTYgNiAtMyA3IDEgNCA5IC03IDE4IC0xNCAyMSAtMTQgN3oiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICJNMTA1NDAgOTE5IGMwIC01IDUgLTcgMTAgLTQgNiAzIDEwIDggMTAgMTEgMCAyIC00IDQgLTEwIDQgLTUgMCAtMTBcbi01IC0xMCAtMTF6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTExMDggODUzIGMxOCAtMiA0NSAtMiA2MCAwIDE1IDIgMCA0IC0zMyA0IC0zMyAwIC00NSAtMiAtMjcgLTR6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTE5NjggODUzIGMxOCAtMiA0NSAtMiA2MCAwIDE1IDIgMCA0IC0zMyA0IC0zMyAwIC00NSAtMiAtMjcgLTR6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTI4MjggODUzIGMxOCAtMiA0NSAtMiA2MCAwIDE1IDIgMCA0IC0zMyA0IC0zMyAwIC00NSAtMiAtMjcgLTR6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTM2ODggODUzIGMxOCAtMiA0NSAtMiA2MCAwIDE1IDIgMCA0IC0zMyA0IC0zMyAwIC00NSAtMiAtMjcgLTR6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTEwNTUzIDg1MyBjMTUgLTIgMzkgLTIgNTUgMCAxNSAyIDIgNCAtMjggNCAtMzAgMCAtNDMgLTIgLTI3IC00eiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0yMDAxIDgyMCBjLTIgLTggLTIgLTI3IC0xIC00MiAxIC0yMiAtMyAtMjcgLTI3IC0zMSBsLTI4IC00IDI4IC0yXG5jMjggLTEgMzcgLTE1IDE1IC0yNCAtNyAtMyAxIC02IDE3IC02IDIzIC0xIDI3IDIgMTUgOSAtMTMgOSAtMTMgMTEgMCAyMCA5IDZcbjEwIDEwIDMgMTAgLTcgMCAtMTQgMTkgLTE2IDQzIC0yIDIzIC01IDM1IC02IDI3eiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0yODYwIDgyNiBjMCAtMiA4IC0xMCAxOCAtMTcgMTUgLTEzIDE2IC0xMiAzIDQgLTEzIDE2IC0yMSAyMSAtMjFcbjEzeiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0zNjg2IDgyMiBjLTMgLTUgNSAtOCAxNyAtOCAxOSAxIDIyIC00IDIwIC0zMiAtMSAtMjcgMSAtMzEgMTMgLTIxXG4xNyAxNCAxOCA0MSAyIDU3IC0xNCAxNCAtNDQgMTYgLTUyIDR6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTEwNTUyIDgxOCBjLTE1IC0xNSAtMTYgLTM4IC0yIC0zOCA2IDAgMTAgOCA4IDE4IC0yIDExIDMgMTcgMTcgMTdcbjMzIDAgMzAgLTM0IC02IC03MSBsLTMzIC0zNCAzNyAwIGMyMCAwIDM3IDQgMzcgOSAwIDUgLTkgNyAtMjAgNCAtMTEgLTMgLTIwXG4tMSAtMjAgNCAwIDYgOSAxOCAyMCAyOCAyNCAyMiAyNiA2MCA0IDY5IC0yMiA4IC0yOCA4IC00MiAtNnoiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICJNMTE2MSA4MDggYy0xIC0yNiAtMjAgLTMyIC00MiAtMTIgLTIwIDE4IC0yNyA2IC04IC0xMyA4IC04IDggLTEzIDBcbi0xNyAtNiAtNCAtMTEgLTE3IC0xMCAtMjkgMSAtMjAgMiAtMjAgOCAzIDQgMTQgMTMgMjUgMjEgMjUgOCAwIDIwIC0xMSAyN1xuLTI1IDEyIC0yNCAxMyAtMjQgMTMgLTMgMCAxMiAtNSAyNSAtMTAgMjggLTggNSAtNyAxMSAwIDIxIDcgNyAxMCAxOSA3IDI2IC00XG44IC02IDcgLTYgLTR6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTI4MjAgODA4IGMwIC05IDUgLTIwIDEwIC0yMyA4IC01IDcgLTEyIC0yIC0yMyAtMTIgLTE1IC0xMSAtMTUgNFxuLTQgMTQgMTEgMjAgMTAgMzcgLTcgMTUgLTE1IDIxIC0xNyAyMSAtNyAwIDggLTUgMTggLTEwIDIxIC02IDQgLTggMTEgLTUgMTZcbjMgNSAwIDYgLTggMyAtOSAtMyAtMjIgNCAtMzEgMTggLTEyIDE3IC0xNiAxOSAtMTYgNnoiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICJNMzY3NSA3OTAgYzMgLTUgOCAtMTAgMTEgLTEwIDIgMCA0IDUgNCAxMCAwIDYgLTUgMTAgLTExIDEwIC01IDAgLTdcbi00IC00IC0xMHoiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICJNMjgyMiA3MjQgYzEwIC0xMCAyMCAtMTYgMjIgLTEzIDMgMyAtNSAxMSAtMTcgMTggLTIxIDEzIC0yMSAxMiAtNVxuLTV6IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAiTTM3NDAgNzMxIGMwIC05IC05IC0xMiAtMjUgLTkgLTE0IDMgLTI4IDEgLTMxIC0zIC0zIC01IDggLTkgMjUgLTlcbjI5IDAgNDkgMTUgMzcgMjcgLTMgNCAtNiAxIC02IC02eiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgIk0yMjkgNTk1IGMtMTQgLTggLTMyIC0yOCAtMzkgLTQ1IC0xNyAtNDIgNSAtOTEgNTAgLTExMCAyNyAtMTEgMzZcbi0xMSA2NSAzIDE4IDkgMzYgMjUgNDAgMzYgNiAyMSAxMiAyMSAzNTUgMjEgMzQzIDAgMzQ5IDAgMzU1IC0yMSA0IC0xMSAyMlxuLTI3IDQxIC0zNiAzMSAtMTUgMzcgLTE1IDY4IDAgMTkgOSAzNyAyNSA0MSAzNiA2IDIxIDEyIDIxIDM1NSAyMSAzNDMgMCAzNDlcbjAgMzU1IC0yMSA0IC0xMSAyMiAtMjcgNDEgLTM2IDMxIC0xNSAzNyAtMTUgNjggMCAxOSA5IDM3IDI1IDQxIDM2IDYgMjEgMTJcbjIxIDM1NSAyMSAzNDMgMCAzNDkgMCAzNTUgLTIxIDQgLTExIDIyIC0yNyA0MSAtMzYgMzEgLTE1IDM3IC0xNSA2OCAwIDE5IDlcbjM3IDI1IDQxIDM2IDYgMjEgMTIgMjEgMzU1IDIxIDM0MyAwIDM0OSAwIDM1NSAtMjEgNCAtMTEgMjIgLTI3IDQxIC0zNiAzMVxuLTE1IDM3IC0xNSA2OCAwIDE5IDkgMzcgMjUgNDEgMzYgbDYgMjEgMTYzNCAwIDE2MzQgMCA2IC0yMSBjNCAtMTEgMjIgLTI3IDQxXG4tMzYgMzEgLTE1IDM3IC0xNSA2OCAwIDE5IDkgMzcgMjUgNDEgMzYgbDYgMjEgMTYzNCAwIDE2MzQgMCA2IC0yMSBjNCAtMTEgMjJcbi0yNyA0MSAtMzYgMzEgLTE1IDM3IC0xNSA2NyAtMSA3MCAzNCA3MCAxMjIgMCAxNTYgLTMwIDE0IC0zNiAxNCAtNjcgLTEgLTE5XG4tOSAtMzcgLTI1IC00MSAtMzYgbC02IC0yMSAtMTYzNCAwIC0xNjM0IDAgLTYgMjEgYy00IDExIC0yMiAyNyAtNDEgMzYgLTMxXG4xNSAtMzcgMTUgLTY4IDAgLTE5IC05IC0zNyAtMjUgLTQxIC0zNiBsLTYgLTIxIC0xNjM0IDAgLTE2MzQgMCAtNiAyMSBjLTQgMTFcbi0yMiAyNyAtNDEgMzYgLTMxIDE1IC0zNyAxNSAtNjggMCAtMTkgLTkgLTM3IC0yNSAtNDEgLTM2IC02IC0yMSAtMTIgLTIxXG4tMzU1IC0yMSAtMzQzIDAgLTM0OSAwIC0zNTUgMjEgLTQgMTEgLTIyIDI3IC00MSAzNiAtMzEgMTUgLTM3IDE1IC02OCAwIC0xOVxuLTkgLTM3IC0yNSAtNDEgLTM2IC02IC0yMSAtMTIgLTIxIC0zNTUgLTIxIC0zNDMgMCAtMzQ5IDAgLTM1NSAyMSAtNCAxMSAtMjJcbjI3IC00MSAzNiAtMzEgMTUgLTM3IDE1IC02OCAwIC0xOSAtOSAtMzcgLTI1IC00MSAtMzYgLTYgLTIxIC0xMiAtMjEgLTM1NVxuLTIxIC0zNDMgMCAtMzQ5IDAgLTM1NSAyMSAtNCAxMSAtMjIgMjcgLTQxIDM2IC0zMSAxNSAtMzcgMTUgLTY4IDAgLTE5IC05XG4tMzcgLTI1IC00MSAtMzYgLTYgLTIxIC0xMiAtMjEgLTM1NSAtMjEgLTM0MSAwIC0zNDkgMCAtMzU1IDIwIC02IDIwIC01MyA1MFxuLTc3IDUwIC03IC0xIC0yNSAtNyAtMzkgLTE1eiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF9jKAogICAgICAgICAgInAiLAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBbHRvZ2V0aGVyIHRoZXJlIGFyZSB0aGlydGVlbiBkaXN0aW5jdCBudW1iZXJzIGluIHRoZSBzeXN0ZW0uIE9uZSBkcmF3YmFjayBhc3NvY2lhdGVkIHdpdGggdGhlIHJlcHJlc2VudGFibGUgbnVtYmVycyBiZWluZyBhIGZpbml0ZSBzZXQgaXMgdGhhdCBpdCBpcyBhbHNvICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJib3VuZGVkIildKSwKICAgICAgICAgICAgX3ZtLl92KCIuIElmIGluIHRoZSBjb3Vyc2Ugb2YgYSBjb21wdXRhdGlvbiwgYSBudW1iZXIgIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIngiLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3gnIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigiIGlzIHByb2R1Y2VkIGluIHRoZSBmb3JtICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ4XFxwbSBxIFxcdGltZXMgMl5tIiwKICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIid4XFxcXHBtIHEgXFxcXHRpbWVzIDJebSciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIsIHRoZW4gd2UgaGF2ZSAiKSwKICAgICAgICAgICAgX2MoImRlZXAiLCBbX3ZtLl92KCJvdmVyZmxvdyIpXSksCiAgICAgICAgICAgIF92bS5fdigiIHdoZW4gIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIm0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ20nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGlzIG91dHNpZGUgdGhlIHBvc2l0aXZlIGVuZCBvZiB0aGUgY29tcHV0ZXIncyBwZXJtaXNzaWJsZSByYW5nZSBhbmQgYW4gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygiZGVlcCIsIFtfdm0uX3YoInVuZGVyZmxvdyIpXSksCiAgICAgICAgICAgIF92bS5fdigiIHdoZW4gIiksCiAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICB2YWx1ZTogIm0iLAogICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ20nIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIGlzIGJleW9uZCB0aGUgbmVnYXRpdmUgZW5kIG9mIHRoZSBleHBvbmVudGlhbCByYW5nZS4gR2VuZXJhbGx5IGFuICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJvdmVyZmxvdyIpXSksCiAgICAgICAgICAgIF92bS5fdigiIHJlc3VsdHMgaW4gYSAiKSwKICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJmYXRhbCBlcnJvciIpXSksCiAgICAgICAgICAgIF92bS5fdigiIChvciAiKSwKICAgICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCIgZXhjZXB0aW9uIildKSwKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIpIGFuZCBub3JtYWwgZXhlY3V0aW9uIG9mIHRoZSBwcm9ncmFtIHN0b3BzLiBBbiB1bmRlcmZsb3csIGhvd2V2ZXIsIGlzIHRyZWF0ZWQgYXV0b21hdGljYWxseSBieSBzZXR0aW5nICIKICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgIHZhbHVlOiAieCIsCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIneCciCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX3ZtLl92KCIgdG8gemVybyB3aXRob3V0IGFueSBpbnRlcnJ1cHRpb24gb2YgdGhlIHByb2dyYW0uICIpCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBJbiBhIGNvbXB1dGVyIHdob3NlIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgYXJlIHJlc3RyaWN0ZWQgdG8gdGhlIGZvcm0gaW4gZXhhbXBsZSAyLjcsIGFueSBudW1iZXIgY2xvc2VyIHRvIHplcm8gdGhhbiAiCiAgICAgICAgKSwKICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgIHZhbHVlOiAiXFxmcmFjezF9ezh9IiwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ1xcXFxmcmFjezF9ezh9JyIKICAgICAgICAgICAgfQogICAgICAgICAgXQogICAgICAgIH0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgd291bGQgdW5kZXJmbG93IHRvIHplcm8sIGFuZCBhbnkgbnVtYmVyIG91dHNpZGUgdGhlIHJhbmdlIC0xLjUgdG8gMS41IHdvdWxkIG92ZXJmbG93IHRvIG1hY2hpbmUgaW5maW5pdHkuICIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7IHN0YXRpY0NsYXNzOiAicHktMyIgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiaDQiLCB7IHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSBmb250LXdlaWdodC1ib2xkIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiIDIuMi4yIFNpbmdsZS1QcmVjaXNpb24gZmxvYXRpbmcgcG9pbnQgZm9ybSAiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgVGhlIElFRUUgKEluc3RpdHV0ZSBvZiBFbGVjdHJpY2FsIGFuZCBFbGVjdHJvbmljcyBFbmdpbmVlcnMpIGhhcyBwcm9kdWNlZCBhIHN0YW5kYXJkIGZvciBmbG9hdGluZyBwb2ludCBhcml0aG1ldGljLiBUaGlzIHN0YW5kYXJkIHNwZWNpZmllcyBob3cgc2luZ2xlIHByZWNpc2lvbiAoMzIgYml0KSBhbmQgZG91YmxlIHByZWNpc2lvbiAoNjQgYml0KSBmbG9hdGluZyBwb2ludCBudW1iZXJzIGFyZSB0byBiZSByZXByZXNlbnRlZCwgYXMgd2VsbCBhcyBob3cgYXJpdGhtZXRpYyBzaG91bGQgYmUgY2FycmllZCBvdXQgb24gdGhlbS4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBUaGUgSUVFRSBzaW5nbGUgcHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50IHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uIHJlcXVpcmVzIGEgMzIgYml0IHdvcmQsIHdoaWNoIG1heSBiZSByZXByZXNlbnRlZCBhcyBudW1iZXJlZCBmcm9tIDAgdG8gMzEsIGxlZnQgdG8gcmlnaHQuIFRoZSBmaXJzdCBiaXQgaXMgdGhlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoInNpZ24gYml0IildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgIHZhbHVlOiAicyIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3MnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSksCiAgICAgICAgICBfdm0uX3YoIiwgdGhlIG5leHQgZWlnaHQgYml0cyBhcmUgdGhlICIpLAogICAgICAgICAgX2MoImkiLCBbX3ZtLl92KCJleHBvbmVudCBiaXRzIildKSwKICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgIF9jKCJpIiwgW192bS5fdigiZSIpXSksCiAgICAgICAgICBfdm0uX3YoIiwgYW5kIHRoZSBmaW5hbCAyMyBiaXRzIGFyZSB0aGUgZnJhY3Rpb24gIiksCiAgICAgICAgICBfYygiaSIsIFtfdm0uX3YoImYiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLiBJbiBzaW5nbGUtcHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50IGEgbWFjaGluZSBudW1iZXIgY2FuIGJlIHJlcHJlc2VudGVkIGFzICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoLTEpXnMgXFx0aW1lcyAyXntlLTEyN31cXHRpbWVzICgxLmYpXzIiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICAgIicoLTEpXnMgXFxcXHRpbWVzIDJee2UtMTI3fVxcXFx0aW1lcyAoMS5mKV8yJyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbCIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiKDIuMjkpIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInKDIuMjkpJyIsCiAgICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiBOb3RlIHRoYXQgIiksCiAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogInMgPSAwIiwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIncyA9IDAnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSksCiAgICAgICAgICBfdm0uX3YoIiBjb3JyZXNwb25kcyB0byBhIHBvc2l0aXZlIG1hbnRpc3NhIGFuZCAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgIHZhbHVlOiAicz0xIiwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIncz0xJyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGNvcnJlc3BvbmRzIHRvIGEgbmVnYXRpdmUgbWFudGlzc2EuIEVhY2ggZmxvYXRpbmcgcG9pbnQgc2luZ2xlIHByZWNpc2lvbiB3b3JkIGlzIHBhcnRpdGlvbmVkIGFzIGluIHRoZSBkaWFncmFtIGJlbG93OiAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJzdmciLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHZlcnNpb246ICIxLjAiLAogICAgICAgICAgICAgICAgeG1sbnM6ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsCiAgICAgICAgICAgICAgICB3aWR0aDogIiIsCiAgICAgICAgICAgICAgICBoZWlnaHQ6ICIiLAogICAgICAgICAgICAgICAgdmlld0JveDogIjAgMCAxMDYyLjAwMDAwMCAyMDEuMDAwMDAwIiwKICAgICAgICAgICAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86ICJ4TWlkWU1pZCBtZWV0IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImciLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybToKICAgICAgICAgICAgICAgICAgICAgICJ0cmFuc2xhdGUoMC4wMDAwMDAsMjAxLjAwMDAwMCkgc2NhbGUoMC4xMDAwMDAsLTAuMTAwMDAwKSIsCiAgICAgICAgICAgICAgICAgICAgZmlsbDogIiMwMDAwMDAiLAogICAgICAgICAgICAgICAgICAgIHN0cm9rZTogIm5vbmUiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTExMCAxMjYwIGwwIC01MTAgNTE1MCAwIDUxNTAgMCAwIDUxMCAwIDUxMCAtNTE1MCAwIC01MTUwIDAgMCAtNTEwelxubTMzMCAwIGwwIC00OTAgLTE1NSAwIC0xNTUgMCAwIDQ5MCAwIDQ5MCAxNTUgMCAxNTUgMCAwIC00OTB6IG0yNjEwIDAgbDBcbi00OTAgLTEyOTUgMCAtMTI5NSAwIDAgNDkwIDAgNDkwIDEyOTUgMCAxMjk1IDAgMCAtNDkweiBtNzM0MCAwIGwwIC00OTBcbi0zNjYwIDAgLTM2NjAgMCAwIDQ5MCAwIDQ5MCAzNjYwIDAgMzY2MCAwIDAgLTQ5MHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMjcwIDEyOTAgYy0xMiAtMjMgLTYgLTQwIDE1IC00MCA4IDAgMTkgLTggMjQgLTE3IDkgLTE2IDEwIC0xNiAxMVxuNSAwIDEzIC02IDIyIC0xNSAyMiAtMjEgMCAtMzEgMzAgLTE0IDQxIDkgNiAxMCA5IDIgOSAtNyAwIC0xNyAtOSAtMjMgLTIweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0zMTcgMTI4OSBjNCAtMTMgOCAtMTggMTEgLTEwIDIgNyAtMSAxOCAtNiAyMyAtOCA4IC05IDQgLTUgLTEzeiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0yNDUgMTIzMCBjLTMgLTUgLTEgLTEwIDQgLTEwIDYgMCAxMSA1IDExIDEwIDAgNiAtMiAxMCAtNCAxMCAtMyAwXG4tOCAtNCAtMTEgLTEweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk05MDggMTM1MyBjMTcgLTcgMTcgLTE0OSAwIC0xNTYgLTcgLTMgMjAgLTYgNjAgLTYgNjggLTEgNzIgMCA3MiAyMlxuLTEgMjAgLTIgMjAgLTExIDUgLTcgLTEyIC0yMiAtMTggLTQ5IC0xOCAtMzkgMCAtNDAgMSAtNDAgMzUgMCAzMCAzIDM1IDI0IDM1XG4xMyAwIDI3IC02IDI5IC0xMiAzIC03IDYgMyA2IDIyIDAgMjggLTIgMzIgLTEwIDE4IC01IC0xMCAtMTkgLTE4IC0yOSAtMThcbi0xNiAwIC0yMCA3IC0yMCAzNiBsMCAzNiA0NSAtNCBjMjUgLTIgNDUgMCA0NSA0IDAgNSAtMzAgOCAtNjcgNyAtMzggMCAtNjJcbi0zIC01NSAtNnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTAzMSAxMzE0IGMwIC0xMSAzIC0xNCA2IC02IDMgNyAyIDE2IC0xIDE5IC0zIDQgLTYgLTIgLTUgLTEzeiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0xODMwIDEzMDUgYy04IC05IC04IC0xNSAtMiAtMTUgNiAwIDEyIC0yMSAxNCAtNDcgMiAtNDAgNiAtNDggMjNcbi00OCAxMiAwIDIwIDcgMjEgMTggMSAxMiAxIDEzIC0zIDIgLTIgLTggLTExIC0xNSAtMTkgLTE1IC0xMCAwIC0xNCAxMyAtMTRcbjQ1IDAgMzYgNCA0NSAxOCA0NiAxMyAwIDE0IDIgMiA2IC04IDMgLTE4IDEwIC0yMSAxNSAtMyA1IC0xMiAyIC0xOSAtN3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTA4NSAxMjc0IGMyMCAtMjEgMjIgLTMwIDE0IC00MSAtMTAgLTExIC04IC0xMiA1IC03IDEyIDUgMTkgMCAyM1xuLTE1IDMgLTEyIDEzIC0yMSAyNSAtMjEgMTcgMCAxNiAyIC03IDI3IC0zMSAzNCAtMzEgMzcgMSA2MiAyNiAyMCAyNiAyMSA1IDIxXG4tMTIgMCAtMjAgLTQgLTE3IC05IDMgLTUgLTEgLTE0IC0xMCAtMjIgLTEzIC0xMCAtMTYgLTkgLTIxIDkgLTMgMTMgLTEzIDIyXG4tMjQgMjIgLTE2IDAgLTE1IC0zIDYgLTI2eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0xMTk4IDEyODkgYzcgLTggMTIgLTM5IDEyIC03NSAwIC00MSAtNCAtNjQgLTEyIC02NyAtNyAtMyAxIC02IDE3XG4tNiAxOCAwIDI1IDIgMTggNyAtOCA1IC0xMiAzMiAtMTEgNzcgMSA2MiAtMSA3MCAtMTggNzMgLTE1IDMgLTE3IDEgLTYgLTl6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTEyNTcgMTI5MCBjNDAgLTE2IDQwIC03NCAtMSAtOTAgLTE0IC02IC0xNiAtOSAtNSAtOSAyNyAtMSA1MiAyNFxuNTIgNTQgMCAzMCAtMjUgNTUgLTUyIDU0IC0xMSAwIC04IC0zIDYgLTl6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTEzNDcgMTI4MiBjLTIyIC0yNCAtMjEgLTU1IDEgLTc1IDM1IC0zMiA4MiAtMTAgODIgMzggMCA0OSAtNTIgNzFcbi04MyAzN3ogbTU4IC0zNyBjMCAtMzYgLTIgLTQwIC0yNSAtNDAgLTIwIDAgLTI2IDYgLTI4IDI4IC01IDQyIDUgNTkgMzAgNTVcbjIwIC0zIDIzIC05IDIzIC00M3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTQ1OCAxMjk0IGM3IC0zIDEyIC0yNCAxMiAtNDkgMCAtMjUgLTUgLTQ1IC0xMiAtNDggLTcgLTMgMSAtNiAxN1xuLTYgMjAgMCAyNiAyIDE3IDggLTkgNiAtMTMgMjMgLTEwIDUyIDMgMzcgMCA0NCAtMTcgNDYgLTExIDIgLTE0IDAgLTcgLTN6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTE1MjUgMTI0NSBjMCAtNTIgMSAtNTUgMjUgLTU1IDE1IDAgMjAgMyAxMyA4IC02IDQgLTEzIDI3IC0xNSA1MVxuLTQgNjUgLTIzIDYxIC0yMyAtNHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTU5NiAxMjc4IGMtOSAtMTIgLTE2IC0zMCAtMTYgLTM5IDAgLTIzIDM1IC01MiA1NyAtNDYgMTUgNCAxNSA1XG4tMyA2IC0yOSAxIC0zNiAyMyAtMjUgODQgMyAxNiAzOSA1IDQ5IC0xNSA3IC0xNSAxMSAtMTggMTEgLTcgMiA0MCAtNDkgNTJcbi03MyAxN3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTY5OCAxMjk0IGM3IC0zIDEyIC0yNCAxMiAtNDkgMCAtMjUgLTUgLTQ1IC0xMiAtNDggLTcgLTMgLTIgLTYgMTJcbi02IDI0IC0xIDI1IDIgMjQgNTEgLTEgNDggLTQgNTMgLTI1IDU1IC0xMyAxIC0xOCAwIC0xMSAtM3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTc2MyAxMjk0IGMxMyAtNCAxNyAtMTYgMTcgLTQ5IDAgLTI1IC01IC00NSAtMTIgLTQ4IC03IC0zIDEgLTYgMTdcbi02IDE3IDAgMjUgMyAxOCA3IC02IDQgLTEzIDI3IC0xNSA1MiAtMiAzNiAtNyA0NSAtMjMgNDcgLTE2IDEgLTE2IDEgLTIgLTN6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTIwNjUgMTI3NSBjMCAtMTMgMyAtMjEgOCAtMTggNCAyIDcgMTAgNyAxOCAwIDggLTMgMTYgLTcgMTggLTUgM1xuLTggLTUgLTggLTE4eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0yMDA0IDEyNjUgYy0xNCAtMjEgLTE1IC0zMSAtNiAtNTAgNyAtMTQgMTcgLTI1IDI0IC0yNSAxMCAwIDkgMyAtMVxuOSAtMTEgNyAtMTIgMTcgLTQgNTAgMTMgNDggMTAgNTEgLTEzIDE2eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0xMDcwIDEyMDAgYy0xMiAtOCAtMTAgLTEwIDggLTEwIDEzIDAgMjAgNCAxNyAxMCAtNyAxMiAtNiAxMiAtMjUgMHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNDcwMiAxMzQ4IGMtNyAtNyAtMTIgLTE4IC0xMiAtMjUgMCAtOCAtNyAtMTYgLTE2IC0yMCAtMTAgLTQgLTEyXG4tOCAtNSAtMTMgOSAtNSA5IC0yMSAxIC02MSAtMTcgLTgxIC0xOSAtODYgLTMwIC02OSAtNSA4IC0xMiAxMSAtMTYgNyAtNCAtNFxuLTIgLTEzIDUgLTIwIDIwIC0xOSA0OSAyNSA1NiA4OCA2IDQxIDExIDU1IDI0IDU1IDEzIDAgMTMgMiAyIDkgLTggNiAtMTEgMTZcbi02IDMxIDUgMTcgOSAxOSAxNiA5IDQgLTcgMTEgLTEwIDE0IC03IDggOCAtMiAyOCAtMTQgMjggLTQgMCAtMTIgLTUgLTE5IC0xMnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNDg3MiAxMzQ4IGMtNyAtNyAtMTIgLTIwIC0xMiAtMjkgMCAtMTAgLTYgLTIwIC0xMiAtMjIgLTEwIC00IC0xMFxuLTYgMCAtNiA3IC0xIDEyIC0xNyAxMiAtNDUgMCAtMjYgLTUgLTQ2IC0xMiAtNDkgLTcgLTMgMSAtNSAxNyAtNSAxNyAwIDI0IDJcbjE4IDUgLTggMyAtMTMgMjMgLTEzIDQ4IDAgMzMgNCA0NSAxOCA0OCAxNiA0IDE2IDUgMCA2IC0yMSAxIC0yNCAzMSAtNiA0OSA3XG43IDEwIDEyIDcgMTIgLTMgMCAtMTAgLTUgLTE3IC0xMnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNDkwMCAxMzQ0IGMwIC04IDUgLTEyIDEwIC05IDYgNCA4IDExIDUgMTYgLTkgMTQgLTE1IDExIC0xNSAtN3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNTk4OCAxMzUzIGM4IC0zIDEyIC0yOSAxMiAtNzggMCAtNDkgLTQgLTc1IC0xMiAtNzggLTcgLTMgMSAtNSAxN1xuLTUgMTcgMCAyNCAyIDE4IDUgLTkgMyAtMTMgMzAgLTEzIDg0IDAgNjkgLTIgNzkgLTE3IDc4IC0xMSAwIC0xMyAtMyAtNSAtNnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNzM5NiAxMzM4IGMtMzQgLTUzIC0yNyAtMTU4IDExIC0xODkgMTYgLTEzIDE2IC0xMiAwIDExIC0yMyAzMyAtMjRcbjE0NiAtMSAxNzggOCAxMiAxMyAyMiAxMCAyMiAtMyAwIC0xMiAtMTAgLTIwIC0yMnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNzcyMiAxMzQ4IGMtNyAtNyAtMTIgLTIwIC0xMiAtMzAgMCAtMTAgLTcgLTE4IC0xNyAtMTggLTE0IDAgLTE1XG4tMiAtNCAtOSAxMSAtNyAxMSAtMjAgLTEgLTgxIC0xMiAtNTkgLTEyIC03MCAtMiAtNTUgOCAxMCAxNyA0MSAyMCA2NyA0IDI3XG4xMyA1NSAyMCA2MyA5IDggMTAgMTUgMyAxNyAtNyAyIC03IDEyIDAgMzEgMTIgMzAgMTEgMzMgLTcgMTV6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTc3NDYgMTM0NSBjLTMgLTggLTEgLTE1IDQgLTE1IDYgMCAxMCA3IDEwIDE1IDAgOCAtMiAxNSAtNCAxNSAtMiAwXG4tNiAtNyAtMTAgLTE1eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk03ODE2IDEzMzIgYzIyIC00NiAxNiAtMTUyIC0xMSAtMTg0IGwtMjAgLTIzIDIzIDE5IGM0NiAzOSA1MiAxNTBcbjExIDE5OCAtMTkgMjMgLTE5IDIzIC0zIC0xMHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjkxMCAxMzQwIGMwIC01IDUgLTEwIDEwIC0xMCA2IDAgMTAgNSAxMCAxMCAwIDYgLTQgMTAgLTEwIDEwIC01IDBcbi0xMCAtNCAtMTAgLTEweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk03NDgwIDEzMzkgYy0xNiAtNCAtMTkgLTcgLTcgLTggMTQgLTEgMTcgLTExIDE3IC02NSAwIC00MiAtNCAtNjZcbi0xMiAtNjkgLTcgLTMgNSAtNSAyNyAtNSAyMiAwIDMyIDIgMjMgNSAtMTQgMyAtMTggMTggLTIwIDc3IC0zIDcxIC0zIDcyIC0yOFxuNjV6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTY4MjYgMTMyMCBjLTEwIC0zMyAtNyAtMTAyIDYgLTExNyA2IC03IDE4IC0xMiAyNyAtMTIgMTMgMSAxMyAyIC0xXG42IC0xNCAzIC0xOCAxNSAtMTggNDggMCAzMyA0IDQ1IDE4IDQ4IDE1IDQgMTUgNSAwIDYgLTkgMCAtMTggMTEgLTIwIDI0IC0zXG4yMiAtNCAyMiAtMTIgLTN6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTQ5MTggMTI5NCBjNyAtMyAxMiAtMjQgMTIgLTQ5IDAgLTI1IC01IC00NSAtMTIgLTQ4IC03IC0zIDMgLTYgMjJcbi02IDE5IDAgMzAgMyAyMyA3IC02IDQgLTEzIDI3IC0xNSA1MiAtMiAzNiAtNyA0NSAtMjMgNDcgLTExIDIgLTE0IDAgLTcgLTN6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTQ5NjUgMTI5MCBjMyAtNSAxMCAtMTAgMTYgLTEwIDUgMCA5IDUgOSAxMCAwIDYgLTcgMTAgLTE2IDEwIC04IDBcbi0xMiAtNCAtOSAtMTB6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTUwMjcgMTI4MiBjLTIyIC0yNCAtMjEgLTU1IDEgLTc1IDM1IC0zMiA4MiAtMTAgODIgMzggMCA0OSAtNTIgNzFcbi04MyAzN3ogbTU4IC0zNyBjMCAtMzYgLTIgLTQwIC0yNSAtNDAgLTIwIDAgLTI2IDYgLTI4IDI4IC01IDQyIDUgNTkgMzAgNTVcbjIwIC0zIDIzIC05IDIzIC00M3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNTEzOCAxMjk0IGM3IC0zIDEyIC0yNCAxMiAtNDkgMCAtMjUgLTUgLTQ1IC0xMiAtNDggLTcgLTMgLTIgLTYgMTJcbi02IDI0IC0xIDI1IDIgMjQgNTEgLTEgNDggLTQgNTMgLTI1IDU1IC0xMyAxIC0xOCAwIC0xMSAtM3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNTIwMyAxMjkzIGMxMyAtMyAxNyAtMTUgMTcgLTQ4IDAgLTI1IC01IC00NSAtMTIgLTQ4IC03IC0zIDEgLTYgMTdcbi02IDIwIDAgMjYgMiAxNyA4IC04IDUgLTEzIDIyIC0xMSA0MiA0IDQxIC02IDU5IC0yOSA1OCAtMTUgLTEgLTE1IC0yIDEgLTZ6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTUyNzUgMTI0NSBjMCAtNTIgMSAtNTUgMjUgLTU1IDE1IDAgMjAgMyAxMyA4IC02IDQgLTEzIDI3IC0xNSA1MVxuLTQgNjUgLTIzIDYxIC0yMyAtNHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNTQxNiAxMjc4IGMtOSAtMTIgLTE2IC0zMCAtMTYgLTM5IDAgLTIxIDMyIC00OSA1NiAtNDggMTQgMSAxMyAzXG4tNiA4IC0zMiA5IC00MiA2OCAtMTQgODggMTAgNyAxMyAxMyA2IDEzIC02IDAgLTE4IC0xMCAtMjYgLTIyeiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk01NTM1IDEyNDUgYzAgLTUyIDEgLTU1IDI1IC01NCAxNCAwIDE5IDMgMTMgNiAtOCAzIC0xMyAyNCAtMTMgNTQgMFxuMzMgLTQgNDkgLTEyIDQ5IC05IDAgLTEzIC0xOCAtMTMgLTU1eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk01NjA1IDEyNDQgYzAgLTQxIDMgLTU0IDE1IC01NCAxMiAwIDE0IDEwIDEyIDQ1IC02IDY4IC0yNyA3NiAtMjcgOXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNTY3NyAxMjgyIGMtMzMgLTM3IC0xMCAtOTMgMzYgLTkxIDIwIDEgMjAgMiAtMyA4IC0yMSA2IC0yNSAxMyAtMjVcbjQ2IDAgMzQgMyA0MCAyMyA0MyAxNyAzIDIyIC0yIDIyIC0xNyAwIC0xMiA1IC0yMSAxMCAtMjEgMTMgMCAxMyA2IDAgMzEgLTEzXG4yNCAtNDIgMjUgLTYzIDF6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTU4NTUgMTIxOSBjMCAtNjUgMyAtNzkgMTYgLTc5IDEyIDAgMTQgNyAxMSAyOSAtNCAyNiAtMiAyOSAxNyAyNFxuMjcgLTcgNjEgMjIgNjEgNTMgMCAzMyAtMjUgNTMgLTY4IDUyIGwtMzcgMCAwIC03OXogbTgwIDI2IGMwIC0zNiAtMiAtNDAgLTI1XG4tNDAgLTIwIDAgLTI2IDYgLTI4IDI4IC01IDQyIDUgNTkgMzAgNTUgMjAgLTMgMjMgLTkgMjMgLTQzeiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02MDYwIDEyNTcgYzkgLTU5IDE1IC02NiA1OCAtNjUgbDM3IDAgLTMgNTQgYy0zIDQ4IC02IDU0IC0yNSA1NFxuLTE2IDAgLTE4IC0zIC05IC05IDggLTUgMTIgLTIzIDEwIC00NyAtMiAtMzIgLTcgLTQwIC0yNSAtNDIgLTIxIC0zIC0yMyAwXG4tMjMgNDcgMCAzNiAtNCA1MSAtMTMgNTEgLTExIDAgLTEyIC0xMCAtNyAtNDN6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTYyMzUgMTI5MCBjMyAtNSA4IC0xMCAxMSAtMTAgMiAwIDQgNSA0IDEwIDAgNiAtNSAxMCAtMTEgMTAgLTUgMFxuLTcgLTQgLTQgLTEweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02MzY1IDEyNDUgYzAgLTUyIDEgLTU1IDI1IC01NCAxNCAwIDE5IDMgMTMgNiAtOCAzIC0xMyAyNCAtMTMgNTQgMFxuMzMgLTQgNDkgLTEyIDQ5IC05IDAgLTEzIC0xOCAtMTMgLTU1eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02NDIzIDEyOTMgYzEzIC0zIDE3IC0xNSAxNyAtNDggMCAtMjUgLTUgLTQ1IC0xMiAtNDggLTcgLTMgLTIgLTZcbjEyIC02IDIzIC0xIDI1IDIgMjUgNDggMCAyNyAtMyA0NyAtNyA0NSAtNCAtMiAtOSAwIC0xMyA2IC0zIDUgLTE0IDkgLTIzIDlcbi0xNSAtMSAtMTUgLTIgMSAtNnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjQ5MyAxMjkwIGMyMCAtMTMgMjQgLTg1IDUgLTkzIC03IC0zIDEgLTYgMTcgLTYgMTcgMCAyNSAzIDE4IDcgLTZcbjQgLTEzIDI3IC0xNSA1MiAtMiAzNiAtNyA0NSAtMjMgNDggLTE4IDIgLTE4IDIgLTIgLTh6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTY1NzEgMTI4NiBjLTcgLTggLTggLTE3IC0zIC0yMCA2IC0zIDEyIDMgMTUgMTQgNiAyNCA0IDI1IC0xMiA2eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02NjE0IDEyODUgYzkgLTkgMTMgLTI4IDExIC00OSAtMiAtMjQgMiAtMzYgMTIgLTQxIDkgLTMgMTggLTMgMjEgMFxuMyAzIDAgNSAtNiA1IC03IDAgLTEyIDE2IC0xMiAzOCAwIDM2IC0xNCA2MiAtMzMgNjIgLTUgMCAtMiAtNyA3IC0xNXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjY4NSAxMjQ1IGMwIC01MiAxIC01NSAyNSAtNTQgMTQgMCAxOSAzIDEzIDYgLTggMyAtMTMgMjQgLTEzIDU0IDBcbjMzIC00IDQ5IC0xMiA0OSAtOSAwIC0xMyAtMTggLTEzIC01NXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjc1OSAxMjUzIGMyIC0zMSAtMSAtNDggLTEwIC01NCAtMTAgLTYgLTcgLTkgMTEgLTkgMjQgMCAyNSAzIDIyXG40NSAtMiAyNCAtOSA0OCAtMTUgNTQgLTkgNyAtMTEgLTMgLTggLTM2eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02OTA4IDEyOTMgYzcgLTMgMTIgLTIzIDEyIC00OCAwIC0yNSAtNSAtNDUgLTEyIC00OCAtNyAtMyAxIC01IDE3XG4tNSAxNyAwIDI0IDIgMTggNSAtOCAzIC0xMyAyNCAtMTMgNTQgMCA0MCAtMyA0OSAtMTcgNDggLTExIDAgLTEzIC0zIC01IC02eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02OTc3IDEyOTMgYy0xNyAtMTYgLTUgLTQyIDIzIC01MiAyOSAtMTAgNDAgLTM0IDIwIC00NCAtNiAtMyAtNSAtNFxuMiAtMyAzNCA3IDEzIDY2IC0yMyA2NiAtMjEgMCAtMjYgMjYgLTYgMzMgNiAzIDcgNiAxIDYgLTYgMSAtMTQgLTIgLTE3IC02eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk03MDMxIDEyODQgYzAgLTExIDMgLTE0IDYgLTYgMyA3IDIgMTYgLTEgMTkgLTMgNCAtNiAtMiAtNSAtMTN6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTcwNzAgMTI4NSBjLTE1IC0xOSAzIC00NSAzMSAtNDUgMTAgMCAyMyAtOCAyOCAtMTcgMTAgLTE3IDEwIC0xN1xuMTEgMCAwIDExIC0xMyAyNCAtMzYgMzMgLTI5IDEyIC0zNCAxNyAtMjQgMjkgNyA4IDEwIDE1IDcgMTUgLTIgMCAtMTAgLTcgLTE3XG4tMTV6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTcxMTAgMTI5NiBjMCAtMiA3IC05IDE1IC0xNiA5IC03IDE1IC04IDE1IC0yIDAgNSAtNyAxMiAtMTUgMTYgLThcbjMgLTE1IDQgLTE1IDJ6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTcxNzEgMTI4NiBjLTcgLTggLTggLTE3IC0zIC0yMCA2IC0zIDEyIDMgMTUgMTQgNiAyNCA0IDI1IC0xMiA2eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk03MjE0IDEyODUgYzkgLTkgMTMgLTI4IDExIC00OSAtMiAtMjQgMiAtMzYgMTIgLTQxIDkgLTMgMTggLTMgMjEgMFxuMyAzIDAgNSAtNiA1IC03IDAgLTEyIDE2IC0xMiAzOCAwIDM2IC0xNCA2MiAtMzMgNjIgLTUgMCAtMiAtNyA3IC0xNXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNTQ4NSAxMjQ1IGMwIC0zOSAyIC00MyAxMyAtMjggNiA5IDEyIDIyIDEyIDI4IDAgNiAtNiAxOSAtMTIgMjhcbi0xMSAxNSAtMTMgMTEgLTEzIC0yOHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjE4MiAxMjc1IGMyIC0xMSAxMiAtMjQgMjMgLTMwIDQ3IC0yNCA0OSAtMjcgMzAgLTQyIC0xMSAtNyAtMTRcbi0xMyAtOCAtMTMgMTcgMCAzNCAyNiAyNyA0NCAtMyA5IC0xNyAxOSAtMzAgMjIgLTEzIDQgLTI5IDE0IC0zNCAyMyAtOSAxNFxuLTEwIDEzIC04IC00eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk03ODkyIDEyNjggYy03IC03IC0xMiAtMTkgLTEyIC0yNyAwIC04IDMgLTExIDggLTcgNCA0IDcgMTMgNyAxOSAwXG43IDkgMTIgMjAgMTIgMzMgMCAzMCAtMzQgLTYgLTcxIGwtMzMgLTM0IDM3IDAgYzIwIDAgMzcgNCAzNyA5IDAgNSAtOSA3IC0yMFxuNCAtMjcgLTcgLTI1IDkgNSAzNyAyOSAyOCAzMCAzMyA5IDU0IC0xOSAxOSAtMzYgMjAgLTUyIDR6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTY1NzAgMTIzNSBjLTEzIC0xNiAtNyAtNDUgOSAtNDUgNSAwIDcgOSA0IDIxIC00IDEyIDAgMjUgOCAzMCA4IDVcbjkgOSAzIDkgLTYgMCAtMTcgLTcgLTI0IC0xNXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNzE3MCAxMjM1IGMtMTMgLTE2IC03IC00NSA5IC00NSA1IDAgNyA5IDQgMjEgLTQgMTIgMCAyNSA4IDMwIDggNVxuOSA5IDMgOSAtNiAwIC0xNyAtNyAtMjQgLTE1eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02MTgwIDEyMTMgYzAgLTExIDcgLTIwIDE1IC0yMCAxMiAwIDEyIDMgMyAxNiAtNyA5IC0xNCAxOCAtMTUgMjBcbi0yIDIgLTMgLTUgLTMgLTE2eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk03MDYwIDEyMDkgYzAgLTExIDQgLTE4IDEwIC0xNCA1IDMgNyAxMiAzIDIwIC03IDIxIC0xMyAxOSAtMTMgLTZ6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTc1OTAgMTIwMCBjMCAtNSA1IC0xMCAxMCAtMTAgNiAwIDEwIDUgMTAgMTAgMCA2IC00IDEwIC0xMCAxMCAtNSAwXG4tMTAgLTQgLTEwIC0xMHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNzY0NSAxMTYxIGMtMyAtNSAtMSAtMTIgNSAtMTYgNSAtMyAxMCAxIDEwIDkgMCAxOCAtNiAyMSAtMTUgN3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMjkxMSA0OTQgYzEwIC0xMiAtMTY2IC0xNCAtMTE4MCAtMTQgLTc5MiAwIC0xMTkwIDMgLTExODYgMTAgOSAxNFxuLTcgMTIgLTQ2IC00IGwtMzQgLTE0IDMwIC0xMiBjMTcgLTYgMzYgLTEzIDQzIC0xNSA3IC0zIDEwIDAgNyA1IC00IDcgNDAzIDEwXG4xMTg1IDEwIDc1OCAwIDExODkgLTMgMTE4NSAtMTAgLTYgLTkgNTQgNyA2NyAxOSA0IDQgLTEzIDE0IC0zOCAyMyAtMzUgMTJcbi00MiAxMyAtMzMgMnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMzEyMiA0OTMgYy0yNCAtOCAtNDAgLTE5IC0zNSAtMjMgMTQgLTEyIDc0IC0zMCA2OCAtMjAgLTQgNyAxMjk0XG4xMCAzNTg3IDEwIDI1MTMgMCAzNTg4IC0zIDM1NzggLTExIC0xMSAtOCAtOSAtOSAxMCAtMyA1NCAxNSA3NiAyNiA2MCAzMSAtOFxuMyAtMzAgMTIgLTQ5IDE5IC0zMCAxMiAtMzIgMTIgLTIxIC0xIDExIC0xMyAtMzg4IC0xNSAtMzU4MCAtMTUgLTMxOTIgMFxuLTM1OTEgMiAtMzU4MCAxNSA3IDggMTEgMTUgOSAxNCAtMiAwIC0yNCAtNyAtNDcgLTE2eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0xNTAgNDg2IGwtMzQgLTEzIDI5IC0xMCBjMTcgLTYgMzkgLTE0IDQ5IC0xOSAxNCAtNSAxNyAtNCAxMiA0IC01XG45IDEyIDEyIDY0IDEyIDQ1IDAgNjkgLTQgNjUgLTEwIC00IC02IDQgLTYgMjIgMCAxNSA2IDM1IDEzIDQzIDE2IDEzIDUgMTMgNlxuMCAxMyAtMzAgMTcgLTYzIDI0IC01NiAxMiA1IC04IC0xNyAtMTEgLTc0IC0xMSAtNTIgMCAtNzkgNCAtNzUgMTAgOCAxMyAtMVxuMTIgLTQ1IC00eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0xNDA4IDM4MyBjOCAtMyAxMiAtMzAgMTIgLTg0IDAgLTUxIDQgLTc4IDEwIC03NCA2IDMgMTAgNDIgMTAgODYgMFxuNzYgLTEgNzkgLTIyIDc4IC0xMyAwIC0xNyAtMyAtMTAgLTZ6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTYyNjggMzgzIGM4IC0zIDEyIC0zMCAxMiAtODQgMCAtNTEgNCAtNzggMTAgLTc0IDYgMyAxMCA0MiAxMCA4NiAwXG43NiAtMSA3OSAtMjIgNzggLTEzIDAgLTE3IC0zIC0xMCAtNnoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMjcwIDM2OSBjLTE2IC00IC0xOSAtNyAtNyAtOCAxNCAtMSAxNyAtMTEgMTcgLTY1IDAgLTUzIC0zIC02NSAtMTdcbi02OSAtMTAgLTMgMiAtNSAyNyAtNSAyNSAwIDM3IDIgMjggNSAtMTQgMyAtMTggMTggLTIwIDc3IC0zIDcxIC0zIDcyIC0yOCA2NXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTIyMiAzNjggYy0xNSAtMTUgLTE1IC00MSAtMSAtNTUgOCAtOCA3IC0xNyAtNSAtMzQgLTE0IC0yMSAtMTRcbi0yNCAxIC00MSAxOCAtMjEgNTMgLTI0IDcxIC02IDE3IDE3IDE1IDU1IC00IDY2IC0xNCA4IC0xNCAxMCAwIDIxIDkgOCAxNiAxOFxuMTYgMjMgMCA2IC05IDAgLTE5IC0xMyAtMTkgLTI0IC0xOSAtMjQgLTQwIC01IC0yNiAyNCAtMjMgMzggMTAgNDcgMjEgNiAyMSA3XG40IDggLTEyIDEgLTI2IC00IC0zMyAtMTF6IG02NiAtMTE3IGMtNSAtMjMgLTYyIC0yMiAtNjYgMiAtMiAxMCAyIDI0IDggMzIgMTBcbjEyIDE1IDEyIDM2IC0yIDE0IC05IDI0IC0yMyAyMiAtMzJ6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTE1NTAgMzcwIGMwIC01IDUgLTEwIDEwIC0xMCA2IDAgMTAgNSAxMCAxMCAwIDYgLTQgMTAgLTEwIDEwIC01IDBcbi0xMCAtNCAtMTAgLTEweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk01OTkwIDM3MSBjNDAgLTExIDM4IC01MiAtNCAtOTkgLTIwIC0yMiAtMzYgLTQyIC0zNiAtNDYgMCAtMyAyMCAtNlxuNDUgLTYgMzAgMCA0NSA0IDQ1IDEzIDAgOSAtMTEgMTIgLTM3IDkgbC0zOCAtNCAzOCAzOSBjMjAgMjEgMzcgNDkgMzcgNjEgMFxuMjMgLTI3IDQzIC01NyA0MSAtMTIgLTEgLTEwIC0zIDcgLTh6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTYxMTAgMzcxIGMxOSAtNiAyNCAtMTMgMjIgLTMxIC0xIC0xMyAtNyAtMjcgLTEzIC0zMSAtNyAtNCAtNCAtOSA2XG4tMTMgMjYgLTEwIDE2IC01OSAtMTUgLTY3IGwtMjUgLTcgMjYgLTEgYzE0IC0xIDMwIDQgMzcgMTEgMTcgMTcgMTUgNTUgLTMgNjJcbi0xNCA1IC0xNCA4IDEgMzEgMjAgMzEgNSA1NiAtMzUgNTQgbC0yNiAtMSAyNSAtN3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjQxMCAzNzAgYzAgLTUgNSAtMTAgMTAgLTEwIDYgMCAxMCA1IDEwIDEwIDAgNiAtNCAxMCAtMTAgMTAgLTUgMFxuLTEwIC00IC0xMCAtMTB6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTE2MzEgMzYzIGMwIC02IC04IC0xOSAtMTcgLTI3IC04IC05IC0xMSAtMTYgLTUgLTE2IDYgMCAxMSAtMjAgMTFcbi00NSAwIC00OCAyMCAtNjkgNDMgLTQ2IDkgOSA4IDExIC01IDYgLTE2IC02IC0xOCAtMSAtMTggMzggMCAzNSA0IDQ3IDE4IDUwXG4xNSA0IDE1IDUgMCA2IC05IDAgLTE5IDExIC0yMSAyNCAtMiAxMiAtNSAxNyAtNiAxMHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjQ5MSAzNjMgYzAgLTYgLTggLTE5IC0xNyAtMjcgLTggLTkgLTExIC0xNiAtNSAtMTYgNiAwIDExIC0yMCAxMVxuLTQ1IDAgLTQ4IDIwIC02OSA0MyAtNDYgOSA5IDggMTEgLTUgNiAtMTYgLTYgLTE4IC0xIC0xOCAzOCAwIDM1IDQgNDcgMTggNTBcbjE1IDQgMTUgNSAwIDYgLTkgMCAtMTkgMTEgLTIxIDI0IC0yIDEyIC01IDE3IC02IDEweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk01OTUwIDM0NiBjMCAtOSA1IC0xNiAxMCAtMTYgNiAwIDEwIDQgMTAgOSAwIDYgLTQgMTMgLTEwIDE2IC01IDNcbi0xMCAtMSAtMTAgLTl6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTYwNzAgMzUwIGMwIC01IDUgLTEwIDEwIC0xMCA2IDAgMTAgNSAxMCAxMCAwIDYgLTQgMTAgLTEwIDEwIC01IDBcbi0xMCAtNCAtMTAgLTEweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0xNDg0IDMxNCBjMTkgLTE4IDIwIC00NyA1IC03NyAtMTIgLTIyIC0xMiAtMjIgMTAgLTMgMjYgMjMgMjcgNTcgM1xuNzkgLTI0IDIyIC0zOSAyMiAtMTggMXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTU0NSAyNzUgYzAgLTQyIDMgLTU1IDE1IC01NSAxMiAwIDE0IDExIDEyIDU1IC01IDc0IC0yNyA3NCAtMjcgMHoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNMTcwNyAzMjMgYy0xNyAtMTYgLTUgLTQyIDIzIC01MiAyOSAtMTAgNDAgLTM0IDIwIC00NCAtNiAtMyAtNSAtNFxuMiAtMyAzNCA3IDEzIDY2IC0yMyA2NiAtMjEgMCAtMjYgMjYgLTYgMzMgNiAzIDcgNiAxIDYgLTYgMSAtMTQgLTIgLTE3IC02eiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk0xNzYxIDMxNCBjMCAtMTEgMyAtMTQgNiAtNiAzIDcgMiAxNiAtMSAxOSAtMyA0IC02IC0yIC01IC0xM3oiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX2MoInBhdGgiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGQ6CiAgICAgICAgICAgICAgICAgICAgICAgICJNNjM0NCAzMTQgYzE3IC0xNiAyMSAtNjMgOSAtODAgLTUgLTUgMCAtMSAxMCA5IDIyIDI1IDIyIDUwIC0xIDcwXG4tMjQgMjIgLTM5IDIyIC0xOCAxeiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02NDA1IDI3NSBjMCAtNDIgMyAtNTUgMTUgLTU1IDEyIDAgMTQgMTEgMTIgNTUgLTUgNzQgLTI3IDc0IC0yNyAweiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02NTY3IDMyMyBjLTE3IC0xNiAtNSAtNDIgMjMgLTUyIDI5IC0xMCA0MCAtMzQgMjAgLTQ0IC02IC0zIC01IC00XG4yIC0zIDM0IDcgMTMgNjYgLTIzIDY2IC0yMSAwIC0yNiAyNiAtNiAzMyA2IDMgNyA2IDEgNiAtNiAxIC0xNCAtMiAtMTcgLTZ6IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJwYXRoIiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBkOgogICAgICAgICAgICAgICAgICAgICAgICAiTTY2MjEgMzE0IGMwIC0xMSAzIC0xNCA2IC02IDMgNyAyIDE2IC0xIDE5IC0zIDQgLTYgLTIgLTUgLTEzeiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygicGF0aCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgZDoKICAgICAgICAgICAgICAgICAgICAgICAgIk02MDY3IDI2MyBjLTMgLTUgLTIgLTE1IDIgLTIyIDcgLTEwIDEwIC0xMCAxNiAtMSA0IDYgMyAxNiAtMyAyMiAtNVxuNSAtMTIgNiAtMTUgMXoiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIFRoZSBsYXJnZXN0IHZhbHVlIG9mIHRoZSBleHBvbmVudCAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgIHZhbHVlOiAiZSIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2UnIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSksCiAgICAgICAgICBfdm0uX3YoIiBpbiB0aGUgc2luZ2xlIHByZWNpc2lvbiByZXByZXNlbnRhdGlvbiBpcyAiKSwKICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgIigxMX4xMTF+MTExKV8yID0gMl43ICsgMl42ICsgMl41ICsgMl40ICArIDJeMyArIDJeMiArIDJeMSArIDJeMCA9IDI1NSIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAiJygxMX4xMTF+MTExKV8yID0gMl43ICsgMl42ICsgMl41ICsgMl40ICArIDJeMyArIDJeMiArIDJeMSArIDJeMCA9IDI1NSciLAogICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIgVGh1cyB2YWx1ZSBvZiB0aGUgZXhwb25lbnQgIiksCiAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogImUiLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidlJyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIgaXMgcmVzdHJpY3RlZCBieSB0aGUgaW5lcXVhbGl0eSAiKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjAgPCBlIDwgKDExfjExMX4xMTEpXzIgPSAgMjU1IiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMCA8IGUgPCAoMTF+MTExfjExMSlfMiA9ICAyNTUnIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4zMCkiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4zMCknIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBUaGUgdmFsdWVzIDAgYW5kIDI1NSBhcmUgcmVzZXJ2ZWQgZm9yIHNwZWNpYWwgY2FzZXMsIGluY2x1ZGluZyAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgdmFsdWU6ICJcXHBtIDAiLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxccG0gMCciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiIGFuZCAiKSwKICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgIHZhbHVlOiAiXFxwbSBcXGluZnR5IiwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXHBtIFxcXFxpbmZ0eSciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgcmVzcGVjdGl2ZWx5LiBIZW5jZSwgdGhlIGFjdHVhbCBleHBvbmVudCBvZiB0aGUgbnVtYmVyIGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGluZXF1YWxpdHkgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIi0xMjYgXFxsZXEgZSAtIDEyNyAgXFxsZXEgMTI3LiIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJy0xMjYgXFxcXGxlcSBlIC0gMTI3ICBcXFxcbGVxIDEyNy4nIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4zMSkiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4zMSknIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBTaW1pbGFybHksIGl0IGNhbiBiZSBzaG93biB0aGF0IHRoZSBtYW50aXNzYSBvZiBlYWNoIG5vbnplcm8gbnVtYmVyIGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGluZXF1YWxpdHkgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICAgIjEgXFxsZXEgKDEuZilfMiBcXGxlcSAoMS4xMTF+MTExfjExMX4xMTF+MTExfjExMX4xMTF+MTEpXzIgPSAyIC0gMl57LTIzfSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgICAiJzEgXFxcXGxlcSAoMS5mKV8yIFxcXFxsZXEgKDEuMTExfjExMX4xMTF+MTExfjExMX4xMTF+MTExfjExKV8yID0gMiAtIDJeey0yM30nIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIoMi4zMikiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicoMi4zMiknIiwKICAgICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiIE5vdGUgdGhhdCAiKSwKICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgIlxcYmVnaW57YWxpZ25lZH0gMS4xMTF+MTExfjExMX4xMTF+MTExfjExMX4xMTF+MTEgJj0gMl4wICsgXFxvdmVyYnJhY2V7Ml57LTF9ICsgMl57LTJ9ICsgXFxjZG90cyArIDJeey0yM319XntcXHJtIDIzfiB0ZXJtc31cXFxcICY9IFxcZGlzcGxheXN0eWxlIDEgKyAyXnstMX1cXGZyYWN7WzEgLSAoMl57LTF9KV57MjN9XX17KDEtMl57LTF9KX1cXFxcICY9IDIgLSAyXnstMjN9IFxcZW5ke2FsaWduZWR9IiwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICInXFxcXGJlZ2lue2FsaWduZWR9IDEuMTExfjExMX4xMTF+MTExfjExMX4xMTF+MTExfjExIFxcJj0gMl4wICsgXFxcXG92ZXJicmFjZXsyXnstMX0gKyAyXnstMn0gKyBcXFxcY2RvdHMgKyAyXnstMjN9fV57XFxcXHJtIDIzfiB0ZXJtc31cXFxcXFxcXCBcXCY9IFxcXFxkaXNwbGF5c3R5bGUgMSArIDJeey0xfVxcXFxmcmFje1sxIC0gKDJeey0xfSleezIzfV19eygxLTJeey0xfSl9XFxcXFxcXFwgXFwmPSAyIC0gMl57LTIzfSBcXFxcZW5ke2FsaWduZWR9JyIsCiAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSksCiAgICAgICAgICBfdm0uX3YoIiBUaGUgbGFyZ2VzdCBudW1iZXIgcmVwcmVzZW50YWJsZSBpcyB0aGVyZWZvcmUgIiksCiAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICIoMiAtIDJeey0yM30pMl57MTI3fSBcXGFwcHJveCAyXnsxMjh9IFxcYXBwcm94IDMuNCBcXHRpbWVzIDEwXnszOH0iLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgIicoMiAtIDJeey0yM30pMl57MTI3fSBcXFxcYXBwcm94IDJeezEyOH0gXFxcXGFwcHJveCAzLjQgXFxcXHRpbWVzIDEwXnszOH0nIiwKICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiIGFuZCB0aGUgc21hbGxlc3QgcG9zaXRpdmUgbnVtYmVyIGlzICIpLAogICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgIHZhbHVlOiAiMl57LTEyNn0gXFxhcHByb3ggMS4yIFxcdGltZXMgMTBeey0zOH0iLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicyXnstMTI2fSBcXFxcYXBwcm94IDEuMiBcXFxcdGltZXMgMTBeey0zOH0nIiwKICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fdigiIFRoZSBiaW5hcnkgbWFjaGluZSBmbG9hdGluZy1wb2ludCBudW1iZXIgIiksCiAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogIlxcdmFyZXBzaWxvbiA9IDJeey0yM30iLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcdmFyZXBzaWxvbiA9IDJeey0yM30nIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgXQogICAgICAgICAgfSksCiAgICAgICAgICBfdm0uX3YoIiBpcyBjYWxsZWQgdGhlICIpLAogICAgICAgICAgX2MoImRlZXAiLCBbX3ZtLl92KCJtYWNoaW5lIGVwc2lsb24iKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIHdoZW4gdXNpbmcgc2luZ2xlIHByZWNpc2lvbi4gSXQgaXMgdGhlIHNtYWxsZXN0IHBvc2l0aXZlIG1hY2hpbmUgbnVtYmVyICIKICAgICAgICAgICksCiAgICAgICAgICBfYygic3BhbiIsIHsgYXR0cnM6IHsga2F0ZXg6ICInXFxcXHZhcmVwc2lsb24nIiB9IH0pLAogICAgICAgICAgX3ZtLl92KCIgc3VjaCB0aGF0ICIpLAogICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgdmFsdWU6ICIxICsgXFx2YXJlcHNpbG9uIFxcbmVxIDEiLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicxICsgXFxcXHZhcmVwc2lsb24gXFxcXG5lcSAxJyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0KICAgICAgICAgIH0pLAogICAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAibXktMyBtYi00IHAtMyIsCiAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgImJhY2tncm91bmQtY29sb3IiOiAiI2UyZTNlNSIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJFeGFtcGxlIDIuOCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIiBEZXRlcm1pbmUgdGhlIGRlY2ltYWwgbnVtYmVyIHRoYXQgaGFzIHRoZSBmb2xsb3dpbmcgc2luZ2xlLXByZWNpc2lvbiByZXByZXNlbnRhdGlvbiAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlswfjEwMH4wMTB+MTB+MDEwfjAwMX4wMDB+MTExfjAxMH4wMDB+MDAwfjAwXV8yIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOgogICAgICAgICAgICAgICAgICAgICAgIidbMH4xMDB+MDEwfjEwfjAxMH4wMDF+MDAwfjExMX4wMTB+MDAwfjAwMH4wMF1fMiciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiBBbnN3ZXI6IFRoZSBzdG9yZWQgc2lnbiBpcyAiKSwKICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAicyA9IDAiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICIncyA9IDAnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIuIFRodXMgdGhlIG51bWJlciBpcyBwb3NpdGl2ZS4gVGhlIHN0b3JlZCBleHBvbmVudCBpcyAiKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9ICgxMDB+MDEwfjEwKV8yJj0gMl57MX0gKyAyXnszfSArIDJeezd9IFxcXFwgICAgICAgICAgICAgICY9IDIgKyA4ICsgMTI4ID0gMTM4IFxcXFwgXFx0ZXh0cm17VGh1c31cXDtcXDtcXDtlLTEyNyY9IDEzOCAtIDEyNyA9IDExICAgICAgICAgICAgICBcXGVuZHthbGlnbmVkfSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICInXFxcXGJlZ2lue2FsaWduZWR9ICgxMDB+MDEwfjEwKV8yXFwmPSAyXnsxfSArIDJeezN9ICsgMl57N30gXFxcXFxcXFwgICAgICAgICAgICAgIFxcJj0gMiArIDggKyAxMjggPSAxMzggXFxcXFxcXFwgXFxcXHRleHRybXtUaHVzfVxcXFw7XFxcXDtcXFxcO2UtMTI3XFwmPSAxMzggLSAxMjcgPSAxMSAgICAgICAgICAgICAgXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiBUaGUgZnJhY3Rpb25hbCBwYXJ0ICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2YnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7IGF0dHJzOiB7IGthdGV4OiAiJzAuMDEwfjAwMX4wMDB+MTExfjAxJyIgfSB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIi4gVGhlIGRlY2ltYWwgbnVtYmVyICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJOIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ04nIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgIiksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAiXFxiZWdpbnthbGlnbmVkfSBOICY9ICgtMSlecyBcXHRpbWVzIDJee2UgLSAxMjd9IFxcdGltZXMgKDEuZilfMlxcXFwgICY9ICAoMS4wMTB+MDAxfjAwMH4xMTF+MDEpXFx0aW1lcyAyXnsxMX0gXFxcXCAgJj0gICAxMDEwfjAwMX4wMDB+MTEuMX4wMSBcXFxcICAmPSAgIDJeey0zfSArIDJeey0xfSArIDJeMCArIDJeMSArIDJeNSArIDJeOSArIDJeezExfSA9IDI1OTUuNjI1ICBcXGVuZHthbGlnbmVkfSIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICInXFxcXGJlZ2lue2FsaWduZWR9IE4gXFwmPSAoLTEpXnMgXFxcXHRpbWVzIDJee2UgLSAxMjd9IFxcXFx0aW1lcyAoMS5mKV8yXFxcXFxcXFwgIFxcJj0gICgxLjAxMH4wMDF+MDAwfjExMX4wMSlcXFxcdGltZXMgMl57MTF9IFxcXFxcXFxcICBcXCY9ICAgMTAxMH4wMDF+MDAwfjExLjF+MDEgXFxcXFxcXFwgIFxcJj0gICAyXnstM30gKyAyXnstMX0gKyAyXjAgKyAyXjEgKyAyXjUgKyAyXjkgKyAyXnsxMX0gPSAyNTk1LjYyNSAgXFxcXGVuZHthbGlnbmVkfSciLAogICAgICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJteS0zIG1iLTQgcC0zIiwKICAgICAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjZTJlM2U1IiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJmb250LXdlaWdodC1ib2xkIiB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkV4YW1wbGUgMi45IikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiIERldGVybWluZSB0aGUgc2luZ2xlLXByZWNpc2lvbiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGVjaW1hbCAtNTIuMjM0Mzc1LiIKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICIgQW5zd2VyOiBXZSBzdGFydCBieSBjb252ZXJ0aW5nIHRoZSBkZWNpbWFsIGludG8gYmluYXJ5IGZvcm0uIENvbnZlcnRpbmcgdGhlIGludGVnZXIgYW5kIGZyYWN0aW9uYWwgcGFydCB3ZSBoYXZlLCAiCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleDpkaXNwbGF5IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZToKICAgICAgICAgICAgICAgICAgICAgICJcXGJlZ2lue2FsaWduZWR9NTImPSAoMTEwfjEwMClfMlxcXFwgMC4yMzQzNzUmPSgwLjAwMX4xMTEpXzJcXFxcIFxcdGV4dHJte1RodXN9XFw7XFw7XFw7XFw7NTIuMjM0Mzc1Jj0oMTEwfjEwMC4wMDF+MTExKV8yXFxcXCAgICAgICAgICAgICAgICAgICAgICAgICAgICAmPSAoMS4xMDF+MDAwfjAxMX4xMSlfMiBcXHRpbWVzIDJeNVxcXFwgXFxlbmR7YWxpZ25lZH0iLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246CiAgICAgICAgICAgICAgICAgICAgICAiJ1xcXFxiZWdpbnthbGlnbmVkfTUyXFwmPSAoMTEwfjEwMClfMlxcXFxcXFxcIDAuMjM0Mzc1XFwmPSgwLjAwMX4xMTEpXzJcXFxcXFxcXCBcXFxcdGV4dHJte1RodXN9XFxcXDtcXFxcO1xcXFw7XFxcXDs1Mi4yMzQzNzVcXCY9KDExMH4xMDAuMDAxfjExMSlfMlxcXFxcXFxcICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcJj0gKDEuMTAxfjAwMH4wMTF+MTEpXzIgXFxcXHRpbWVzIDJeNVxcXFxcXFxcIFxcXFxlbmR7YWxpZ25lZH0nIiwKICAgICAgICAgICAgICAgICAgICBhcmc6ICJkaXNwbGF5IgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgVGhlIHNpZ24gaXMgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInMgPSAxIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ3MgPSAxJyIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF92bS5fdigiIGFuZCB0aGUgZnJhY3Rpb25hbCBwYXJ0ICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJmIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2YnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgIiksCiAgICAgICAgICAgICAgX2MoInNwYW4iLCB7CiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjAuMTAxfjAwMH4wMTF+MTEiLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMC4xMDF+MDAwfjAxMX4xMSciCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICBfdm0uX3YoIiBhbmQgdGhlIGV4cG9uZW50IGlzICIpLAogICAgICAgICAgICAgIF9jKCJzcGFuIiwgewogICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJlIiwKICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJ2UnIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX3ZtLl92KCIgaXMgIiksCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXg6ZGlzcGxheSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6CiAgICAgICAgICAgICAgICAgICAgICAiIGUgLSAxMjcgPSA1IFxcTG9uZ3JpZ2h0YXJyb3cgZSA9IDEzMiA9ICgxMDB+MDAxfjAwKV8yICIsCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgICAgICInIGUgLSAxMjcgPSA1IFxcXFxMb25ncmlnaHRhcnJvdyBlID0gMTMyID0gKDEwMH4wMDF+MDApXzIgJyIsCiAgICAgICAgICAgICAgICAgICAgYXJnOiAiZGlzcGxheSIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBUaGUgMzItYml0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIgaXMgIiksCiAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4OmRpc3BsYXkiLAogICAgICAgICAgICAgICAgdmFsdWU6ICIgWzF+MTAwfjAwMX4wMH4xMDF+MDAwfjAxMX4xMTB+MDAwfjAwMH4wMDB+MDBdXzIiLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjoKICAgICAgICAgICAgICAgICAgIicgWzF+MTAwfjAwMX4wMH4xMDF+MDAwfjAxMX4xMTB+MDAwfjAwMH4wMDB+MDBdXzInIiwKICAgICAgICAgICAgICAgIGFyZzogImRpc3BsYXkiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdCiAgICAgICAgICB9KQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdKSwKICAgIF9jKAogICAgICAic2VjdGlvbiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczogImRhcmstZ3JleS10ZXh0IG1iLTQgcHQtMyBweC0zIG14LTQiLAogICAgICAgIHN0YXRpY1N0eWxlOiB7ICJiYWNrZ3JvdW5kLWNvbG9yIjogIiNmZmYzZTAiIH0sCiAgICAgICAgYXR0cnM6IHsgaWQ6ICJleC0xIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygKICAgICAgICAgICJoNCIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaDQtcmVzcG9uc2l2ZSIgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX3ZtLl92KCJFeGVyY2lzZSAyLjIgIiksCiAgICAgICAgICAgIF9jKCJkZWVwIiwgW192bS5fdigiU2luZ2xlLVByZWNpc2lvbiBmbG9hdGluZyBwb2ludCBmb3JtIildKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApLAogICAgICAgIF9jKCJvbCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICIgRGV0ZXJtaW5lIHRoZSBtYWNoaW5lIHJlcHJlc2VudGF0aW9uIGluIHNpbmdsZSBwcmVjaXNpb24gb24gYSAzMi1iaXQgd29yZCBsZW5ndGggY29tcHV0ZXIgKE1hcmMtMzIpIGZvciB0aGUgZm9sbG93aW5nIGRlY2ltYWwgbnVtYmVycyAiCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJvbCIsIHsgc3RhdGljU3R5bGU6IHsgImxpc3Qtc3R5bGUtdHlwZSI6ICJsb3dlci1sYXRpbiIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjc3MTIiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIic3NzEyJyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIi0yODUuNzUgIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInLTI4NS43NSAnIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiIC0yNzUyIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInIC0yNzUyJyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIjY0LjAxNTYyNSAiLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIic2NC4wMTU2MjUgJyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIiAgMC4wMzEyNSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJyAgMC4wMzEyNSciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIgIDAuMjM0Mzc1IiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInICAwLjIzNDM3NSciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICItOCBcXHRpbWVzIDJeey0yNH0gIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInLTggXFxcXHRpbWVzIDJeey0yNH0gJyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlIDJeey0xMjd9ICsgMl57LTEyOH0gIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZSAyXnstMTI3fSArIDJeey0xMjh9ICciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIgXFxkaXNwbGF5c3R5bGUgMl57LTEyN30gKyAyXnstMTMwfSIsCiAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiJyBcXFxcZGlzcGxheXN0eWxlIDJeey0xMjd9ICsgMl57LTEzMH0nIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgbmFtZTogImthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWthdGV4IiwKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAiIFxcZGlzcGxheXN0eWxlIDJeey0xMjd9ICsgMl57LTE1MH0iLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIicgXFxcXGRpc3BsYXlzdHlsZSAyXnstMTI3fSArIDJeey0xNTB9JyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICBfYygiYnIiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIERldGVybWluZSB0aGUgZGVjaW1hbCBudW1iZXJzIHRoYXQgaGFzIHRoZSBmb2xsb3dpbmcgTWFyYy0zMiByZXByZXNlbnRhdGlvbi4gIgogICAgICAgICAgICApLAogICAgICAgICAgICBfYygib2wiLCB7IHN0YXRpY1N0eWxlOiB7ICJsaXN0LXN0eWxlLXR5cGUiOiAibG93ZXItbGF0aW4iIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIxfjExMTF+MDAwMH4wMTF+MDAwMH4wMDAwfjAwMDB+MDAwMH4wMDAwIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMX4xMTExfjAwMDB+MDExfjAwMDB+MDAwMH4wMDAwfjAwMDB+MDAwMCciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIwfjEwMDB+MTAxMH4wMTB+MDAxMH4wMDExfjEwMTB+MDAwMH4wMDAwIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMH4xMDAwfjEwMTB+MDEwfjAwMTB+MDAxMX4xMDEwfjAwMDB+MDAwMCciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIwfjEwMDB+MDEwMX4wMDB+MDAwMH4wMDAwfjEwMDB+MDAwMH4wMDAwIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMH4xMDAwfjAxMDF+MDAwfjAwMDB+MDAwMH4xMDAwfjAwMDB+MDAwMCciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIwfjEwMDB+MDAwMH4xMTF+MTAwMH4wMDAwfjAwMDB+MDAwMH4wMDAwIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMH4xMDAwfjAwMDB+MTExfjEwMDB+MDAwMH4wMDAwfjAwMDB+MDAwMCciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICIxfjEwMDB+MDEwMH4xMDF+MDAwMH4xMTExfjAwMDB+MDAwMH4wMDAwIiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInMX4xMDAwfjAxMDB+MTAxfjAwMDB+MTExMX4wMDAwfjAwMDB+MDAwMCciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgX2MoImJyIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfdm0uX3YoIiBBcmUgdGhlc2UgbWFjaGluZSBudW1iZXJzIGluIHRoZSBNYXJjLTMyPyBXaHk/ICIpLAogICAgICAgICAgICBfYygib2wiLCB7IHN0YXRpY1N0eWxlOiB7ICJsaXN0LXN0eWxlLXR5cGUiOiAibG93ZXItbGF0aW4iIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAia2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYta2F0ZXgiLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJcXGRpc3BsYXlzdHlsZSAxMF57NDB9IiwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICInXFxcXGRpc3BsYXlzdHlsZSAxMF57NDB9JyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJrYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1rYXRleCIsCiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIlxcZGlzcGxheXN0eWxlIDJeey0xfSArIDJeey0yNn0iLAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIidcXFxcZGlzcGxheXN0eWxlIDJeey0xfSArIDJeey0yNn0nIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgXSkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoCiAgICAgICJzZWN0aW9uIiwKICAgICAgewogICAgICAgIHN0YXRpY0NsYXNzOiAicHktMyBweC0zIG14LTQgZ3JleS10ZXh0IiwKICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1jb2xvciI6ICIjZmZmM2UwIiB9CiAgICAgIH0sCiAgICAgIFsKICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAiIGgzLXJlc3BvbnNpdmUgZm9udC13ZWlnaHQtYm9sZCIgfSwgWwogICAgICAgICAgX3ZtLl92KCIgMi4gTnVtYmVyIFJlcHJlc2VudGF0aW9uIikKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJoNCIsIHsgc3RhdGljQ2xhc3M6ICJoNC1yZXNwb25zaXZlIiB9LCBbCiAgICAgIF92bS5fdigiRXhlcmNpc2UgMi4xICIpLAogICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRGVjaW1hbCBhbmQgQmluYXJ5IHN5c3RlbSIpXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}