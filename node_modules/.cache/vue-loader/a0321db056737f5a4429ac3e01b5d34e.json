{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit7.vue?vue&type=template&id=84c9a7ee&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit7.vue","mtime":1600580948784},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "unit7" }, [
    _c(
      "section",
      {
        staticClass: "py-3 px-3 mx-4 grey-text",
        staticStyle: { "background-color": "#fff3e0" }
      },
      [
        _c("h3", { staticClass: " h3-responsive font-weight-bold" }, [
          _vm._v(" 7. Iterative techniques for solving "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\textbf{A}\\textbf{x}=\\textbf{b}",
                expression: "'\\\\textbf{A}\\\\textbf{x}=\\\\textbf{b}'"
              }
            ]
          })
        ])
      ]
    ),
    _c("section", { staticClass: "dark-grey-text mb-4 pt-3 px-3 mx-4" }, [
      _vm._v(" Consider solving linear systems of them form: "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "\\textbf{A}\\textbf{x}=\\textbf{b}",
            expression: "'\\\\textbf{A}\\\\textbf{x}=\\\\textbf{b}'"
          }
        ]
      }),
      _vm._v(" where "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value:
              "\\textbf{A}=\\left[ a_{ij}\\right] _{n\\times n},\\; \\textbf{x}=\\left[ x_{i}\\right] _{n\\times 1},\\;\\textbf{b}= \\left[ b_{i}\\right] _{n\\times 1}.",
            expression:
              "'\\\\textbf{A}=\\\\left[ a_{ij}\\\\right] _{n\\\\times n},\\\\; \\\\textbf{x}=\\\\left[ x_{i}\\\\right] _{n\\\\times 1},\\\\;\\\\textbf{b}= \\\\left[ b_{i}\\\\right] _{n\\\\times 1}.'"
          }
        ]
      }),
      _vm._v(" Assume that the system has a unique solution. Let "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "\\textbf{x}^{\\ast }",
            expression: "'\\\\textbf{x}^{\\\\ast }'"
          }
        ]
      }),
      _vm._v(" be the solution. Then "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "\\textbf{x}^{\\ast }=\\textbf{A}^{-1}\\textbf{b}.",
            expression:
              "'\\\\textbf{x}^{\\\\ast }=\\\\textbf{A}^{-1}\\\\textbf{b}.'"
          }
        ]
      }),
      _c("br"),
      _vm._v(" To solve "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "\\textbf{A}\\textbf{x}=\\textbf{b}",
            expression: "'\\\\textbf{A}\\\\textbf{x}=\\\\textbf{b}'"
          }
        ]
      }),
      _vm._v(" by iteration one starts with an "),
      _c("i", [_vm._v("initial approximation")]),
      _vm._v(" "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "{\\bf x^{(0)}}",
            expression: "'{\\\\bf x^{(0)}}'"
          }
        ]
      }),
      _vm._v(" to the solution "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "{\\bf x}",
            expression: "'{\\\\bf x}'"
          }
        ]
      }),
      _vm._v(" and then generates a sequence "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "{\\bf x}^{(k)}\\}_{k=1}^{\\infty}",
            expression: "'{\\\\bf x}^{(k)}\\\\}_{k=1}^{\\\\infty}'"
          }
        ]
      }),
      _vm._v(" converging to "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "{\\bf x}",
            expression: "'{\\\\bf x}'"
          }
        ]
      }),
      _vm._v(". The key is to transform the original system "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "A {\\bf x} = {\\bf b}",
            expression: "'A {\\\\bf x} = {\\\\bf b}'"
          }
        ]
      }),
      _vm._v(" into a form "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "{\\bf x} = T {\\bf x} + {\\bf c}",
            expression: "'{\\\\bf x} = T {\\\\bf x} + {\\\\bf c}'"
          }
        ]
      }),
      _vm._v(" and produce the sequence of iterates from the rule "),
      _c("div", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex:display",
            value: "{\\bf x^{(k)}} = T {\\bf x^{(k-1)}} + {\\bf c}.",
            expression:
              "'{\\\\bf x^{(k)}} = T {\\\\bf x^{(k-1)}} + {\\\\bf c}.'",
            arg: "display"
          }
        ]
      }),
      _vm._v(
        " Just like in fixed point iteration. Iterations stop when the relative difference between two subsequent iterates "
      ),
      _c(
        "div",
        { staticClass: "table-responsive", staticStyle: { width: "100%" } },
        [
          _c("table", { staticClass: "table" }, [
            _c("thead", [
              _c("tr", [
                _c("th", [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "\\frac{ \\|{\\bf x^{(k+1)}} - {\\bf x^{(k)}}\\|_{\\infty}} {\\|{\\bf x^{(k+1)}}\\|_{\\infty}} \\leq TOL",
                        expression:
                          "'\\\\frac{ \\\\|{\\\\bf x^{(k+1)}} - {\\\\bf x^{(k)}}\\\\|_{\\\\infty}} {\\\\|{\\\\bf x^{(k+1)}}\\\\|_{\\\\infty}} \\\\leq TOL'",
                        arg: "display"
                      }
                    ]
                  })
                ]),
                _c("th", [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "(7.1)",
                        expression: "'(7.1)'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ])
          ])
        ]
      ),
      _vm._v(" where "),
      _c("span", {
        directives: [
          {
            name: "katex",
            rawName: "v-katex",
            value: "TOL",
            expression: "'TOL'"
          }
        ]
      }),
      _vm._v(
        " is pre-set tolerance level. Examples of iterative methods includes the Jacobi, Gauss-Seidel, Conjugate Gradient and many others. "
      ),
      _c("div", { staticClass: "my-3 py-3" }, [
        _c(
          "h4",
          { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
          [_vm._v(" 7.1 Jacobi Method ")]
        ),
        _c("hr", { staticClass: "blue mb-4 mt-0 " }),
        _vm._v(
          " In this section we look at two iterative techniques for solving the system "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "\\textbf{A}\\textbf{x} = \\textbf{b}",
              expression: "'\\\\textbf{A}\\\\textbf{x} = \\\\textbf{b}'"
            }
          ]
        }),
        _vm._v(" which is a system of "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "n", expression: "'n'" }
          ]
        }),
        _vm._v(" linear equations in "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "n", expression: "'n'" }
          ]
        }),
        _vm._v(" variables given as "),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value:
                "\\begin{aligned} a_{11}x_1 + a_{12}x_2 + \\ldots + a_{1n}x_n &= b_1\\\\ a_{21}x_1 + a_{22}x_2 + \\ldots + a_{2n}x_n &= b_2\\\\ \\;\\;\\;\\;\\;\\;\\; \\vdots                      &\\vdots   \\\\ a_{n1}x_1 + a_{n2}x_2 + \\ldots + a_{nn}x_n &= b_n \\end{aligned}",
              expression:
                "'\\\\begin{aligned} a_{11}x_1 + a_{12}x_2 + \\\\ldots + a_{1n}x_n \\&= b_1\\\\\\\\ a_{21}x_1 + a_{22}x_2 + \\\\ldots + a_{2n}x_n \\&= b_2\\\\\\\\ \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\; \\\\vdots                      \\&\\\\vdots   \\\\\\\\ a_{n1}x_1 + a_{n2}x_2 + \\\\ldots + a_{nn}x_n \\&= b_n \\\\end{aligned}'",
              arg: "display"
            }
          ]
        }),
        _vm._v(
          " We assume that the above system has a unique solution and that the coefficient matrix "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "\\textbf{A}",
              expression: "'\\\\textbf{A}'"
            }
          ]
        }),
        _vm._v(
          " has no zeros on its main diagonal. If any of the diagonal entries "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "a_{11},a_{22},\\ldots,a_{nn}",
              expression: "'a_{11},a_{22},\\\\ldots,a_{nn}'"
            }
          ]
        }),
        _vm._v(
          " are zero, then rows or columns must be interchanged to obtain a coefficient matrix that has nonzero entries on the main diagonal. "
        ),
        _c("br"),
        _vm._v(" The Jacobi iteration method is defined below "),
        _c("div", { staticClass: "note note-definition my-3" }, [
          _c("span", { staticClass: "text-success" }, [
            _vm._v(" Definition 7.1")
          ]),
          _c("br"),
          _vm._v(" The "),
          _c("i", [_vm._v("Jacobi iterative method")]),
          _vm._v(" is obtained by solving the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "i",
                expression: "'i'"
              }
            ]
          }),
          _vm._v("th equation "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\textbf{A}\\textbf{x} = \\textbf{b}",
                expression: "'\\\\textbf{A}\\\\textbf{x} = \\\\textbf{b}'"
              }
            ]
          }),
          _vm._v(" for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(" to obtain (provided "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_{ii} \\neq 0",
                expression: "'a_{ii} \\\\neq 0'"
              }
            ]
          }),
          _vm._v(") "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "x_i = \\sum_{\\stackrel{j = 1}{j \\neq i}}^n \\left(-\\frac{a_{ij}x_j}{a_{ii}}\\right) + \\frac{b_i}{a_{ii}},\\;\\;\\;\\; \\text{for }\\;\\;\\; i = 1,2,\\ldots, n",
                expression:
                  "'x_i = \\\\sum_{\\\\stackrel{j = 1}{j \\\\neq i}}^n \\\\left(-\\\\frac{a_{ij}x_j}{a_{ii}}\\\\right) + \\\\frac{b_i}{a_{ii}},\\\\;\\\\;\\\\;\\\\; \\\\text{for }\\\\;\\\\;\\\\; i = 1,2,\\\\ldots, n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" For each "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k \\geq 1",
                expression: "'k \\\\geq 1'"
              }
            ]
          }),
          _vm._v(", generate the components "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i^{(k)}",
                expression: "'x_i^{(k)}'"
              }
            ]
          }),
          _vm._v(" of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\textbf{x}^{(k)}",
                expression: "'\\\\textbf{x}^{(k)}'"
              }
            ]
          }),
          _vm._v(" from the components of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\textbf{x}^{(k-1)}",
                expression: "'\\\\textbf{x}^{(k-1)}'"
              }
            ]
          }),
          _vm._v(" by "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "x_i^{(k)} = \\frac{1}{a_{ii}}\\left[\\sum_{\\stackrel{j = 1}{j \\neq i}}^n \\left(- a_{ij}x_j^{(k-1)}\\right) + b_i\\right],\\;\\;\\;\\; \\text{for }\\;\\;\\; i = 1,2,\\ldots, n",
                expression:
                  "'x_i^{(k)} = \\\\frac{1}{a_{ii}}\\\\left[\\\\sum_{\\\\stackrel{j = 1}{j \\\\neq i}}^n \\\\left(- a_{ij}x_j^{(k-1)}\\\\right) + b_i\\\\right],\\\\;\\\\;\\\\;\\\\; \\\\text{for }\\\\;\\\\;\\\\; i = 1,2,\\\\ldots, n'",
                arg: "display"
              }
            ]
          })
        ]),
        _vm._v(" The procedure for the Jabobi method is as follows; "),
        _c("ol", [
          _c("li", [
            _vm._v(" First solve the first equation for "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1",
                  expression: "'x_1'"
                }
              ]
            }),
            _vm._v(", second equation for "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_2",
                  expression: "'x_2'"
                }
              ]
            }),
            _vm._v(" and so on as follows: "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned}x_1  &= \\frac{1}{a_{11}}(b_1 - a_{12}x_2 - a_{13}x_3 - \\cdots - a_{1n}x_n)\\\\ x_2  &= \\frac{1}{a_{22}}(b_2 - a_{21}x_1 - a_{23}x_3 - \\cdots - a_{2n}x_n)\\\\      & \\vdots \\\\ x_n  &= \\frac{1}{a_{nn}}(b_n - a_{n1}x_1 - a_{n2}x_2 - \\cdots - a_{n,n-1}x_{n-1}) \\end{aligned} ",
                  expression:
                    "'\\\\begin{aligned}x_1  \\&= \\\\frac{1}{a_{11}}(b_1 - a_{12}x_2 - a_{13}x_3 - \\\\cdots - a_{1n}x_n)\\\\\\\\ x_2  \\&= \\\\frac{1}{a_{22}}(b_2 - a_{21}x_1 - a_{23}x_3 - \\\\cdots - a_{2n}x_n)\\\\\\\\      \\& \\\\vdots \\\\\\\\ x_n  \\&= \\\\frac{1}{a_{nn}}(b_n - a_{n1}x_1 - a_{n2}x_2 - \\\\cdots - a_{n,n-1}x_{n-1}) \\\\end{aligned} '",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("li", [
            _vm._v(" Given an initial guess, denoted by "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1^{(0)}, x_2^{(0)},\\ldots,x_n^{(0)}",
                  expression: "'x_1^{(0)}, x_2^{(0)},\\\\ldots,x_n^{(0)}'"
                }
              ]
            }),
            _vm._v(", develop the Jacobi iteration scheme for "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "k = 1,2,\\ldots,",
                  expression: "'k = 1,2,\\\\ldots,'"
                }
              ]
            }),
            _vm._v(" as follows: "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} _1^{(k)}  &= \\frac{1}{a_{11}}\\left(b_1 - a_{12}x_2^{(k-1)} - a_{13}x_3^{(k-1)} - \\cdots - a_{1n}x_n^{(k-1)}\\right)\\\\ _2^{(k)}  &= \\frac{1}{a_{22}}\\left(b_2 - a_{21}x_1^{(k-1)} - a_{23}x_3^{(k-1)} - \\cdots - a_{2n}x_n^{(k-1)}\\right)\\\\      & \\vdots \\\\ x_n^{(k)}  &= \\frac{1}{a_{nn}}\\left(b_n - a_{n1}x_1^{(k-1)} - a_{n2}x_2^{(k-1)} - \\cdots - a_{n,n-1}x_{n-1}^{(k-1)}\\right) \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} _1^{(k)}  \\&= \\\\frac{1}{a_{11}}\\\\left(b_1 - a_{12}x_2^{(k-1)} - a_{13}x_3^{(k-1)} - \\\\cdots - a_{1n}x_n^{(k-1)}\\\\right)\\\\\\\\ _2^{(k)}  \\&= \\\\frac{1}{a_{22}}\\\\left(b_2 - a_{21}x_1^{(k-1)} - a_{23}x_3^{(k-1)} - \\\\cdots - a_{2n}x_n^{(k-1)}\\\\right)\\\\\\\\      \\& \\\\vdots \\\\\\\\ x_n^{(k)}  \\&= \\\\frac{1}{a_{nn}}\\\\left(b_n - a_{n1}x_1^{(k-1)} - a_{n2}x_2^{(k-1)} - \\\\cdots - a_{n,n-1}x_{n-1}^{(k-1)}\\\\right) \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("li", [
            _vm._v(" The "),
            _c("i", [_vm._v("first approximation (iteration)")]),
            _vm._v(" of the solution, "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_1^{(1)},x_2^{(1)},\\ldots,x_n^{(1)})",
                  expression: "'(x_1^{(1)},x_2^{(1)},\\\\ldots,x_n^{(1)})'"
                }
              ]
            }),
            _vm._v(" is obtained by substituting the initial guess "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_1^{(0)},x_2^{(0)},\\ldots,x_n^{(0)})",
                  expression: "'(x_1^{(0)},x_2^{(0)},\\\\ldots,x_n^{(0)})'"
                }
              ]
            }),
            _vm._v(
              " into the right hand side of the re-written equations. After this procedure has been completed, we say that one iteration has been performed. "
            )
          ]),
          _c("li", [
            _vm._v(
              " In the same way, the second approximation is formed by substituting the first approximation's "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x",
                  expression: "'x'"
                }
              ]
            }),
            _vm._v(
              "-values into the right hand side of the re-written equations. By repeated iterations, you will form a sequence of approximations that often converges to the actual solution. "
            )
          ])
        ]),
        _c(
          "div",
          {
            staticClass: "my-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _vm._v(" Example 7.1 "),
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v(" Applying the Jacobi Method")
            ]),
            _vm._v(
              " Use the Jacobi Method to approximate the solution of the following system of linear equations "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} 5x_1 - 2x_2 + 3x_3 &= -1\\\\ -3x_1 + 9x_2 + x_3 &= 2\\\\ 2x_1  - x_2 - 7x_3 &= 3 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} 5x_1 - 2x_2 + 3x_3 \\&= -1\\\\\\\\ -3x_1 + 9x_2 + x_3 \\&= 2\\\\\\\\ 2x_1  - x_2 - 7x_3 \\&= 3 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Compute the iterations until two successive approximations are identical when rounded to three significant digits. "
            ),
            _c("i", [_vm._v("This is called the stopping criteria.")]),
            _vm._v(" "),
            _c("br"),
            _vm._v(" We begin by writing the system in the form "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1& = -\\frac{1}{5} + \\frac{2}{5}x_2 - \\frac{3}{5}x_3\\\\ x_2&= \\frac{2}{9} + \\frac{3}{9}x_1  - \\frac{1}{9}x_3\\\\ x_3&=-\\frac{3}{7} + \\frac{2}{7}x_1 - \\frac{1}{7}x_2 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1\\& = -\\\\frac{1}{5} + \\\\frac{2}{5}x_2 - \\\\frac{3}{5}x_3\\\\\\\\ x_2\\&= \\\\frac{2}{9} + \\\\frac{3}{9}x_1  - \\\\frac{1}{9}x_3\\\\\\\\ x_3\\&=-\\\\frac{3}{7} + \\\\frac{2}{7}x_1 - \\\\frac{1}{7}x_2 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Thus, the Jacobi iteration scheme is "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1^{(1)}& = -\\frac{1}{5} + \\frac{2}{5}x_2^{(0)} - \\frac{3}{5}x_3^{(0)}\\\\ x_2^{(1)}&= \\frac{2}{9} + \\frac{3}{9}x_1^{(0)}  - \\frac{1}{9}x_3^{(0)}\\\\ x_3^{(1)}&=-\\frac{3}{7} + \\frac{2}{7}x_1^{(0)} - \\frac{1}{7}x_2^{(0)} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1^{(1)}\\& = -\\\\frac{1}{5} + \\\\frac{2}{5}x_2^{(0)} - \\\\frac{3}{5}x_3^{(0)}\\\\\\\\ x_2^{(1)}\\&= \\\\frac{2}{9} + \\\\frac{3}{9}x_1^{(0)}  - \\\\frac{1}{9}x_3^{(0)}\\\\\\\\ x_3^{(1)}\\&=-\\\\frac{3}{7} + \\\\frac{2}{7}x_1^{(0)} - \\\\frac{1}{7}x_2^{(0)} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" If the initial approximation is not given, use "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "x_1^{(0)} = 0,\\;\\;\\;\\; x_2^{(0)} = 0,\\;\\;\\;\\;\\;x_3^{(0)} = 0 ",
                  expression:
                    "'x_1^{(0)} = 0,\\\\;\\\\;\\\\;\\\\; x_2^{(0)} = 0,\\\\;\\\\;\\\\;\\\\;\\\\;x_3^{(0)} = 0 '",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " as a convenient initial approximation. So the first approximation is "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1^{(1)}& = -\\frac{1}{5} + \\frac{2}{5}(0) - \\frac{3}{5}(0) \\approx -0.200\\\\ x_2^{(1)}&= \\frac{2}{9} + \\frac{3}{9}(0)  - \\frac{1}{9}(0) \\approx 0.222\\\\ x_3^{(0)}&=-\\frac{3}{7} + \\frac{2}{7}(0) - \\frac{1}{7}(0) \\approx -0.429 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1^{(1)}\\& = -\\\\frac{1}{5} + \\\\frac{2}{5}(0) - \\\\frac{3}{5}(0) \\\\approx -0.200\\\\\\\\ x_2^{(1)}\\&= \\\\frac{2}{9} + \\\\frac{3}{9}(0)  - \\\\frac{1}{9}(0) \\\\approx 0.222\\\\\\\\ x_3^{(0)}\\&=-\\\\frac{3}{7} + \\\\frac{2}{7}(0) - \\\\frac{1}{7}(0) \\\\approx -0.429 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Continuing this procedure, you obtain the sequence of approximations shown in Table 7.1 "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{array}{|c|c|c|c|}\\hline n &     x_1 &       x_2   &      x_3 \\\\ \\hline          0&	      0.000	&      0.000	&      0.000\\\\         1&	     -0.200	&      0.222	&     -0.429\\\\         2&	      0.146	&      0.203	&     -0.517\\\\         3&	      0.192	&      0.328	&     -0.416\\\\         4&	      0.181	&      0.332	&     -0.421\\\\         5&	      0.185	&      0.329	&     -0.424\\\\         6&	      0.186	&      0.331	&     -0.423\\\\         7&	      0.186	&      0.331	&     -0.423 \\\\ \\hline  \\end{array}",
                  expression:
                    "'\\\\begin{array}{|c|c|c|c|}\\\\hline n \\&     x_1 \\&       x_2   \\&      x_3 \\\\\\\\ \\\\hline          0&\t      0.000\t&      0.000\t&      0.000\\\\\\\\         1\\&\t     -0.200\t\\&      0.222\t\\&     -0.429\\\\\\\\         2\\&\t      0.146\t\\&      0.203\t\\&     -0.517\\\\\\\\         3\\&\t      0.192\t\\&      0.328\t\\&     -0.416\\\\\\\\         4\\&\t      0.181\t\\&      0.332\t\\&     -0.421\\\\\\\\         5\\&\t      0.185\t\\&      0.329\t\\&     -0.424\\\\\\\\         6\\&\t      0.186\t\\&      0.331\t\\&     -0.423\\\\\\\\         7\\&\t      0.186\t\\&      0.331\t\\&     -0.423 \\\\\\\\ \\\\hline  \\\\end{array}'",
                  arg: "display"
                }
              ]
            }),
            _c("div", { staticClass: "mt-0" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\textrm{ Table 7.1}",
                    expression: "'\\\\textrm{ Table 7.1}'",
                    arg: "display"
                  }
                ],
                staticClass: "mt-0"
              })
            ]),
            _vm._v(
              " Because the last two columns in Table 7.1 are identical, you can conclude that to three significant digits the solution is "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "x_1 = 0.186,\\;\\;\\;\\;\\;\\; x_2 = 0.331,\\;\\;\\;\\;\\;\\;x_3 = -0.423",
                  expression:
                    "'x_1 = 0.186,\\\\;\\\\;\\\\;\\\\;\\\\;\\\\; x_2 = 0.331,\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;x_3 = -0.423'",
                  arg: "display"
                }
              ]
            })
          ]
        ),
        _vm._v(
          " The following MATLAB code can be used to generate the results displayed in Table 7.1. "
        ),
        _vm._m(0)
      ]),
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 7.2 The Gauss-Seidel Method ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(
            " In this section we discuss a modification of the Jacobi method called the "
          ),
          _c("deep", [_vm._v("Gauss-Seidel method")]),
          _vm._v(
            ". This modification requires fewer iterations to reach the same accuracy as the Jacobi method. With the Jacobi method, the values of "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(" obtained in the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v("th approximation remain unchanged until the entire "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(n+1)",
                expression: "'(n+1)'"
              }
            ]
          }),
          _vm._v(
            "th approximation has been calculated. With the Gauss-Seidel method, on the other hand, the new values of "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(
            " are used immediately as soon as they are known. That is, once you have determined "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(
            " from the first equation, it's value is then used in the second equation to obtain the new "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_2",
                expression: "'x_2'"
              }
            ]
          }),
          _vm._v(". Similarly, the new "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_2",
                expression: "'x_2'"
              }
            ]
          }),
          _vm._v(" are used in the third equation to obtain the new "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_3",
                expression: "'x_3'"
              }
            ]
          }),
          _vm._v(", as so on. "),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _vm._v(" Example 7.2 "),
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v(" Applying the Gauss-Seidel Method")
              ]),
              _vm._v(
                " Use the Gauss-Seidel Method to approximate the solution of the following system of linear equations "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} 5x_1 - 2x_2 + 3x_3 &= -1\\\\ -3x_1 + 9x_2 + x_3 &= 2\\\\ 2x_1  - x_2 - 7x_3 &= 3 \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} 5x_1 - 2x_2 + 3x_3 \\&= -1\\\\\\\\ -3x_1 + 9x_2 + x_3 \\&= 2\\\\\\\\ 2x_1  - x_2 - 7x_3 \\&= 3 \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " Compute the iterations until two successive approximations are identical when rounded to three significant digits. "
              ),
              _c("br"),
              _vm._v(" We begin by writing the system in the form "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned}x_1& =  \\frac{2}{5}x_2 - \\frac{3}{5}x_3 -\\frac{1}{5} \\\\ x_2&= \\frac{3}{9}x_1  - \\frac{1}{9}x_3 + \\frac{2}{9} \\\\ x_3&=\\frac{2}{7}x_1 - \\frac{1}{7}x_2 -\\frac{3}{7} \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned}x_1\\& =  \\\\frac{2}{5}x_2 - \\\\frac{3}{5}x_3 -\\\\frac{1}{5} \\\\\\\\ x_2\\&= \\\\frac{3}{9}x_1  - \\\\frac{1}{9}x_3 + \\\\frac{2}{9} \\\\\\\\ x_3\\&=\\\\frac{2}{7}x_1 - \\\\frac{1}{7}x_2 -\\\\frac{3}{7} \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " Thus for the Gauss-Seidel method we write the system, for each "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "k = 1,2,\\ldots",
                    expression: "'k = 1,2,\\\\ldots'"
                  }
                ]
              }),
              _vm._v(" as "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} x_1^{(k)}& =  \\frac{2}{5}x_2^{(k-1)} - \\frac{3}{5}x_3^{(k-1)} -\\frac{1}{5} \\\\ x_2^{(k)}&= \\frac{3}{9}x_1^{(k)}  - \\frac{1}{9}x_3^{(k-1)} + \\frac{2}{9} \\\\ x_3^{(k)}&=\\frac{2}{7}x_1^{(k)} - \\frac{1}{7}x_2^{(k)} -\\frac{3}{7} \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} x_1^{(k)}\\& =  \\\\frac{2}{5}x_2^{(k-1)} - \\\\frac{3}{5}x_3^{(k-1)} -\\\\frac{1}{5} \\\\\\\\ x_2^{(k)}\\&= \\\\frac{3}{9}x_1^{(k)}  - \\\\frac{1}{9}x_3^{(k-1)} + \\\\frac{2}{9} \\\\\\\\ x_3^{(k)}\\&=\\\\frac{2}{7}x_1^{(k)} - \\\\frac{1}{7}x_2^{(k)} -\\\\frac{3}{7} \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" We use "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "x_1 = 0,\\;\\;\\;\\; x_2 = 0,\\;\\;\\;\\;\\;x_3 = 0 ",
                    expression:
                      "'x_1 = 0,\\\\;\\\\;\\\\;\\\\; x_2 = 0,\\\\;\\\\;\\\\;\\\\;\\\\;x_3 = 0 '"
                  }
                ]
              }),
              _vm._v(
                " as initial approximation. So the first approximation is "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} x_1& =\\frac{2}{5}(0) - \\frac{3}{5}(0)  -\\frac{1}{5}  \\approx -0.200\\\\ x_2&=  \\frac{3}{9}(-0.200)  - \\frac{1}{9}(0) + \\frac{2}{9} \\approx 0.156\\\\ x_3&= \\frac{2}{7}(-0.200) - \\frac{1}{7}(0.156)   -\\frac{3}{7} \\approx -0.508 \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} x_1\\& =\\\\frac{2}{5}(0) - \\\\frac{3}{5}(0)  -\\\\frac{1}{5}  \\\\approx -0.200\\\\\\\\ x_2\\&=  \\\\frac{3}{9}(-0.200)  - \\\\frac{1}{9}(0) + \\\\frac{2}{9} \\\\approx 0.156\\\\\\\\ x_3\\&= \\\\frac{2}{7}(-0.200) - \\\\frac{1}{7}(0.156)   -\\\\frac{3}{7} \\\\approx -0.508 \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " Continuing this procedure, you obtain the sequence of approximations shown in Table 7.2 "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{array}{|c|c|c|c|}\\hline        n&     x_1 &       x_2   &      x_3 \\\\ \\hline         0	&      0.000 &	      0.000	&      0.000 \\\\         1	&     -0.200 &	      0.156	&     -0.508 \\\\         2	&      0.167 &	      0.334	&     -0.429 \\\\         3	&      0.191 &	      0.333	&     -0.422 \\\\         4	&      0.186 &	      0.331	&     -0.423 \\\\         5	&      0.186 &	      0.331	&     -0.423\\\\ \\hline \\end{array}",
                    expression:
                      "'\\\\begin{array}{|c|c|c|c|}\\\\hline        n\\&     x_1 \\&       x_2   \\&      x_3 \\\\\\\\ \\\\hline         0\t\\&      0.000 \\&\t      0.000\t\\&      0.000 \\\\\\\\         1\t\\&     -0.200 \\&\t      0.156\t\\&     -0.508 \\\\\\\\         2\t\\&      0.167 \\&\t      0.334\t\\&     -0.429 \\\\\\\\         3\t\\&      0.191 \\&\t      0.333\t\\&     -0.422 \\\\\\\\         4\t\\&      0.186 \\&\t      0.331\t\\&     -0.423 \\\\\\\\         5\t\\&      0.186 \\&\t      0.331\t\\&     -0.423\\\\\\\\ \\\\hline \\\\end{array}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", { staticClass: "mt-0" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\textrm{ Table 7.2}",
                      expression: "'\\\\textrm{ Table 7.2}'",
                      arg: "display"
                    }
                  ],
                  staticClass: "mt-0"
                })
              ]),
              _vm._v(
                " We note that the solution that was reached using 7 iterations when the Jacobi Method was used is obtained using 5 iterations of the Gauss-Seidel method. "
              ),
              _c("br"),
              _c("br"),
              _vm._v(
                " The following MATLAB code can be used to generate the results displayed in Table 7.2 "
              ),
              _vm._m(1)
            ]
          ),
          _vm._v(
            " The following is a formal definition of the Gauss-Seidel Method. "
          ),
          _c("div", { staticClass: "note note-definition" }, [
            _c("span", { staticClass: "text-success" }, [
              _vm._v(" Definition 7.2")
            ]),
            _c("br"),
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Gauss-Seidel method")
            ]),
            _vm._v(
              " The Gauss-Seidel iterative method uses components of the vector iterates as soon as they are computed, i.e the components "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\textbf{x}^{(k-1)}",
                  expression: "'\\\\textbf{x}^{(k-1)}'"
                }
              ]
            }),
            _vm._v(" are used to compute all the components "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_i{(k)}",
                  expression: "'x_i{(k)}'"
                }
              ]
            }),
            _vm._v(" of "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\textbf{x}^{(k)}",
                  expression: "'\\\\textbf{x}^{(k)}'"
                }
              ]
            }),
            _c(
              "div",
              {
                staticClass: "table-responsive",
                staticStyle: { width: "100%" }
              },
              [
                _c("table", { staticClass: "table" }, [
                  _c("thead", [
                    _c("tr", [
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value:
                                "x_{i}^{(k)} = \\frac{1}{a_{ii}}\\left[ - \\sum_{j=1}^{i-1} (a_{ij} x_{j}^{(k)}) -         \\sum_{j=i+1}^{n} (a_{ij} x_{j}^{(k-1)}) + b_{i} \\right]",
                              expression:
                                "'x_{i}^{(k)} = \\\\frac{1}{a_{ii}}\\\\left[ - \\\\sum_{j=1}^{i-1} (a_{ij} x_{j}^{(k)}) -         \\\\sum_{j=i+1}^{n} (a_{ij} x_{j}^{(k-1)}) + b_{i} \\\\right]'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "(7.2)",
                              expression: "'(7.2)'",
                              arg: "display"
                            }
                          ]
                        })
                      ])
                    ])
                  ])
                ])
              ]
            ),
            _vm._v(" for each "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "i = 1,2,\\ldots,n",
                  expression: "'i = 1,2,\\\\ldots,n'"
                }
              ]
            }),
            _vm._v(". ")
          ])
        ],
        1
      ),
      _c("div", { staticClass: "mb-3" }, [
        _c(
          "h4",
          { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
          [_vm._v(" 7.3 Divergence and conditions for convergence ")]
        ),
        _c("hr", { staticClass: "blue mb-4 mt-0 " }),
        _vm._v(
          " The iterative methods presented in this section do not always converge. That is, it is possible to apply the Jacobi method or the Gauss-Seidel method to a system of linear equations and obtain a divergent sequence of approximations. In such cases, it is said that the method "
        ),
        _c("span", { staticClass: "font-weight-bold" }, [_vm._v("diverges.")]),
        _c(
          "div",
          {
            staticClass: "my-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _vm._v(" Example 7.3 "),
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v(" An example of divergence")
            ]),
            _vm._v(
              " Use five (5) iterations of both the Jacobi and Gauss-Seidel method to solve the system "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned}x_1 - 5x_2 &= -4\\\\ 7x_1 - x_2 &= 6 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned}x_1 - 5x_2 \\&= -4\\\\\\\\ 7x_1 - x_2 \\&= 6 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" using the initial approximation "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_1,x_2) = (0,0)",
                  expression: "'(x_1,x_2) = (0,0)'"
                }
              ]
            }),
            _vm._v(", and show that both methods diverge."),
            _c("br"),
            _vm._v(" The Jabobi iteration scheme is given by "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned}  x_1^{(k)}  &= 5x_2^{(k-1)} - 4 \\\\  x_2^{(k)}  &= 7x_1^{(k-1)} - 6 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned}  x_1^{(k)}  \\&= 5x_2^{(k-1)} - 4 \\\\\\\\  x_2^{(k)}  \\&= 7x_1^{(k-1)} - 6 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" The Gauss-Seidel iteration scheme is given by "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1^{(k)}  &= 5x_2^{(k-1)} - 4 \\\\  x_2^{(k)}  &= 7x_1^{(k)} - 6 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1^{(k)}  \\&= 5x_2^{(k-1)} - 4 \\\\\\\\  x_2^{(k)}  \\&= 7x_1^{(k)} - 6 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Running the above iterations schemes over 5 iterations gives the following results "
            ),
            _c("div", { staticClass: "container" }, [
              _c("div", { staticClass: "row" }, [
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "\\begin{array}{|c|c|c|}    \\hline    n&     x_1 &       x_2    \\\\ \\hline        0&	          0&	          0\\\\        1&	         -4&	         -6\\\\        2&	        -34&	        -34\\\\        3&	       -174&	       -244\\\\        4&	      -1224&	      -1224\\\\        5&	      -6124&	      -8574\\\\ \\hline  \\end{array}",
                        expression:
                          "'\\\\begin{array}{|c|c|c|}    \\\\hline    n\\&     x_1 \\&       x_2    \\\\\\\\ \\\\hline        0\\&\t          0\\&\t          0\\\\\\\\        1\\&\t         -4\\&\t         -6\\\\\\\\        2\\&\t        -34\\&\t        -34\\\\\\\\        3\\&\t       -174\\&\t       -244\\\\\\\\        4\\&\t      -1224\\&\t      -1224\\\\\\\\        5\\&\t      -6124\\&\t      -8574\\\\\\\\ \\\\hline  \\\\end{array}'",
                        arg: "display"
                      }
                    ]
                  }),
                  _c("div", { staticClass: "mt-0" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "\\textrm{ Table 7.3: Jacobi iteration solution}",
                          expression:
                            "'\\\\textrm{ Table 7.3: Jacobi iteration solution}'",
                          arg: "display"
                        }
                      ],
                      staticClass: "mt-0"
                    })
                  ])
                ]),
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "\\begin{array}{|c|c|c|} \\hline          n&     x_1 &       x_2    \\\\ \\hline         0&	          0&	          0\\\\        1&	         -4&	        -34\\\\         2&	       -174&	      -1224\\\\         3&	      -6124&	     -42874\\\\        4&	    -214374&	   -1500624\\\\        5&	   -7503124&	  -52521874\\\\  \\hline \\end{array}",
                        expression:
                          "'\\\\begin{array}{|c|c|c|} \\\\hline          n\\&     x_1 \\&       x_2    \\\\\\\\ \\\\hline         0\\&\t          0\\&\t          0\\\\\\\\        1\\&\t         -4\\&\t        -34\\\\\\\\         2\\&\t       -174\\&\t      -1224\\\\\\\\         3\\&\t      -6124\\&\t     -42874\\\\\\\\        4\\&\t    -214374\\&\t   -1500624\\\\\\\\        5\\&\t   -7503124\\&\t  -52521874\\\\\\\\  \\\\hline \\\\end{array}'",
                        arg: "display"
                      }
                    ]
                  }),
                  _c("div", { staticClass: "mt-0" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "\\textrm{ Table 7.4: Gauss-Seidel solution}",
                          expression:
                            "'\\\\textrm{ Table 7.4: Gauss-Seidel solution}'",
                          arg: "display"
                        }
                      ],
                      staticClass: "mt-0"
                    })
                  ])
                ])
              ])
            ]),
            _vm._v(" The true solution for the system is "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1 = 1",
                  expression: "'x_1 = 1'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_2 = 1",
                  expression: "'x_2 = 1'"
                }
              ]
            }),
            _vm._v(
              ". But from Tables (7.3) and (7.4) we see that both methods give solutions which become progressively worse with an increase in the number of iterations (i.e the solution diverges). For this particular example, using the Gauss-Seidel doesn't improve the speed of convergence. Instead, the Gauss-Seidel diverges more rapidly. We conclude that with the initial approximation "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1=0",
                  expression: "'x_1=0'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_2=0",
                  expression: "'x_2=0'"
                }
              ]
            }),
            _vm._v(
              ", neither the Jacobi not the Gauss-Seidel method converges to the solution."
            ),
            _c("br"),
            _c("br"),
            _vm._v(
              " The MATLAB codes used to generate the results in Tables (7.3) and (7.4) are given below "
            ),
            _vm._m(2),
            _vm._m(3)
          ]
        ),
        _vm._v(
          " In the remaining part of this section we will discuss manipulation techniques that we can use on the coefficient matrix "
        ),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "A", expression: "'A'" }
          ]
        }),
        _vm._v(
          " to guarantee convergence of the iterations schemes. We begin by defining a special type of coefficient matrix "
        ),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "A", expression: "'A'" }
          ]
        }),
        _vm._v(", called a "),
        _c("span", { staticClass: "font-weight-bold" }, [
          _vm._v("strictly diagonally dominant matrix")
        ]),
        _vm._v(
          ", for which it is guaranteed that both methods will converge. "
        ),
        _c("div", { staticClass: "note note-definition my-3" }, [
          _c("span", { staticClass: "text-success" }, [
            _vm._v(" Definition 7.3")
          ]),
          _c("br"),
          _vm._v(" A "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n \\times n",
                expression: "'n \\\\times n'"
              }
            ]
          }),
          _vm._v(" matrix "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "A",
                expression: "'A'"
              }
            ]
          }),
          _vm._v(" is "),
          _c("span", { staticClass: "font-weight-bold" }, [
            _vm._v("strictly diagonally dominant")
          ]),
          _vm._v(
            " if the absolute value of each entry on the main diagonal is greater than the sum of the absolute values of the other entries in the same row. That is, "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned}|a_{11}| &> |a_{12}|  + |a_{13}|  + \\cdots + |a_{1n}| \\\\ |a_{22}| &> |a_{21}|  + |a_{23}|  + \\cdots + |a_{2n}| \\\\         & \\vdots &\\\\|a_{nn}| &> |a_{n1}|  + |a_{n2}|  + \\cdots + |a_{n,n-1}| \\\\ \\end{aligned}",
                expression:
                  "'\\\\begin{aligned}|a_{11}| \\&\\> |a_{12}|  + |a_{13}|  + \\\\cdots + |a_{1n}| \\\\\\\\ |a_{22}| \\&\\> |a_{21}|  + |a_{23}|  + \\\\cdots + |a_{2n}| \\\\\\\\         \\& \\\\vdots \\&\\\\\\\\|a_{nn}| \\&\\> |a_{n1}|  + |a_{n2}|  + \\\\cdots + |a_{n,n-1}| \\\\\\\\ \\\\end{aligned}'",
                arg: "display"
              }
            ]
          })
        ]),
        _c(
          "div",
          { staticClass: "theorem my-3 p-3 " },
          [
            _c("theorem-color", [_vm._v("Theorem 7.1")]),
            _vm._v(" "),
            _c("i", [
              _vm._v("Convergence of the Jacobi and Gauss-Seidel Methods.")
            ]),
            _vm._v(" If "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "A",
                  expression: "'A'"
                }
              ]
            }),
            _vm._v(
              " is strictly diagonally dominant, then the system of linear equations given by "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "A\\textbf{x}=\\textbf{b}",
                  expression: "'A\\\\textbf{x}=\\\\textbf{b}'"
                }
              ]
            }),
            _vm._v(
              " has a unique solution to which the Jacobi method and the Gauss-Seidel method will converge for any initial approximation. "
            )
          ],
          1
        ),
        _vm._v(" A matrix can be converted to a strictly diagonal form by "),
        _c("span", { staticClass: "font-weight-bold" }, [
          _vm._v("interchanging rows")
        ]),
        _vm._v(" to obtain convergence. "),
        _c(
          "div",
          {
            staticClass: "my-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _vm._v(" Example 7.4 "),
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v(" Improving convergence by interchanging rows")
            ]),
            _vm._v(" Interchange the rows of the following system "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1 - 5x_2 &= -4\\\\ 7x_1 - x_2 &= 6 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1 - 5x_2 \\&= -4\\\\\\\\ 7x_1 - x_2 \\&= 6 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " to obtain one with a strictly diagonal dominant matrix then use seven (7) iterations of both the Jacobi and Gauss-Seidel method to solve the system using the initial approximation "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_1,x_2) = (0,0)",
                  expression: "'(x_1,x_2) = (0,0)'"
                }
              ]
            }),
            _vm._v("."),
            _c("br"),
            _vm._v(" By interchanging the rows of the given system we obtain "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} 7x_1 - x_2 &= 6 \\\\  x_1 - 5x_2 &= -4 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} 7x_1 - x_2 \\&= 6 \\\\\\\\  x_1 - 5x_2 \\&= -4 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Note that the coefficient matrix of the resulting system is strictly diagonally dominant. The Jacobi iteration scheme becomes "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned}  x_1^{(k)}  &= \\frac{1}{7}x_2^{(k-1)} + \\frac{6}{7} \\\\  x_2^{(k)}  &= \\frac{1}{5}x_1^{(k-1)} + \\frac{4}{5} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned}  x_1^{(k)}  \\&= \\\\frac{1}{7}x_2^{(k-1)} + \\\\frac{6}{7} \\\\\\\\  x_2^{(k)}  \\&= \\\\frac{1}{5}x_1^{(k-1)} + \\\\frac{4}{5} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" The Gauss-Seidel iteration scheme is given by "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned}  x_1^{(k)}  &= \\frac{1}{7}x_2^{(k-1)} + \\frac{6}{7} \\\\  x_2^{(k)}  &= \\frac{1}{5}x_1^{(k)} + \\frac{4}{5} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned}  x_1^{(k)}  \\&= \\\\frac{1}{7}x_2^{(k-1)} + \\\\frac{6}{7} \\\\\\\\  x_2^{(k)}  \\&= \\\\frac{1}{5}x_1^{(k)} + \\\\frac{4}{5} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Running the above iterations schemes over 7 iterations gives the following results "
            ),
            _c("div", { staticClass: "container" }, [
              _c("div", { staticClass: "row" }, [
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "\\begin{array}{|c|c|c|}\\hline         n&     x_1&       x_2    \\\\ \\hline         0&	     0.0000	&     0.0000 \\\\         1&	     0.8571	&     0.8000 \\\\         2&	     0.9714	&     0.9714\\\\         3&	     0.9959	&     0.9943\\\\         4&	     0.9992	&     0.9992\\\\         5&	     0.9999	&     0.9998\\\\         6&	     1.0000	&     1.0000\\\\        7&	     1.0000	&     1.0000\\\\ \\hline \\end{array}",
                        expression:
                          "'\\\\begin{array}{|c|c|c|}\\\\hline         n\\&     x_1\\&       x_2    \\\\\\\\ \\\\hline         0\\&\t     0.0000\t\\&     0.0000 \\\\\\\\         1\\&\t     0.8571\t\\&     0.8000 \\\\\\\\         2\\&\t     0.9714\t\\&     0.9714\\\\\\\\         3\\&\t     0.9959\t\\&     0.9943\\\\\\\\         4\\&\t     0.9992\t\\&     0.9992\\\\\\\\         5\\&\t     0.9999\t\\&     0.9998\\\\\\\\         6\\&\t     1.0000\t\\&     1.0000\\\\\\\\        7\\&\t     1.0000\t\\&     1.0000\\\\\\\\ \\\\hline \\\\end{array}'",
                        arg: "display"
                      }
                    ]
                  }),
                  _c("div", { staticClass: "mt-0" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "\\textrm{ Table 7.5: Jacobi iteration solution}",
                          expression:
                            "'\\\\textrm{ Table 7.5: Jacobi iteration solution}'",
                          arg: "display"
                        }
                      ],
                      staticClass: "mt-0"
                    })
                  ])
                ]),
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "\\begin{array}{|c|c|c|}    \\hline    n &     x_1 &       x_2    \\\\ \\hline         0	&     0.0000	&     0.0000\\\\        1	&     0.8571	&     0.9714\\\\        2	&     0.9959	&     0.9992\\\\        3	&     0.9999	&     1.0000\\\\         4	&     1.0000	&     1.0000\\\\         5	&     1.0000	&     1.0000\\\\         6	&     1.0000	&     1.0000\\\\         7	&     1.0000	&     1.0000\\\\     \\hline \\end{array}",
                        expression:
                          "'\\\\begin{array}{|c|c|c|}    \\\\hline    n \\&     x_1 \\&       x_2    \\\\\\\\ \\\\hline         0\t\\&     0.0000\t\\&     0.0000\\\\\\\\        1\t\\&     0.8571\t\\&     0.9714\\\\\\\\        2\t\\&     0.9959\t\\&     0.9992\\\\\\\\        3\t\\&     0.9999\t\\&     1.0000\\\\\\\\         4\t\\&     1.0000\t\\&     1.0000\\\\\\\\         5\t\\&     1.0000\t\\&     1.0000\\\\\\\\         6\t\\&     1.0000\t\\&     1.0000\\\\\\\\         7\t\\&     1.0000\t\\&     1.0000\\\\\\\\     \\\\hline \\\\end{array}'",
                        arg: "display"
                      }
                    ]
                  }),
                  _c("div", { staticClass: "mt-0" }, [
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value: "\\textrm{ Table 7.6: Gauss-Seidel solution}",
                          expression:
                            "'\\\\textrm{ Table 7.6: Gauss-Seidel solution}'",
                          arg: "display"
                        }
                      ],
                      staticClass: "mt-0"
                    })
                  ])
                ])
              ])
            ])
          ]
        ),
        _c(
          "div",
          {
            staticClass: "my-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Example 7.5")
            ]),
            _vm._v(
              " Derive the Jacobi iteration scheme for the following linear system and use ten (10) iterations to approximate the solution "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{array}{ccccccc} x_1 &+& 6 x_2 &-& 3 x_3 &=& -16\\\\ 7 x_1 &+& x_2 &-& x_3 &=& 10\\\\ - 3 x_1 &+& 2 x_2 &-& 10 x_3 &=& -30 \\end{array}",
                  expression:
                    "'\\\\begin{array}{ccccccc} x_1 \\&+\\& 6 x_2 \\&-\\& 3 x_3 \\&=\\& -16\\\\\\\\ 7 x_1 \\&+\\& x_2 \\&-\\& x_3 \\&=\\& 10\\\\\\\\ - 3 x_1 \\&+\\& 2 x_2 \\&-\\& 10 x_3 \\&=\\& -30 \\\\end{array}'",
                  arg: "display"
                }
              ]
            }),
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Solution")
            ]),
            _vm._v(" We observe that the linear system is "),
            _c("span", { staticClass: "font-weight-bold" }, [_vm._v(" not ")]),
            _vm._v(
              " diagonally dominant. Thus, before applying the iteration method, we rearrange the equations as follows "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{array}{ccccccc} 7 x_1 &+& x_2 &-& x_3 &=& 10\\\\ x_1 &+& 6 x_2 &-& 3 x_3 &=& -16\\\\ - 3 x_1 &+& 2 x_2 &-& 10 x_3 &=& -30 \\end{array}",
                  expression:
                    "'\\\\begin{array}{ccccccc} 7 x_1 \\&+\\& x_2 \\&-\\& x_3 \\&=\\& 10\\\\\\\\ x_1 \\&+\\& 6 x_2 \\&-\\& 3 x_3 \\&=\\& -16\\\\\\\\ - 3 x_1 \\&+\\& 2 x_2 \\&-\\& 10 x_3 \\&=\\& -30 \\\\end{array}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Making "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1",
                  expression: "'x_1'"
                }
              ]
            }),
            _vm._v(" , "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_2",
                  expression: "'x_2'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_3",
                  expression: "'x_3'"
                }
              ]
            }),
            _vm._v(", in turn, the subject in each equation gives "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1 &= \\frac{10}{7} - \\frac{x_2}{7} + \\frac{x_3}{7}\\\\ x_2 &= - \\frac{8}{3}- \\frac{x_1}{6} + \\frac{x_3}{2}\\\\ x_3 &= 3 - \\frac{3x_1}{10} + \\frac{x_2}{5} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1 \\&= \\\\frac{10}{7} - \\\\frac{x_2}{7} + \\\\frac{x_3}{7}\\\\\\\\ x_2 \\&= - \\\\frac{8}{3}- \\\\frac{x_1}{6} + \\\\frac{x_3}{2}\\\\\\\\ x_3 \\&= 3 - \\\\frac{3x_1}{10} + \\\\frac{x_2}{5} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Thus, the Jacobi iteration scheme is given by "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1^{(k)} &= \\frac{10}{7} - \\frac{1}{7}x_{2}^{(k-1)} + \\frac{1}{7}x_3^{(k-1)}\\\\ x_2^{(k)} &= - \\frac{8}{3}- \\frac{1}{6}x_1^{(k-1)} + \\frac{1}{2}x_3^{(k-1)}\\\\ x_3^{(k)} &= 3 - \\frac{3}{10}x_1^{(k-1)} + \\frac{1}{5}x_2^{(k-1)} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1^{(k)} \\&= \\\\frac{10}{7} - \\\\frac{1}{7}x_{2}^{(k-1)} + \\\\frac{1}{7}x_3^{(k-1)}\\\\\\\\ x_2^{(k)} \\&= - \\\\frac{8}{3}- \\\\frac{1}{6}x_1^{(k-1)} + \\\\frac{1}{2}x_3^{(k-1)}\\\\\\\\ x_3^{(k)} \\&= 3 - \\\\frac{3}{10}x_1^{(k-1)} + \\\\frac{1}{5}x_2^{(k-1)} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " The results for the first ten iterations are given in the table below "
            ),
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{array}{|c|c|c|c|}    \\hline    iter.& x_1 & x_2 & x_3\\\\ \\hline0 & 0 & 0 & 0 \\\\ 1 & 1.4286& -2.6667& 3.0000\\\\  2 & 2.2381& -1.4048& 2.0381\\\\ 3 & 1.9204& -2.0206& 2.0476\\\\ 4 & 2.0098& -1.9629& 2.0198\\\\ 5 & 1.9975& -1.9917& 2.0045\\\\ 6 & 1.9995& -1.9973& 2.0024\\\\ 7 & 2.0000& -1.9987& 2.0007\\\\ 8 & 1.9999& -1.9996& 2.0003\\\\ 9 & 2.0000& -1.9999& 2.0001\\\\ 10& 2.0000& -2.0000& 2.0000\\\\  \\hline \\end{array}",
                    expression:
                      "'\\\\begin{array}{|c|c|c|c|}    \\\\hline    iter.\\& x_1 \\& x_2 \\& x_3\\\\\\\\ \\\\hline0 \\& 0 \\& 0 \\& 0 \\\\\\\\ 1 \\& 1.4286\\& -2.6667\\& 3.0000\\\\\\\\  2 \\& 2.2381\\& -1.4048\\& 2.0381\\\\\\\\ 3 \\& 1.9204\\& -2.0206\\& 2.0476\\\\\\\\ 4 \\& 2.0098\\& -1.9629\\& 2.0198\\\\\\\\ 5 \\& 1.9975\\& -1.9917\\& 2.0045\\\\\\\\ 6 \\& 1.9995\\& -1.9973\\& 2.0024\\\\\\\\ 7 \\& 2.0000\\& -1.9987\\& 2.0007\\\\\\\\ 8 \\& 1.9999\\& -1.9996\\& 2.0003\\\\\\\\ 9 \\& 2.0000\\& -1.9999\\& 2.0001\\\\\\\\ 10\\& 2.0000\\& -2.0000\\& 2.0000\\\\\\\\  \\\\hline \\\\end{array}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", { staticClass: "mt-0" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\textrm{ Table 7.7: Jacobi iteration for Example 7.5}",
                      expression:
                        "'\\\\textrm{ Table 7.7: Jacobi iteration for Example 7.5}'",
                      arg: "display"
                    }
                  ],
                  staticClass: "mt-0"
                })
              ])
            ])
          ]
        ),
        _c(
          "div",
          {
            staticClass: "my-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Example 7.6")
            ]),
            _vm._v(
              " Derive the Gauss-Siedel iteration scheme for the following linear system and use ten (10) iterations to approximate the solution "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{array}{ccccccc} x_1 &+& 6 x_2 &-& 3 x_3 &=& -16\\\\ 7 x_1 &+& x_2 &-& x_3 &=& 10\\\\ - 3 x_1 &+& 2 x_2 &-& 10 x_3 &=& -30 \\end{array}",
                  expression:
                    "'\\\\begin{array}{ccccccc} x_1 \\&+\\& 6 x_2 \\&-\\& 3 x_3 \\&=\\& -16\\\\\\\\ 7 x_1 \\&+\\& x_2 \\&-\\& x_3 \\&=\\& 10\\\\\\\\ - 3 x_1 \\&+\\& 2 x_2 \\&-\\& 10 x_3 \\&=\\& -30 \\\\end{array}'",
                  arg: "display"
                }
              ]
            }),
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Solution")
            ]),
            _vm._v(" We observe that the linear system is "),
            _c("span", { staticClass: "font-weight-bold" }, [_vm._v(" not ")]),
            _vm._v(
              " diagonally dominant. Thus, before applying the iteration method, we rearrange the equations as follows "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{array}{ccccccc} 7 x_1 &+& x_2 &-& x_3 &=& 10\\\\ x_1 &+& 6 x_2 &-& 3 x_3 &=& -16\\\\ - 3 x_1 &+& 2 x_2 &-& 10 x_3 &=& -30 \\end{array}",
                  expression:
                    "'\\\\begin{array}{ccccccc} 7 x_1 \\&+\\& x_2 \\&-\\& x_3 \\&=\\& 10\\\\\\\\ x_1 \\&+\\& 6 x_2 \\&-\\& 3 x_3 \\&=\\& -16\\\\\\\\ - 3 x_1 \\&+\\& 2 x_2 \\&-\\& 10 x_3 \\&=\\& -30 \\\\end{array}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Making "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_1",
                  expression: "'x_1'"
                }
              ]
            }),
            _vm._v(" , "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_2",
                  expression: "'x_2'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_3",
                  expression: "'x_3'"
                }
              ]
            }),
            _vm._v(", in turn, the subject in each equation gives "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned}x_1 &= \\frac{10}{7} - \\frac{x_2}{7} + \\frac{x_3}{7}\\\\ x_2 &= - \\frac{8}{3}- \\frac{x_1}{6} + \\frac{x_3}{2}\\\\ x_3 &= 3 - \\frac{3x_1}{10} + \\frac{x_2}{5} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned}x_1 \\&= \\\\frac{10}{7} - \\\\frac{x_2}{7} + \\\\frac{x_3}{7}\\\\\\\\ x_2 \\&= - \\\\frac{8}{3}- \\\\frac{x_1}{6} + \\\\frac{x_3}{2}\\\\\\\\ x_3 \\&= 3 - \\\\frac{3x_1}{10} + \\\\frac{x_2}{5} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Thus, the Jacobi iteration scheme is given by "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} x_1^{(k)} &= \\frac{10}{7} - \\frac{1}{7}x_{2}^{(k-1)} + \\frac{1}{7}x_3^{(k-1)}\\\\ x_2^{(k)} &= - \\frac{8}{3}- \\frac{1}{6}x_1^{(k)} + \\frac{1}{2}x_3^{(k-1)}\\\\ x_3^{(k)} &= 3 - \\frac{3}{10}x_1^{(k)} + \\frac{1}{5}x_2^{(k)} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} x_1^{(k)} \\&= \\\\frac{10}{7} - \\\\frac{1}{7}x_{2}^{(k-1)} + \\\\frac{1}{7}x_3^{(k-1)}\\\\\\\\ x_2^{(k)} \\&= - \\\\frac{8}{3}- \\\\frac{1}{6}x_1^{(k)} + \\\\frac{1}{2}x_3^{(k-1)}\\\\\\\\ x_3^{(k)} \\&= 3 - \\\\frac{3}{10}x_1^{(k)} + \\\\frac{1}{5}x_2^{(k)} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " The results for the first ten iterations are given in the table below "
            ),
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{array}{|c|c|c|c|}    \\hline  iter.& x_1 & x_2 & x_3\\\\ \\hline 0 & 0 & 0 & 0 \\\\ 1 &1.4286& -2.9048& 1.9905\\\\ 2 &2.1279& -2.0261& 1.9564\\\\ 3 &1.9975& -2.0214& 1.9965\\\\ 4 &2.0025& -2.0022& 1.9988\\\\ 5 &2.0001& -2.0006& 1.9998\\\\ 6 &2.0001& -2.0001& 2.0000\\\\ 7 &2.0000& -2.0000& 2.0000\\\\ 8 &2.0000& -2.0000& 2.0000\\\\ 9 &2.0000& -2.0000& 2.0000\\\\ 10&2.0000& -2.0000& 2.0000\\\\   \\hline \\end{array}",
                    expression:
                      "'\\\\begin{array}{|c|c|c|c|}    \\\\hline  iter.\\& x_1 \\& x_2 \\& x_3\\\\\\\\ \\\\hline 0 \\& 0 \\& 0 & 0 \\\\\\\\ 1 \\&1.4286\\& -2.9048\\& 1.9905\\\\\\\\ 2 \\&2.1279\\& -2.0261\\& 1.9564\\\\\\\\ 3 \\&1.9975\\& -2.0214\\& 1.9965\\\\\\\\ 4 \\&2.0025\\& -2.0022\\& 1.9988\\\\\\\\ 5 \\&2.0001\\& -2.0006\\& 1.9998\\\\\\\\ 6 \\&2.0001\\& -2.0001\\& 2.0000\\\\\\\\ 7 \\&2.0000\\& -2.0000\\& 2.0000\\\\\\\\ 8 \\&2.0000\\& -2.0000\\& 2.0000\\\\\\\\ 9 \\&2.0000\\& -2.0000\\& 2.0000\\\\\\\\ 10\\&2.0000\\& -2.0000\\& 2.0000\\\\\\\\   \\\\hline \\\\end{array}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", { staticClass: "mt-0" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\textrm{ Table 7.8: Gauss-Siedel iteration for Example 7.6}",
                      expression:
                        "'\\\\textrm{ Table 7.8: Gauss-Siedel iteration for Example 7.6}'",
                      arg: "display"
                    }
                  ],
                  staticClass: "mt-0"
                })
              ])
            ]),
            _vm._v(
              " We observe that the Gauss-Siedel converges much faster than the Jacobi method for the solution of this example. "
            )
          ]
        ),
        _c(
          "div",
          {
            staticClass: "my-4 p-3",
            staticStyle: { "background-color": "#fff3e0" }
          },
          [
            _c(
              "h6",
              { staticClass: "h4-responsive" },
              [
                _vm._v(" Exercise 7.1 "),
                _c("deep", [_vm._v("Jacobi and Gauss-Siedel iteration")])
              ],
              1
            ),
            _c("ol", [
              _c("li", [
                _vm._v(
                  " Derive the Jacobi iteration scheme for the following linear system and use ten iterations to approximate the solutions "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{array}{ccccccc} - 9 x_1 &-& 3 x_2 &+& 3 x_3 &=& 12\\\\ 7 x_1 &-& 10 x_2 &-& x_3 &=& -38\\\\ - 4 x_1 &-& x_2 &+& 6 x_3 &=& -8\\\\ \\end{array}",
                      expression:
                        "'\\\\begin{array}{ccccccc} - 9 x_1 \\&-\\& 3 x_2 \\&+\\& 3 x_3 \\&=\\& 12\\\\\\\\ 7 x_1 \\&-\\& 10 x_2 \\&-\\& x_3 \\&=\\& -38\\\\\\\\ - 4 x_1 \\&-\\& x_2 \\&+\\& 6 x_3 \\&=\\& -8\\\\\\\\ \\\\end{array}'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("li", [
                _vm._v(
                  " Derive the Gauss-Siedel iteration scheme for the following linear system and use eight (6) iterations to approximate the solution "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{array}{ccccccc} - 8 x_1 &-& 3 x_2 &+& x_3 &=& -24\\\\ x_1 &+& 3 x_2 &+& 10 x_3 &=& -12\\\\ 2 x_1 &+& 9 x_2 &-& 3 x_3 &=& 28\\\\ \\end{array}",
                      expression:
                        "'\\\\begin{array}{ccccccc} - 8 x_1 \\&-\\& 3 x_2 \\&+\\& x_3 \\&=\\& -24\\\\\\\\ x_1 \\&+\\& 3 x_2 \\&+\\& 10 x_3 \\&=\\& -12\\\\\\\\ 2 x_1 \\&+\\& 9 x_2 \\&-\\& 3 x_3 \\&=\\& 28\\\\\\\\ \\\\end{array}'",
                      arg: "display"
                    }
                  ]
                }),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", [
                    _vm._v(
                      " Would the Jacobi method converge in applied directly to solve the following linear system? "
                    ),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "\\begin{aligned} 4x_1 - x_2 + 2x_3 &= -1\\\\ 6x_1 + 4x_2 + 3x_3 &= 2\\\\ x_1 + x_2 - 3x_3 &= 5 \\end{aligned}",
                          expression:
                            "'\\\\begin{aligned} 4x_1 - x_2 + 2x_3 \\&= -1\\\\\\\\ 6x_1 + 4x_2 + 3x_3 \\&= 2\\\\\\\\ x_1 + x_2 - 3x_3 \\&= 5 \\\\end{aligned}'",
                          arg: "display"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _vm._v(
                      " How can the system be rearranged to a form that would converge when solved using the Jacobi or Gauss Siedel method? "
                    )
                  ])
                ])
              ]),
              _c("li", [
                _vm._v(" The linear system "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} 10x_1 + x_2 + x_3 = 12, x_1 + 10x_2 + x_3 = 12, x_1 + x_2 + 10x_3 = 12 \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} 10x_1 + x_2 + x_3 = 12, x_1 + 10x_2 + x_3 = 12, x_1 + x_2 + 10x_3 = 12 \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" has the unique solution "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1 = x_2 = x_3 = 1",
                      expression: "'x_1 = x_2 = x_3 = 1'"
                    }
                  ]
                }),
                _vm._v("."),
                _c("br"),
                _vm._v(" Starting from the initial guess "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1^{(0)} = x_2^{(0)} = x_3^{(0)} = 0",
                      expression: "'x_1^{(0)} = x_2^{(0)} = x_3^{(0)} = 0'"
                    }
                  ]
                }),
                _vm._m(4)
              ]),
              _c("li", [
                _vm._v(" Let "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "A = \\begin{bmatrix} 3&1&1\\\\ 2&4& -1\\\\ -1&1&3 \\end{bmatrix}\\;\\;\\; \\textrm{ and } \\;\\;\\;  b = \\begin{bmatrix} 2\\\\-2\\\\-5 \\end{bmatrix}",
                      expression:
                        "'A = \\\\begin{bmatrix} 3\\&1\\&1\\\\\\\\ 2\\&4\\& -1\\\\\\\\ -1\\&1\\&3 \\\\end{bmatrix}\\\\;\\\\;\\\\; \\\\textrm{ and } \\\\;\\\\;\\\\;  b = \\\\begin{bmatrix} 2\\\\\\\\-2\\\\\\\\-5 \\\\end{bmatrix}'",
                      arg: "display"
                    }
                  ]
                }),
                _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                  _c("li", [
                    _vm._v(
                      " Will both Jacobi and Gauss-Seidel iterations converge for the problem "
                    ),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "Ax = b",
                          expression: "'Ax = b'"
                        }
                      ]
                    })
                  ]),
                  _c("li", [
                    _vm._v(" Solve "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "Ax = b",
                          expression: "'Ax = b'"
                        }
                      ]
                    }),
                    _vm._v(
                      " by Jacobi iteration up to three digits (i.e. you can stop the iteration as soon as the first three digits get stabilized in each "
                    ),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "x_1, x_2, x_3",
                          expression: "'x_1, x_2, x_3'"
                        }
                      ]
                    }),
                    _vm._v(".) (iv) Solve "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "Ax=b",
                          expression: "'Ax=b'"
                        }
                      ]
                    }),
                    _vm._v(" by Gauss-Seidel iteration up to three digits. ")
                  ])
                ])
              ])
            ])
          ]
        )
      ])
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "font-italic my-3" }, [
      _vm._v(" clear all"),
      _c("br"),
      _vm._v(" clc "),
      _c("br"),
      _vm._v(" % MATLAB code for Jacobi method solution of the system "),
      _c("br"),
      _vm._v(" % 5*x1 - 2*x2 + 3*x3 = -1; "),
      _c("br"),
      _vm._v(" % -3*x1 + 9*x2 + x3 = 2; "),
      _c("br"),
      _vm._v(" % 2*x1 - x2 - 7*x3 = 3;"),
      _c("br"),
      _vm._v(" %Put inititial conditions"),
      _c("br"),
      _vm._v(" x1(1) = 0; x2(1) = 0; x3(1) = 0;"),
      _c("br"),
      _vm._v(" N = 100; % N is the maximum number of iterations"),
      _c("br"),
      _vm._v(" n = 1; % n is a counte to keep track of iterations"),
      _c("br"),
      _vm._v(" TOL = 0.0001; %Tolerance level (required accuracy)"),
      _c("br"),
      _vm._v(" while n < N "),
      _c("div", { staticClass: "ml-4" }, [
        _vm._v(" x1(n+1) = -1/5 + (2/5)*x2(n) - (3/5)*x3(n);"),
        _c("br"),
        _vm._v(" x2(n+1) = 2/9 + (3/9)*x1(n) - (1/9)*x3(n);"),
        _c("br"),
        _vm._v(" x3(n+1) = -3/7 + (2/7)*x1(n) - (1/7)*x2(n); ")
      ]),
      _vm._v(" %Add stopping criteria"),
      _c("br"),
      _vm._v(
        " dx1 = abs(x1(n+1)-x1(n)); %difference between two successive solns of x1"
      ),
      _c("br"),
      _vm._v(
        " dx2 = abs(x2(n+1)-x2(n)); %difference between two successive solns of x2"
      ),
      _c("br"),
      _vm._v(
        " dx3 = abs(x3(n+1)-x3(n)); %difference between two successive solns of x3"
      ),
      _c("br"),
      _c("br"),
      _c("div", { staticClass: "ml-2" }, [
        _vm._v(" if (dx1 < TOL) & (dx2 < TOL) & (dx3 < TOL) "),
        _c("div", { staticClass: "ml-3" }, [_vm._v(" break ")]),
        _vm._v(" end"),
        _c("br"),
        _vm._v(" n = n + 1; %update the iteration counter ")
      ]),
      _vm._v(" end "),
      _c("br"),
      _vm._v(" %Print the results of the first 8 iterations "),
      _c("br"),
      _vm._v(" for i = 1:8 "),
      _c("br"),
      _vm._v(
        " fprintf('%10.0f\\t %10.3f\\t %10.3f\\t %10.3f\\n',i-1,x1(i),x2(i),x3(i)); "
      ),
      _c("br"),
      _vm._v(" end ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "font-italic my-3" }, [
      _vm._v(" clear all"),
      _c("br"),
      _vm._v(" clc "),
      _c("br"),
      _vm._v(" % MATLAB code for Gauss-Seidel method solution of the system "),
      _c("br"),
      _vm._v(" % 5*x1 - 2*x2 + 3*x3 = -1; "),
      _c("br"),
      _vm._v(" % -3*x1 + 9*x2 + x3 = 2; "),
      _c("br"),
      _vm._v(" % 2*x1 - x2 - 7*x3 = 3;"),
      _c("br"),
      _vm._v(" %Put inititial conditions"),
      _c("br"),
      _vm._v(" x1(1) = 0; x2(1) = 0; x3(1) = 0;"),
      _c("br"),
      _vm._v(" N = 100; % N is the maximum number of iterations"),
      _c("br"),
      _vm._v(" n = 1; % n is a counte to keep track of iterations"),
      _c("br"),
      _vm._v(" TOL = 0.0001; %Tolerance level (required accuracy)"),
      _c("br"),
      _vm._v(" while n < N "),
      _c("div", { staticClass: "ml-4" }, [
        _vm._v(" x1(n+1) = -1/5 + (2/5)*x2(n) - (3/5)*x3(n);"),
        _c("br"),
        _vm._v(" x2(n+1) = 2/9 + (3/9)*x1(n+1) - (1/9)*x3(n);"),
        _c("br"),
        _vm._v(" x3(n+1) = -3/7 + (2/7)*x1(n+1) - (1/7)*x2(n+1) ")
      ]),
      _vm._v(" %Add stopping criteria"),
      _c("br"),
      _vm._v(
        " dx1 = abs(x1(n+1)-x1(n)); %difference between two successive solns of x1"
      ),
      _c("br"),
      _vm._v(
        " dx2 = abs(x2(n+1)-x2(n)); %difference between two successive solns of x2"
      ),
      _c("br"),
      _vm._v(
        " dx3 = abs(x3(n+1)-x3(n)); %difference between two successive solns of x3"
      ),
      _c("br"),
      _c("br"),
      _c("div", { staticClass: "ml-2" }, [
        _vm._v(" if ((dx1 < TOL) & (dx2 < TOL)) & (dx3 < TOL) "),
        _c("div", { staticClass: "ml-3" }, [_vm._v(" break ")]),
        _vm._v(" end"),
        _c("br"),
        _vm._v(" n = n + 1; %update the iteration counter ")
      ]),
      _vm._v(" end "),
      _c("br"),
      _vm._v(" %Print the results of the first 8 iterations "),
      _c("br"),
      _vm._v(" for i = 1:n "),
      _c("br"),
      _vm._v(
        " fprintf('%10.0f\\t %10.3f\\t %10.3f\\t %10.3f\\n',i-1,x1(i),x2(i),x3(i)); "
      ),
      _c("br"),
      _vm._v(" end ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "font-italic my-3" }, [
      _vm._v(" clear all"),
      _c("br"),
      _vm._v(" clc"),
      _c("br"),
      _vm._v(" % MATLAB code for Jacobi method solution of diverging system"),
      _c("br"),
      _vm._v(" % x1 - 5*x2 = -4;"),
      _c("br"),
      _vm._v(" % 7*x1 - x2 = 6;"),
      _c("br"),
      _vm._v(" %Put inititial conditions"),
      _c("br"),
      _vm._v(" x1(1) = 0; x2(1) = 0;"),
      _c("br"),
      _vm._v(" for n = 1:5 % 5 iterations "),
      _c("div", { staticClass: "ml-4" }, [
        _vm._v(" x1(n+1) = 5*x2(n) - 4;"),
        _c("br"),
        _vm._v(" x2(n+1) = 7*x1(n) - 6; ")
      ]),
      _vm._v(" end "),
      _c("br"),
      _vm._v(" %Print the results of the first 8 iterations"),
      _c("br"),
      _vm._v(" for i = 1:n+1"),
      _c("br"),
      _vm._v(" fprintf('%10.0f\\t %10.0f\\t %10.0f\\n',i-1,x1(i),x2(i));"),
      _c("br"),
      _vm._v(" end ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "font-italic my-3" }, [
      _vm._v(" clear all"),
      _c("br"),
      _vm._v(" clc "),
      _c("br"),
      _vm._v(
        " % MATLAB code for Gauss-Seidel method solution of diverging system "
      ),
      _c("br"),
      _vm._v(" % x1 - 5*x2 = -4; "),
      _c("br"),
      _vm._v(" % 7*x1 - x2 = 6; "),
      _c("br"),
      _vm._v(" %Put inititial conditions"),
      _c("br"),
      _vm._v(" x1(1) = 0; x2(1) = 0; "),
      _c("br"),
      _vm._v(" for n = 1:5 % 5 iterations "),
      _c("div", { staticClass: "ml-4" }, [
        _vm._v(" x1(n+1) = 5*x2(n) - 4; "),
        _c("br"),
        _vm._v(" x2(n+1) = 7*x1(n+1) - 6; ")
      ]),
      _vm._v(" end %Print the results of the first 8 iterations "),
      _c("br"),
      _vm._v(" for i = 1:n+1 "),
      _c("br"),
      _vm._v(" fprintf('%10.0f\\t %10.0f\\t %10.0f\\n',i-1,x1(i),x2(i)); "),
      _c("br"),
      _vm._v(" end ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
      _c("li", [
        _vm._v(
          " Perform three iterations of the Jacobi Method and compute the error at each iteration level."
        )
      ]),
      _c("li", [
        _vm._v(
          " Perform three iterations of the Jacobi Method and compute the error at each iteration level."
        )
      ])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}