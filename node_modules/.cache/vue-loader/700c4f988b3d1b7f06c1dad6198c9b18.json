{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit4.vue?vue&type=template&id=851e34f4&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit4.vue","mtime":1598826859558},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}