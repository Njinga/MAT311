{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit7.vue?vue&type=template&id=84c9a7ee&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit7.vue","mtime":1600580948784},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2IGNsYXNzPSJ1bml0NyI+CiAgICAgICAgPHNlY3Rpb24gY2xhc3M9InB5LTMgcHgtMyBteC00IGdyZXktdGV4dCIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I2ZmZjNlMCI+CiAgICAgICAgICAgIDxoMyBjbGFzcz0iIGgzLXJlc3BvbnNpdmUgZm9udC13ZWlnaHQtYm9sZCI+IDcuIEl0ZXJhdGl2ZSB0ZWNobmlxdWVzIGZvciBzb2x2aW5nIDxzcGFuIHYta2F0ZXg9IidcXHRleHRiZntBfVxcdGV4dGJme3h9PVxcdGV4dGJme2J9JyI+PC9zcGFuPjwvaDM+CiAgICAgICAgPC9zZWN0aW9uPgoKCiAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImRhcmstZ3JleS10ZXh0IG1iLTQgcHQtMyBweC0zIG14LTQiPgoKICAgICAgICAgICAgQ29uc2lkZXIgc29sdmluZyBsaW5lYXIgc3lzdGVtcyBvZiB0aGVtIGZvcm06CiAgICAgICAgICAgIDxzcGFuIHYta2F0ZXg9IidcXHRleHRiZntBfVxcdGV4dGJme3h9PVxcdGV4dGJme2J9JyI+PC9zcGFuPiB3aGVyZQogICAgICAgICAgICA8c3BhbiB2LWthdGV4PSInXFx0ZXh0YmZ7QX09XFxsZWZ0WyBhX3tpan1cXHJpZ2h0XSBfe25cXHRpbWVzIG59LFxcOyBcXHRleHRiZnt4fT1cXGxlZnRbIHhfe2l9XFxyaWdodF0gX3tuXFx0aW1lcyAxfSxcXDtcXHRleHRiZntifT0gXFxsZWZ0WyBiX3tpfVxccmlnaHRdIF97blxcdGltZXMgMX0uJyI+PC9zcGFuPiBBc3N1bWUgdGhhdCB0aGUgc3lzdGVtIGhhcyBhIHVuaXF1ZQogICAgICAgICAgICBzb2x1dGlvbi4gTGV0IDxzcGFuIHYta2F0ZXg9IidcXHRleHRiZnt4fV57XFxhc3QgfSciPjwvc3Bhbj4gYmUgdGhlIHNvbHV0aW9uLiBUaGVuIDxzcGFuIHYta2F0ZXg9IidcXHRleHRiZnt4fV57XFxhc3QgfT1cXHRleHRiZntBfV57LTF9XFx0ZXh0YmZ7Yn0uJyI+PC9zcGFuPgoKCiAgICAgICAgICAgIDxiciAvPgoKICAgICAgICAgICAgVG8gc29sdmUgPHNwYW4gdi1rYXRleD0iJ1xcdGV4dGJme0F9XFx0ZXh0YmZ7eH09XFx0ZXh0YmZ7Yn0nIj48L3NwYW4+IGJ5IGl0ZXJhdGlvbiBvbmUgc3RhcnRzIHdpdGggYW4KICAgICAgICAgICAgPGk+aW5pdGlhbCBhcHByb3hpbWF0aW9uPC9pPiA8c3BhbiB2LWthdGV4PSIne1xcYmYgeF57KDApfX0nIj48L3NwYW4+IHRvIHRoZSBzb2x1dGlvbiA8c3BhbiB2LWthdGV4PSIne1xcYmYgeH0nIj48L3NwYW4+CiAgICAgICAgICAgIGFuZCB0aGVuIGdlbmVyYXRlcyBhIHNlcXVlbmNlIDxzcGFuIHYta2F0ZXg9Iid7XFxiZiB4fV57KGspfVxcfV97az0xfV57XFxpbmZ0eX0nIj48L3NwYW4+CiAgICAgICAgICAgIGNvbnZlcmdpbmcgdG8gPHNwYW4gdi1rYXRleD0iJ3tcXGJmIHh9JyI+PC9zcGFuPi4gVGhlIGtleSBpcyB0byB0cmFuc2Zvcm0gdGhlIG9yaWdpbmFsIHN5c3RlbQogICAgICAgICAgICA8c3BhbiB2LWthdGV4PSInQSB7XFxiZiB4fSA9IHtcXGJmIGJ9JyI+PC9zcGFuPiBpbnRvIGEgZm9ybSA8c3BhbiB2LWthdGV4PSIne1xcYmYgeH0gPSBUIHtcXGJmIHh9ICsge1xcYmYgY30nIj48L3NwYW4+IGFuZAogICAgICAgICAgICBwcm9kdWNlIHRoZSBzZXF1ZW5jZSBvZiBpdGVyYXRlcyBmcm9tIHRoZSBydWxlCgogICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ3tcXGJmIHheeyhrKX19ID0gVCB7XFxiZiB4Xnsoay0xKX19ICsge1xcYmYgY30uJyI+PC9kaXY+CgogICAgICAgICAgICBKdXN0IGxpa2UgaW4gZml4ZWQgcG9pbnQgaXRlcmF0aW9uLiBJdGVyYXRpb25zIHN0b3Agd2hlbiB0aGUgcmVsYXRpdmUKICAgICAgICAgICAgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBzdWJzZXF1ZW50IGl0ZXJhdGVzCgogICAgICAgICAgICA8IS0tRXF1YXRpb24gNy4xLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUiIHN0eWxlPSJ3aWR0aDoxMDAlOyI+CgogICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxmcmFjeyBcXHx7XFxiZiB4XnsoaysxKX19IC0ge1xcYmYgeF57KGspfX1cXHxfe1xcaW5mdHl9fSB7XFx8e1xcYmYgeF57KGsrMSl9fVxcfF97XFxpbmZ0eX19IFxcbGVxIFRPTCciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJyg3LjEpJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoPgoKCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gNy4xLS0+CiAgICAgICAgICAgIHdoZXJlIDxzcGFuIHYta2F0ZXg9IidUT0wnIj48L3NwYW4+IGlzIHByZS1zZXQgdG9sZXJhbmNlIGxldmVsLiBFeGFtcGxlcyBvZiBpdGVyYXRpdmUgbWV0aG9kcyBpbmNsdWRlcyB0aGUgSmFjb2JpLCBHYXVzcy1TZWlkZWwsIENvbmp1Z2F0ZSBHcmFkaWVudCBhbmQgbWFueSBvdGhlcnMuCgogICAgICAgICAgICA8IS0tU2VjdGlvbiA3LjEtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktMyBweS0zIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iaDQtcmVzcG9uc2l2ZSBwdC0yIGZvbnQtd2VpZ2h0LWJvbGQgYmx1ZS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICA3LjEgSmFjb2JpIE1ldGhvZAogICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICAgIDxociBjbGFzcz0iYmx1ZSBtYi00IG10LTAgIj4KCiAgICAgICAgICAgICAgICBJbiB0aGlzIHNlY3Rpb24gd2UgbG9vayBhdCB0d28gaXRlcmF0aXZlIHRlY2huaXF1ZXMgZm9yIHNvbHZpbmcgdGhlIHN5c3RlbQoKICAgICAgICAgICAgICAgIDxzcGFuIHYta2F0ZXg9IidcXHRleHRiZntBfVxcdGV4dGJme3h9ID0gXFx0ZXh0YmZ7Yn0nIj48L3NwYW4+IHdoaWNoIGlzIGEgc3lzdGVtIG9mIDxzcGFuIHYta2F0ZXg9IiduJyI+PC9zcGFuPiBsaW5lYXIgZXF1YXRpb25zIGluIDxzcGFuIHYta2F0ZXg9IiduJyI+PC9zcGFuPiB2YXJpYWJsZXMgZ2l2ZW4gYXMKCgogICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9IGFfezExfXhfMSArIGFfezEyfXhfMiArIFxcbGRvdHMgKyBhX3sxbn14X24gXCY9IGJfMVxcXFwgYV97MjF9eF8xICsgYV97MjJ9eF8yICsgXFxsZG90cyArIGFfezJufXhfbiBcJj0gYl8yXFxcXCBcXDtcXDtcXDtcXDtcXDtcXDtcXDsgXFx2ZG90cyAgICAgICAgICAgICAgICAgICAgICBcJlxcdmRvdHMgICBcXFxcIGFfe24xfXhfMSArIGFfe24yfXhfMiArIFxcbGRvdHMgKyBhX3tubn14X24gXCY9IGJfbiBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKICAgICAgICAgICAgICAgIFdlIGFzc3VtZSB0aGF0IHRoZSBhYm92ZSBzeXN0ZW0gaGFzIGEgdW5pcXVlIHNvbHV0aW9uIGFuZCB0aGF0IHRoZSBjb2VmZmljaWVudCBtYXRyaXggPHNwYW4gdi1rYXRleD0iJ1xcdGV4dGJme0F9JyI+PC9zcGFuPiBoYXMgbm8gemVyb3Mgb24gaXRzIG1haW4gZGlhZ29uYWwuIElmIGFueSBvZiB0aGUgZGlhZ29uYWwgZW50cmllcyA8c3BhbiB2LWthdGV4PSInYV97MTF9LGFfezIyfSxcXGxkb3RzLGFfe25ufSciPjwvc3Bhbj4gYXJlIHplcm8sIHRoZW4gcm93cyBvciBjb2x1bW5zIG11c3QgYmUgaW50ZXJjaGFuZ2VkIHRvIG9idGFpbiBhIGNvZWZmaWNpZW50IG1hdHJpeCB0aGF0IGhhcyBub256ZXJvIGVudHJpZXMgb24gdGhlIG1haW4gZGlhZ29uYWwuCgogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICBUaGUgSmFjb2JpIGl0ZXJhdGlvbiBtZXRob2QgaXMgZGVmaW5lZCBiZWxvdwoKICAgICAgICAgICAgICAgIDwhLS1EZWZpbml0aW9uIDcuMS0tPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibm90ZSBub3RlLWRlZmluaXRpb24gbXktMyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtc3VjY2VzcyI+IERlZmluaXRpb24gNy4xPC9zcGFuPjxicj4KICAgICAgICAgICAgICAgICAgICBUaGUgPGk+SmFjb2JpIGl0ZXJhdGl2ZSBtZXRob2Q8L2k+IGlzIG9idGFpbmVkIGJ5IHNvbHZpbmcgdGhlIDxzcGFuIHYta2F0ZXg9IidpJyI+PC9zcGFuPnRoIGVxdWF0aW9uIDxzcGFuIHYta2F0ZXg9IidcXHRleHRiZntBfVxcdGV4dGJme3h9ID0gXFx0ZXh0YmZ7Yn0nIj48L3NwYW4+IGZvciA8c3BhbiB2LWthdGV4PSIneF9pJyI+PC9zcGFuPiB0byBvYnRhaW4gKHByb3ZpZGVkIDxzcGFuIHYta2F0ZXg9IidhX3tpaX0gXFxuZXEgMCciPjwvc3Bhbj4pCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSIneF9pID0gXFxzdW1fe1xcc3RhY2tyZWx7aiA9IDF9e2ogXFxuZXEgaX19Xm4gXFxsZWZ0KC1cXGZyYWN7YV97aWp9eF9qfXthX3tpaX19XFxyaWdodCkgKyBcXGZyYWN7Yl9pfXthX3tpaX19LFxcO1xcO1xcO1xcOyBcXHRleHR7Zm9yIH1cXDtcXDtcXDsgaSA9IDEsMixcXGxkb3RzLCBuJyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIEZvciBlYWNoIDxzcGFuIHYta2F0ZXg9IidrIFxcZ2VxIDEnIj48L3NwYW4+LCBnZW5lcmF0ZSB0aGUgY29tcG9uZW50cyA8c3BhbiB2LWthdGV4PSIneF9pXnsoayl9JyI+PC9zcGFuPiBvZiA8c3BhbiB2LWthdGV4PSInXFx0ZXh0YmZ7eH1eeyhrKX0nIj48L3NwYW4+IGZyb20gdGhlIGNvbXBvbmVudHMgb2YgPHNwYW4gdi1rYXRleD0iJ1xcdGV4dGJme3h9Xnsoay0xKX0nIj48L3NwYW4+IGJ5CgoKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9Iid4X2leeyhrKX0gPSBcXGZyYWN7MX17YV97aWl9fVxcbGVmdFtcXHN1bV97XFxzdGFja3JlbHtqID0gMX17aiBcXG5lcSBpfX1ebiBcXGxlZnQoLSBhX3tpan14X2peeyhrLTEpfVxccmlnaHQpICsgYl9pXFxyaWdodF0sXFw7XFw7XFw7XFw7IFxcdGV4dHtmb3IgfVxcO1xcO1xcOyBpID0gMSwyLFxcbGRvdHMsIG4nIj48L2Rpdj4KCgoKCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0uL0RlZmluaXRpb24gNy4xLS0+CiAgICAgICAgICAgICAgICBUaGUgcHJvY2VkdXJlIGZvciB0aGUgSmFib2JpIG1ldGhvZCBpcyBhcyBmb2xsb3dzOwoKICAgICAgICAgICAgICAgIDxvbD4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIEZpcnN0IHNvbHZlIHRoZSBmaXJzdCBlcXVhdGlvbiBmb3IgPHNwYW4gdi1rYXRleD0iJ3hfMSciPjwvc3Bhbj4sIHNlY29uZCBlcXVhdGlvbiBmb3IgPHNwYW4gdi1rYXRleD0iJ3hfMiciPjwvc3Bhbj4gYW5kIHNvIG9uIGFzIGZvbGxvd3M6CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH14XzEgIFwmPSBcXGZyYWN7MX17YV97MTF9fShiXzEgLSBhX3sxMn14XzIgLSBhX3sxM314XzMgLSBcXGNkb3RzIC0gYV97MW59eF9uKVxcXFwgeF8yICBcJj0gXFxmcmFjezF9e2FfezIyfX0oYl8yIC0gYV97MjF9eF8xIC0gYV97MjN9eF8zIC0gXFxjZG90cyAtIGFfezJufXhfbilcXFxcICAgICAgXCYgXFx2ZG90cyBcXFxcIHhfbiAgXCY9IFxcZnJhY3sxfXthX3tubn19KGJfbiAtIGFfe24xfXhfMSAtIGFfe24yfXhfMiAtIFxcY2RvdHMgLSBhX3tuLG4tMX14X3tuLTF9KSBcXGVuZHthbGlnbmVkfSAnIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIEdpdmVuIGFuIGluaXRpYWwgZ3Vlc3MsIGRlbm90ZWQgYnkgPHNwYW4gdi1rYXRleD0iJ3hfMV57KDApfSwgeF8yXnsoMCl9LFxcbGRvdHMseF9uXnsoMCl9JyI+PC9zcGFuPiwgZGV2ZWxvcCB0aGUgSmFjb2JpIGl0ZXJhdGlvbiBzY2hlbWUgZm9yIDxzcGFuIHYta2F0ZXg9IidrID0gMSwyLFxcbGRvdHMsJyI+PC9zcGFuPiBhcyAgZm9sbG93czoKCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSBfMV57KGspfSAgXCY9IFxcZnJhY3sxfXthX3sxMX19XFxsZWZ0KGJfMSAtIGFfezEyfXhfMl57KGstMSl9IC0gYV97MTN9eF8zXnsoay0xKX0gLSBcXGNkb3RzIC0gYV97MW59eF9uXnsoay0xKX1cXHJpZ2h0KVxcXFwgXzJeeyhrKX0gIFwmPSBcXGZyYWN7MX17YV97MjJ9fVxcbGVmdChiXzIgLSBhX3syMX14XzFeeyhrLTEpfSAtIGFfezIzfXhfM157KGstMSl9IC0gXFxjZG90cyAtIGFfezJufXhfbl57KGstMSl9XFxyaWdodClcXFxcICAgICAgXCYgXFx2ZG90cyBcXFxcIHhfbl57KGspfSAgXCY9IFxcZnJhY3sxfXthX3tubn19XFxsZWZ0KGJfbiAtIGFfe24xfXhfMV57KGstMSl9IC0gYV97bjJ9eF8yXnsoay0xKX0gLSBcXGNkb3RzIC0gYV97bixuLTF9eF97bi0xfV57KGstMSl9XFxyaWdodCkgXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgVGhlIDxpPmZpcnN0IGFwcHJveGltYXRpb24gKGl0ZXJhdGlvbik8L2k+IG9mIHRoZSBzb2x1dGlvbiwgPHNwYW4gdi1rYXRleD0iJyh4XzFeeygxKX0seF8yXnsoMSl9LFxcbGRvdHMseF9uXnsoMSl9KSciPjwvc3Bhbj4gaXMgb2J0YWluZWQgYnkgIHN1YnN0aXR1dGluZyB0aGUgaW5pdGlhbCBndWVzcyA8c3BhbiB2LWthdGV4PSInKHhfMV57KDApfSx4XzJeeygwKX0sXFxsZG90cyx4X25eeygwKX0pJyI+PC9zcGFuPiBpbnRvIHRoZSByaWdodCBoYW5kIHNpZGUgb2YgdGhlIHJlLXdyaXR0ZW4gZXF1YXRpb25zLiBBZnRlciB0aGlzIHByb2NlZHVyZSBoYXMgYmVlbiBjb21wbGV0ZWQsIHdlIHNheSB0aGF0IG9uZSBpdGVyYXRpb24gaGFzIGJlZW4gcGVyZm9ybWVkLgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICBJbiB0aGUgc2FtZSB3YXksIHRoZSBzZWNvbmQgYXBwcm94aW1hdGlvbiBpcyBmb3JtZWQgYnkgc3Vic3RpdHV0aW5nICB0aGUgZmlyc3QgYXBwcm94aW1hdGlvbidzIDxzcGFuIHYta2F0ZXg9Iid4JyI+PC9zcGFuPi12YWx1ZXMgaW50byB0aGUgcmlnaHQgaGFuZCBzaWRlIG9mIHRoZSByZS13cml0dGVuIGVxdWF0aW9ucy4gQnkgcmVwZWF0ZWQgaXRlcmF0aW9ucywgeW91IHdpbGwgZm9ybSBhIHNlcXVlbmNlIG9mIGFwcHJveGltYXRpb25zIHRoYXQgb2Z0ZW4gY29udmVyZ2VzIHRvIHRoZSBhY3R1YWwgc29sdXRpb24uCiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvb2w+CgogICAgICAgICAgICAgICAgPCEtLUV4YW1wbGUgNy4xLS0+CiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlM2U1IiBjbGFzcz0ibXktMyBtYi00IHAtMyI+CiAgICAgICAgICAgICAgICAgICAgRXhhbXBsZSA3LjEgICA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+IEFwcGx5aW5nIHRoZSBKYWNvYmkgTWV0aG9kPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICBVc2UgdGhlIEphY29iaSBNZXRob2QgdG8gYXBwcm94aW1hdGUgdGhlIHNvbHV0aW9uIG9mIHRoZSBmb2xsb3dpbmcgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9IDV4XzEgLSAyeF8yICsgM3hfMyBcJj0gLTFcXFxcIC0zeF8xICsgOXhfMiArIHhfMyBcJj0gMlxcXFwgMnhfMSAgLSB4XzIgLSA3eF8zIFwmPSAzIFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICBDb21wdXRlIHRoZSBpdGVyYXRpb25zIHVudGlsIHR3byBzdWNjZXNzaXZlIGFwcHJveGltYXRpb25zIGFyZSBpZGVudGljYWwgd2hlbiByb3VuZGVkIHRvIHRocmVlIHNpZ25pZmljYW50IGRpZ2l0cy4gPGk+VGhpcyBpcyBjYWxsZWQgdGhlIHN0b3BwaW5nIGNyaXRlcmlhLjwvaT4gPGJyIC8+CgogICAgICAgICAgICAgICAgICAgIFdlIGJlZ2luIGJ5IHdyaXRpbmcgdGhlIHN5c3RlbSBpbiB0aGUgZm9ybQoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH0geF8xXCYgPSAtXFxmcmFjezF9ezV9ICsgXFxmcmFjezJ9ezV9eF8yIC0gXFxmcmFjezN9ezV9eF8zXFxcXCB4XzJcJj0gXFxmcmFjezJ9ezl9ICsgXFxmcmFjezN9ezl9eF8xICAtIFxcZnJhY3sxfXs5fXhfM1xcXFwgeF8zXCY9LVxcZnJhY3szfXs3fSArIFxcZnJhY3syfXs3fXhfMSAtIFxcZnJhY3sxfXs3fXhfMiBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBUaHVzLCB0aGUgSmFjb2JpIGl0ZXJhdGlvbiBzY2hlbWUgaXMKCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSB4XzFeeygxKX1cJiA9IC1cXGZyYWN7MX17NX0gKyBcXGZyYWN7Mn17NX14XzJeeygwKX0gLSBcXGZyYWN7M317NX14XzNeeygwKX1cXFxcIHhfMl57KDEpfVwmPSBcXGZyYWN7Mn17OX0gKyBcXGZyYWN7M317OX14XzFeeygwKX0gIC0gXFxmcmFjezF9ezl9eF8zXnsoMCl9XFxcXCB4XzNeeygxKX1cJj0tXFxmcmFjezN9ezd9ICsgXFxmcmFjezJ9ezd9eF8xXnsoMCl9IC0gXFxmcmFjezF9ezd9eF8yXnsoMCl9IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIElmIHRoZSBpbml0aWFsIGFwcHJveGltYXRpb24gaXMgbm90IGdpdmVuLCB1c2UKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9Iid4XzFeeygwKX0gPSAwLFxcO1xcO1xcO1xcOyB4XzJeeygwKX0gPSAwLFxcO1xcO1xcO1xcO1xcO3hfM157KDApfSA9IDAgJyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIGFzIGEgY29udmVuaWVudCBpbml0aWFsIGFwcHJveGltYXRpb24uIFNvIHRoZSBmaXJzdCBhcHByb3hpbWF0aW9uIGlzCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSB4XzFeeygxKX1cJiA9IC1cXGZyYWN7MX17NX0gKyBcXGZyYWN7Mn17NX0oMCkgLSBcXGZyYWN7M317NX0oMCkgXFxhcHByb3ggLTAuMjAwXFxcXCB4XzJeeygxKX1cJj0gXFxmcmFjezJ9ezl9ICsgXFxmcmFjezN9ezl9KDApICAtIFxcZnJhY3sxfXs5fSgwKSBcXGFwcHJveCAwLjIyMlxcXFwgeF8zXnsoMCl9XCY9LVxcZnJhY3szfXs3fSArIFxcZnJhY3syfXs3fSgwKSAtIFxcZnJhY3sxfXs3fSgwKSBcXGFwcHJveCAtMC40MjkgXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgQ29udGludWluZyB0aGlzIHByb2NlZHVyZSwgeW91IG9idGFpbiB0aGUgc2VxdWVuY2Ugb2YgYXBwcm94aW1hdGlvbnMgc2hvd24gaW4gVGFibGUgNy4xCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthcnJheX17fGN8Y3xjfGN8fVxcaGxpbmUgbiBcJiAgICAgeF8xIFwmICAgICAgIHhfMiAgIFwmICAgICAgeF8zIFxcXFwgXFxobGluZSAgICAgICAgICAwJgkgICAgICAwLjAwMAkmICAgICAgMC4wMDAJJiAgICAgIDAuMDAwXFxcXCAgICAgICAgIDFcJgkgICAgIC0wLjIwMAlcJiAgICAgIDAuMjIyCVwmICAgICAtMC40MjlcXFxcICAgICAgICAgMlwmCSAgICAgIDAuMTQ2CVwmICAgICAgMC4yMDMJXCYgICAgIC0wLjUxN1xcXFwgICAgICAgICAzXCYJICAgICAgMC4xOTIJXCYgICAgICAwLjMyOAlcJiAgICAgLTAuNDE2XFxcXCAgICAgICAgIDRcJgkgICAgICAwLjE4MQlcJiAgICAgIDAuMzMyCVwmICAgICAtMC40MjFcXFxcICAgICAgICAgNVwmCSAgICAgIDAuMTg1CVwmICAgICAgMC4zMjkJXCYgICAgIC0wLjQyNFxcXFwgICAgICAgICA2XCYJICAgICAgMC4xODYJXCYgICAgICAwLjMzMQlcJiAgICAgLTAuNDIzXFxcXCAgICAgICAgIDdcJgkgICAgICAwLjE4NglcJiAgICAgIDAuMzMxCVwmICAgICAtMC40MjMgXFxcXCBcXGhsaW5lICBcXGVuZHthcnJheX0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTAiIHYta2F0ZXg6ZGlzcGxheT0iJ1xcdGV4dHJteyBUYWJsZSA3LjF9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIEJlY2F1c2UgdGhlIGxhc3QgdHdvIGNvbHVtbnMgaW4gVGFibGUgNy4xIGFyZSBpZGVudGljYWwsIHlvdSBjYW4gY29uY2x1ZGUgdGhhdCB0byB0aHJlZSBzaWduaWZpY2FudAogICAgICAgICAgICAgICAgICAgIGRpZ2l0cyB0aGUgc29sdXRpb24gaXMKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9Iid4XzEgPSAwLjE4NixcXDtcXDtcXDtcXDtcXDtcXDsgeF8yID0gMC4zMzEsXFw7XFw7XFw7XFw7XFw7XFw7eF8zID0gLTAuNDIzJyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS5FeGFtcGxlLyA3LjEtLT4KICAgICAgICAgICAgICAgIFRoZSBmb2xsb3dpbmcgTUFUTEFCIGNvZGUgY2FuIGJlIHVzZWQgdG8gZ2VuZXJhdGUgdGhlIHJlc3VsdHMgZGlzcGxheWVkIGluIFRhYmxlIDcuMS4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvbnQtaXRhbGljIG15LTMiPgogICAgICAgICAgICAgICAgICAgIGNsZWFyIGFsbDxiciAvPgogICAgICAgICAgICAgICAgICAgIGNsYyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAlIE1BVExBQiBjb2RlIGZvciBKYWNvYmkgbWV0aG9kIHNvbHV0aW9uIG9mIHRoZSBzeXN0ZW0gPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgJSAgICAgNSp4MSAtIDIqeDIgKyAzKngzID0gIC0xOyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAlICAgIC0zKngxICsgOSp4MiArICAgeDMgPSAgIDI7IDxiciAvPgogICAgICAgICAgICAgICAgICAgICUgICAgIDIqeDEgLSAgeDIgIC0gNyp4MyA9ICAgMzs8YnIgLz4KICAgICAgICAgICAgICAgICAgICAlUHV0IGluaXRpdGlhbCBjb25kaXRpb25zPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgeDEoMSkgPSAwOyB4MigxKSA9IDA7IHgzKDEpID0gMDs8YnIgLz4KICAgICAgICAgICAgICAgICAgICBOID0gMTAwOyAgJSBOIGlzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBpdGVyYXRpb25zPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgbiA9IDE7ICAlIG4gaXMgYSBjb3VudGUgdG8ga2VlcCB0cmFjayBvZiBpdGVyYXRpb25zPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgVE9MID0gMC4wMDAxOyAlVG9sZXJhbmNlIGxldmVsIChyZXF1aXJlZCBhY2N1cmFjeSk8YnIgLz4KICAgICAgICAgICAgICAgICAgICB3aGlsZSBuICZsdDsgTgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgeDEobisxKSA9IC0xLzUgKyAoMi81KSp4MihuKSAtICgzLzUpKngzKG4pOzxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICB4MihuKzEpID0gIDIvOSArICgzLzkpKngxKG4pIC0gKDEvOSkqeDMobik7PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIHgzKG4rMSkgPSAtMy83ICsgKDIvNykqeDEobikgLSAoMS83KSp4MihuKTsKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgJUFkZCBzdG9wcGluZyBjcml0ZXJpYTxiciAvPgogICAgICAgICAgICAgICAgICAgIGR4MSA9IGFicyh4MShuKzEpLXgxKG4pKTsgJWRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc3VjY2Vzc2l2ZSBzb2xucyBvZiB4MTxiciAvPgogICAgICAgICAgICAgICAgICAgIGR4MiA9IGFicyh4MihuKzEpLXgyKG4pKTsgJWRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc3VjY2Vzc2l2ZSBzb2xucyBvZiB4MjxiciAvPgogICAgICAgICAgICAgICAgICAgIGR4MyA9IGFicyh4MyhuKzEpLXgzKG4pKTsgJWRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc3VjY2Vzc2l2ZSBzb2xucyBvZiB4MzxiciAvPjxiciAvPgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC0yIj4KICAgICAgICAgICAgICAgICAgICAgICAgaWYgIChkeDEgICZsdDsgVE9MKSAmIChkeDIgICZsdDsgVE9MKSAmIChkeDMgJmx0OyBUT0wpCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTMiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICBlbmQ8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4gKyAxOyAldXBkYXRlIHRoZSBpdGVyYXRpb24gY291bnRlcgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBlbmQgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgJVByaW50IHRoZSByZXN1bHRzIG9mIHRoZSBmaXJzdCA4IGl0ZXJhdGlvbnMgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgZm9yIGkgPSAxOjggPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgZnByaW50ZignJTEwLjBmXHQgJTEwLjNmXHQgJTEwLjNmXHQgJTEwLjNmXG4nLGktMSx4MShpKSx4MihpKSx4MyhpKSk7IDxiciAvPgogICAgICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tU2VjdGlvbiA3LjEtLT4KICAgICAgICAgICAgPCEtLVNlY3Rpb24gNy4yLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTMiPgogICAgICAgICAgICAgICAgPGg0IGNsYXNzPSJoNC1yZXNwb25zaXZlIHB0LTIgZm9udC13ZWlnaHQtYm9sZCBibHVlLXRleHQiPgogICAgICAgICAgICAgICAgICAgIDcuMiBUaGUgR2F1c3MtU2VpZGVsIE1ldGhvZAogICAgICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgICAgIDxociBjbGFzcz0iYmx1ZSBtYi00IG10LTAgIj4KCiAgICAgICAgICAgICAgICBJbiB0aGlzIHNlY3Rpb24gd2UgZGlzY3VzcyBhIG1vZGlmaWNhdGlvbiBvZiB0aGUgSmFjb2JpIG1ldGhvZCBjYWxsZWQgdGhlCiAgICAgICAgICAgICAgICA8ZGVlcD5HYXVzcy1TZWlkZWwgbWV0aG9kPC9kZWVwPi4gVGhpcyBtb2RpZmljYXRpb24gcmVxdWlyZXMgZmV3ZXIgaXRlcmF0aW9ucwogICAgICAgICAgICAgICAgdG8gcmVhY2ggdGhlIHNhbWUgYWNjdXJhY3kgYXMgdGhlIEphY29iaSBtZXRob2QuIFdpdGggdGhlIEphY29iaSBtZXRob2QsIHRoZQogICAgICAgICAgICAgICAgdmFsdWVzIG9mIDxzcGFuIHYta2F0ZXg9Iid4X2knIj48L3NwYW4+IG9idGFpbmVkICBpbiB0aGUgPHNwYW4gdi1rYXRleD0iJ24nIj48L3NwYW4+dGggYXBwcm94aW1hdGlvbiByZW1haW4gdW5jaGFuZ2VkIHVudGlsCiAgICAgICAgICAgICAgICB0aGUgZW50aXJlIDxzcGFuIHYta2F0ZXg9IicobisxKSciPjwvc3Bhbj50aCBhcHByb3hpbWF0aW9uIGhhcyBiZWVuIGNhbGN1bGF0ZWQuIFdpdGggdGhlIEdhdXNzLVNlaWRlbAogICAgICAgICAgICAgICAgbWV0aG9kLCBvbiB0aGUgb3RoZXIgaGFuZCwgdGhlIG5ldyB2YWx1ZXMgb2YgPHNwYW4gdi1rYXRleD0iJ3hfaSciPjwvc3Bhbj4gYXJlIHVzZWQgaW1tZWRpYXRlbHkgYXMKICAgICAgICAgICAgICAgIHNvb24gYXMgdGhleSBhcmUga25vd24uIFRoYXQgaXMsIG9uY2UgeW91IGhhdmUgZGV0ZXJtaW5lZCA8c3BhbiB2LWthdGV4PSIneF8xJyI+PC9zcGFuPiBmcm9tCiAgICAgICAgICAgICAgICB0aGUgZmlyc3QgZXF1YXRpb24sIGl0J3MgdmFsdWUgaXMgdGhlbiB1c2VkIGluIHRoZSBzZWNvbmQgZXF1YXRpb24gdG8gb2J0YWluIHRoZSBuZXcgPHNwYW4gdi1rYXRleD0iJ3hfMiciPjwvc3Bhbj4uIFNpbWlsYXJseSwKICAgICAgICAgICAgICAgIHRoZSBuZXcgPHNwYW4gdi1rYXRleD0iJ3hfMSciPjwvc3Bhbj4gYW5kIDxzcGFuIHYta2F0ZXg9Iid4XzInIj48L3NwYW4+IGFyZSB1c2VkIGluIHRoZSB0aGlyZCBlcXVhdGlvbiB0byBvYnRhaW4gdGhlIG5ldyA8c3BhbiB2LWthdGV4PSIneF8zJyI+PC9zcGFuPiwgYXMgc28gb24uCgoKICAgICAgICAgICAgICAgIDwhLS1FeGFtcGxlIDcuMi0tPgogICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNSIgY2xhc3M9Im15LTMgbWItNCBwLTMiPgogICAgICAgICAgICAgICAgICAgIEV4YW1wbGUgNy4yICA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+IEFwcGx5aW5nIHRoZSBHYXVzcy1TZWlkZWwgTWV0aG9kPC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICBVc2UgdGhlIEdhdXNzLVNlaWRlbCBNZXRob2QgdG8gYXBwcm94aW1hdGUgdGhlIHNvbHV0aW9uIG9mIHRoZSBmb2xsb3dpbmcgc3lzdGVtIG9mIGxpbmVhciBlcXVhdGlvbnMKCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSA1eF8xIC0gMnhfMiArIDN4XzMgXCY9IC0xXFxcXCAtM3hfMSArIDl4XzIgKyB4XzMgXCY9IDJcXFxcIDJ4XzEgIC0geF8yIC0gN3hfMyBcJj0gMyBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBDb21wdXRlIHRoZSBpdGVyYXRpb25zIHVudGlsIHR3byBzdWNjZXNzaXZlIGFwcHJveGltYXRpb25zIGFyZSBpZGVudGljYWwgd2hlbiByb3VuZGVkIHRvIHRocmVlIHNpZ25pZmljYW50IGRpZ2l0cy4gPGJyIC8+CgogICAgICAgICAgICAgICAgICAgIFdlIGJlZ2luIGJ5IHdyaXRpbmcgdGhlIHN5c3RlbSBpbiB0aGUgZm9ybQoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH14XzFcJiA9ICBcXGZyYWN7Mn17NX14XzIgLSBcXGZyYWN7M317NX14XzMgLVxcZnJhY3sxfXs1fSBcXFxcIHhfMlwmPSBcXGZyYWN7M317OX14XzEgIC0gXFxmcmFjezF9ezl9eF8zICsgXFxmcmFjezJ9ezl9IFxcXFwgeF8zXCY9XFxmcmFjezJ9ezd9eF8xIC0gXFxmcmFjezF9ezd9eF8yIC1cXGZyYWN7M317N30gXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgVGh1cyBmb3IgdGhlIEdhdXNzLVNlaWRlbCBtZXRob2Qgd2Ugd3JpdGUgdGhlIHN5c3RlbSwgZm9yIGVhY2ggPHNwYW4gdi1rYXRleD0iJ2sgPSAxLDIsXFxsZG90cyciPjwvc3Bhbj4gYXMKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9IHhfMV57KGspfVwmID0gIFxcZnJhY3syfXs1fXhfMl57KGstMSl9IC0gXFxmcmFjezN9ezV9eF8zXnsoay0xKX0gLVxcZnJhY3sxfXs1fSBcXFxcIHhfMl57KGspfVwmPSBcXGZyYWN7M317OX14XzFeeyhrKX0gIC0gXFxmcmFjezF9ezl9eF8zXnsoay0xKX0gKyBcXGZyYWN7Mn17OX0gXFxcXCB4XzNeeyhrKX1cJj1cXGZyYWN7Mn17N314XzFeeyhrKX0gLSBcXGZyYWN7MX17N314XzJeeyhrKX0gLVxcZnJhY3szfXs3fSBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBXZSB1c2UgPHNwYW4gdi1rYXRleD0iJ3hfMSA9IDAsXFw7XFw7XFw7XFw7IHhfMiA9IDAsXFw7XFw7XFw7XFw7XFw7eF8zID0gMCAnIj48L3NwYW4+IGFzIGluaXRpYWwgYXBwcm94aW1hdGlvbi4KICAgICAgICAgICAgICAgICAgICBTbyB0aGUgZmlyc3QgYXBwcm94aW1hdGlvbiBpcwoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH0geF8xXCYgPVxcZnJhY3syfXs1fSgwKSAtIFxcZnJhY3szfXs1fSgwKSAgLVxcZnJhY3sxfXs1fSAgXFxhcHByb3ggLTAuMjAwXFxcXCB4XzJcJj0gIFxcZnJhY3szfXs5fSgtMC4yMDApICAtIFxcZnJhY3sxfXs5fSgwKSArIFxcZnJhY3syfXs5fSBcXGFwcHJveCAwLjE1NlxcXFwgeF8zXCY9IFxcZnJhY3syfXs3fSgtMC4yMDApIC0gXFxmcmFjezF9ezd9KDAuMTU2KSAgIC1cXGZyYWN7M317N30gXFxhcHByb3ggLTAuNTA4IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgQ29udGludWluZyB0aGlzIHByb2NlZHVyZSwgeW91IG9idGFpbiB0aGUgc2VxdWVuY2Ugb2YgYXBwcm94aW1hdGlvbnMgc2hvd24gaW4gVGFibGUgNy4yCgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e3xjfGN8Y3xjfH1cXGhsaW5lICAgICAgICBuXCYgICAgIHhfMSBcJiAgICAgICB4XzIgICBcJiAgICAgIHhfMyBcXFxcIFxcaGxpbmUgICAgICAgICAwCVwmICAgICAgMC4wMDAgXCYJICAgICAgMC4wMDAJXCYgICAgICAwLjAwMCBcXFxcICAgICAgICAgMQlcJiAgICAgLTAuMjAwIFwmCSAgICAgIDAuMTU2CVwmICAgICAtMC41MDggXFxcXCAgICAgICAgIDIJXCYgICAgICAwLjE2NyBcJgkgICAgICAwLjMzNAlcJiAgICAgLTAuNDI5IFxcXFwgICAgICAgICAzCVwmICAgICAgMC4xOTEgXCYJICAgICAgMC4zMzMJXCYgICAgIC0wLjQyMiBcXFxcICAgICAgICAgNAlcJiAgICAgIDAuMTg2IFwmCSAgICAgIDAuMzMxCVwmICAgICAtMC40MjMgXFxcXCAgICAgICAgIDUJXCYgICAgICAwLjE4NiBcJgkgICAgICAwLjMzMQlcJiAgICAgLTAuNDIzXFxcXCBcXGhsaW5lIFxcZW5ke2FycmF5fSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMCIgdi1rYXRleDpkaXNwbGF5PSInXFx0ZXh0cm17IFRhYmxlIDcuMn0nIj48L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBXZSBub3RlIHRoYXQgdGhlIHNvbHV0aW9uIHRoYXQgd2FzIHJlYWNoZWQgdXNpbmcgNyBpdGVyYXRpb25zIHdoZW4gdGhlIEphY29iaSBNZXRob2Qgd2FzIHVzZWQgaXMgb2J0YWluZWQgdXNpbmcKICAgICAgICAgICAgICAgICAgICA1IGl0ZXJhdGlvbnMgb2YgdGhlIEdhdXNzLVNlaWRlbCBtZXRob2QuCgogICAgICAgICAgICAgICAgICAgIDxiciAvPjxiciAvPgoKICAgICAgICAgICAgICAgICAgICBUaGUgZm9sbG93aW5nIE1BVExBQiBjb2RlIGNhbiBiZSB1c2VkIHRvIGdlbmVyYXRlIHRoZSByZXN1bHRzIGRpc3BsYXllZCBpbiBUYWJsZSA3LjIKCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9udC1pdGFsaWMgbXktMyI+CiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyIGFsbDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICBjbGMgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICUgTUFUTEFCIGNvZGUgZm9yIEdhdXNzLVNlaWRlbCBtZXRob2Qgc29sdXRpb24gb2YgdGhlIHN5c3RlbSA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgJSAgICAgNSp4MSAtIDIqeDIgKyAzKngzID0gIC0xOyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgJSAgICAtMyp4MSArIDkqeDIgKyAgIHgzID0gICAyOyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgJSAgICAgMip4MSAtICB4MiAgLSA3KngzID0gICAzOzxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAlUHV0IGluaXRpdGlhbCBjb25kaXRpb25zPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIHgxKDEpID0gMDsgeDIoMSkgPSAwOyB4MygxKSA9IDA7PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIE4gPSAxMDA7ICAlIE4gaXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIGl0ZXJhdGlvbnM8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgbiA9IDE7ICAlIG4gaXMgYSBjb3VudGUgdG8ga2VlcCB0cmFjayBvZiBpdGVyYXRpb25zPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIFRPTCA9IDAuMDAwMTsgJVRvbGVyYW5jZSBsZXZlbCAocmVxdWlyZWQgYWNjdXJhY3kpPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIG4gJmx0OyBOCgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxKG4rMSkgPSAtMS81ICsgKDIvNSkqeDIobikgLSAoMy81KSp4MyhuKTs8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyKG4rMSkgPSAgMi85ICsgKDMvOSkqeDEobisxKSAtICgxLzkpKngzKG4pOzxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeDMobisxKSA9IC0zLzcgKyAoMi83KSp4MShuKzEpIC0gKDEvNykqeDIobisxKQogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgICAgICAlQWRkIHN0b3BwaW5nIGNyaXRlcmlhPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIGR4MSA9IGFicyh4MShuKzEpLXgxKG4pKTsgJWRpZmZlcmVuY2UgYmV0d2VlbiB0d28gc3VjY2Vzc2l2ZSBzb2xucyBvZiB4MTxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICBkeDIgPSBhYnMoeDIobisxKS14MihuKSk7ICVkaWZmZXJlbmNlIGJldHdlZW4gdHdvIHN1Y2Nlc3NpdmUgc29sbnMgb2YgeDI8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgZHgzID0gYWJzKHgzKG4rMSkteDMobikpOyAlZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBzdWNjZXNzaXZlIHNvbG5zIG9mIHgzPGJyIC8+PGJyIC8+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtbC0yIj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAgKChkeDEgICZsdDsgVE9MKSAmIChkeDIgICZsdDsgVE9MKSkgJiAoZHgzICZsdDsgVE9MKQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTMiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuICsgMTsgJXVwZGF0ZSB0aGUgaXRlcmF0aW9uIGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICBlbmQgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICVQcmludCB0aGUgcmVzdWx0cyBvZiB0aGUgZmlyc3QgOCBpdGVyYXRpb25zIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSA9IDE6biA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgZnByaW50ZignJTEwLjBmXHQgJTEwLjNmXHQgJTEwLjNmXHQgJTEwLjNmXG4nLGktMSx4MShpKSx4MihpKSx4MyhpKSk7IDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0uL2V4YW1wbGUgNy4yLS0+CiAgICAgICAgICAgICAgICBUaGUgZm9sbG93aW5nIGlzIGEgZm9ybWFsIGRlZmluaXRpb24gb2YgdGhlIEdhdXNzLVNlaWRlbCBNZXRob2QuCgogICAgICAgICAgICAgICAgPCEtLURlZmluaXRpb24gNy4yLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJub3RlIG5vdGUtZGVmaW5pdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InRleHQtc3VjY2VzcyI+IERlZmluaXRpb24gNy4yPC9zcGFuPjxicj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+R2F1c3MtU2VpZGVsIG1ldGhvZDwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgVGhlIEdhdXNzLVNlaWRlbCBpdGVyYXRpdmUgbWV0aG9kIHVzZXMgY29tcG9uZW50cyBvZiB0aGUgdmVjdG9yIGl0ZXJhdGVzIGFzIHNvb24gYXMgdGhleSBhcmUgY29tcHV0ZWQsIGkuZSB0aGUgY29tcG9uZW50cyA8c3BhbiB2LWthdGV4PSInXFx0ZXh0YmZ7eH1eeyhrLTEpfSciPjwvc3Bhbj4gYXJlIHVzZWQgdG8gY29tcHV0ZSBhbGwgdGhlIGNvbXBvbmVudHMgPHNwYW4gdi1rYXRleD0iJ3hfaXsoayl9JyI+PC9zcGFuPiBvZiA8c3BhbiB2LWthdGV4PSInXFx0ZXh0YmZ7eH1eeyhrKX0nIj48L3NwYW4+CgoKICAgICAgICAgICAgICAgICAgICA8IS0tRXF1YXRpb24gNy4yLS0+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGFibGUtcmVzcG9uc2l2ZSIgc3R5bGU9IndpZHRoOjEwMCU7Ij4KCiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSIneF97aX1eeyhrKX0gPSBcXGZyYWN7MX17YV97aWl9fVxcbGVmdFsgLSBcXHN1bV97aj0xfV57aS0xfSAoYV97aWp9IHhfe2p9Xnsoayl9KSAtICAgICAgICAgXFxzdW1fe2o9aSsxfV57bn0gKGFfe2lqfSB4X3tqfV57KGstMSl9KSArIGJfe2l9IFxccmlnaHRdJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDcuMiknIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgoKICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiA3LjItLT4KICAgICAgICAgICAgICAgICAgICBmb3IgZWFjaCA8c3BhbiB2LWthdGV4PSInaSA9IDEsMixcXGxkb3RzLG4nIj48L3NwYW4+LgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS4vRGVmaW5pdGlvbiA3LjItLT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL1NlY3Rpb24gNy4yLS0+CiAgICAgICAgICAgIDwhLS1TZWN0aW9uIDcuMy0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYi0zIj4KICAgICAgICAgICAgICAgIDxoNCBjbGFzcz0iaDQtcmVzcG9uc2l2ZSBwdC0yIGZvbnQtd2VpZ2h0LWJvbGQgYmx1ZS10ZXh0Ij4KICAgICAgICAgICAgICAgICAgICA3LjMgRGl2ZXJnZW5jZSBhbmQgY29uZGl0aW9ucyBmb3IgY29udmVyZ2VuY2UKICAgICAgICAgICAgICAgIDwvaDQ+CiAgICAgICAgICAgICAgICA8aHIgY2xhc3M9ImJsdWUgbWItNCBtdC0wICI+CgogICAgICAgICAgICAgICAgVGhlIGl0ZXJhdGl2ZSBtZXRob2RzIHByZXNlbnRlZCBpbiB0aGlzIHNlY3Rpb24gZG8gbm90IGFsd2F5cyBjb252ZXJnZS4KICAgICAgICAgICAgICAgIFRoYXQgaXMsIGl0IGlzIHBvc3NpYmxlIHRvIGFwcGx5IHRoZSBKYWNvYmkgbWV0aG9kIG9yIHRoZSBHYXVzcy1TZWlkZWwKICAgICAgICAgICAgICAgIG1ldGhvZCB0byBhIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIGFuZCBvYnRhaW4gYSBkaXZlcmdlbnQgc2VxdWVuY2UKICAgICAgICAgICAgICAgIG9mIGFwcHJveGltYXRpb25zLiBJbiBzdWNoIGNhc2VzLCBpdCBpcyBzYWlkIHRoYXQgdGhlIG1ldGhvZCA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+ZGl2ZXJnZXMuPC9zcGFuPgoKCiAgICAgICAgICAgICAgICA8IS0tRXhhbXBsZSA3LjMtLT4KICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNlMmUzZTUiIGNsYXNzPSJteS0zIG1iLTQgcC0zIj4KICAgICAgICAgICAgICAgICAgICBFeGFtcGxlIDcuMyAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPiBBbiBleGFtcGxlIG9mIGRpdmVyZ2VuY2U8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIFVzZSBmaXZlICg1KSBpdGVyYXRpb25zIG9mIGJvdGggdGhlIEphY29iaSBhbmQgR2F1c3MtU2VpZGVsIG1ldGhvZCB0byBzb2x2ZSB0aGUgc3lzdGVtCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfXhfMSAtIDV4XzIgXCY9IC00XFxcXCA3eF8xIC0geF8yIFwmPSA2IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIHVzaW5nIHRoZSBpbml0aWFsIGFwcHJveGltYXRpb24gPHNwYW4gdi1rYXRleD0iJyh4XzEseF8yKSA9ICgwLDApJyI+PC9zcGFuPiwgYW5kIHNob3cgdGhhdCBib3RoIG1ldGhvZHMgZGl2ZXJnZS48YnIgLz4KCiAgICAgICAgICAgICAgICAgICAgVGhlIEphYm9iaSBpdGVyYXRpb24gc2NoZW1lIGlzIGdpdmVuIGJ5CgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSAgeF8xXnsoayl9ICBcJj0gNXhfMl57KGstMSl9IC0gNCBcXFxcICB4XzJeeyhrKX0gIFwmPSA3eF8xXnsoay0xKX0gLSA2IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIFRoZSBHYXVzcy1TZWlkZWwgaXRlcmF0aW9uIHNjaGVtZSBpcyBnaXZlbiBieQoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH0geF8xXnsoayl9ICBcJj0gNXhfMl57KGstMSl9IC0gNCBcXFxcICB4XzJeeyhrKX0gIFwmPSA3eF8xXnsoayl9IC0gNiBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKCiAgICAgICAgICAgICAgICAgICAgUnVubmluZyB0aGUgYWJvdmUgaXRlcmF0aW9ucyAgc2NoZW1lcyBvdmVyIDUgaXRlcmF0aW9ucyBnaXZlcyB0aGUgZm9sbG93aW5nIHJlc3VsdHMKCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthcnJheX17fGN8Y3xjfH0gICAgXFxobGluZSAgICBuXCYgICAgIHhfMSBcJiAgICAgICB4XzIgICAgXFxcXCBcXGhsaW5lICAgICAgICAwXCYJICAgICAgICAgIDBcJgkgICAgICAgICAgMFxcXFwgICAgICAgIDFcJgkgICAgICAgICAtNFwmCSAgICAgICAgIC02XFxcXCAgICAgICAgMlwmCSAgICAgICAgLTM0XCYJICAgICAgICAtMzRcXFxcICAgICAgICAzXCYJICAgICAgIC0xNzRcJgkgICAgICAgLTI0NFxcXFwgICAgICAgIDRcJgkgICAgICAtMTIyNFwmCSAgICAgIC0xMjI0XFxcXCAgICAgICAgNVwmCSAgICAgIC02MTI0XCYJICAgICAgLTg1NzRcXFxcIFxcaGxpbmUgIFxcZW5ke2FycmF5fSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0wIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMCIgdi1rYXRleDpkaXNwbGF5PSInXFx0ZXh0cm17IFRhYmxlIDcuMzogSmFjb2JpIGl0ZXJhdGlvbiBzb2x1dGlvbn0nIj48L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FycmF5fXt8Y3xjfGN8fSBcXGhsaW5lICAgICAgICAgIG5cJiAgICAgeF8xIFwmICAgICAgIHhfMiAgICBcXFxcIFxcaGxpbmUgICAgICAgICAwXCYJICAgICAgICAgIDBcJgkgICAgICAgICAgMFxcXFwgICAgICAgIDFcJgkgICAgICAgICAtNFwmCSAgICAgICAgLTM0XFxcXCAgICAgICAgIDJcJgkgICAgICAgLTE3NFwmCSAgICAgIC0xMjI0XFxcXCAgICAgICAgIDNcJgkgICAgICAtNjEyNFwmCSAgICAgLTQyODc0XFxcXCAgICAgICAgNFwmCSAgICAtMjE0Mzc0XCYJICAgLTE1MDA2MjRcXFxcICAgICAgICA1XCYJICAgLTc1MDMxMjRcJgkgIC01MjUyMTg3NFxcXFwgIFxcaGxpbmUgXFxlbmR7YXJyYXl9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0wIiB2LWthdGV4OmRpc3BsYXk9IidcXHRleHRybXsgVGFibGUgNy40OiBHYXVzcy1TZWlkZWwgc29sdXRpb259JyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBUaGUgdHJ1ZSBzb2x1dGlvbiBmb3IgdGhlIHN5c3RlbSBpcyA8c3BhbiB2LWthdGV4PSIneF8xID0gMSciPjwvc3Bhbj4gYW5kIDxzcGFuIHYta2F0ZXg9Iid4XzIgPSAxJyI+PC9zcGFuPi4gQnV0IGZyb20gIFRhYmxlcyAoNy4zKSBhbmQgKDcuNCkgd2Ugc2VlIHRoYXQgYm90aCAgbWV0aG9kcyBnaXZlIHNvbHV0aW9ucyB3aGljaCBiZWNvbWUgcHJvZ3Jlc3NpdmVseSB3b3JzZSB3aXRoIGFuIGluY3JlYXNlCiAgICAgICAgICAgICAgICAgICAgaW4gdGhlIG51bWJlciBvZiBpdGVyYXRpb25zIChpLmUgdGhlIHNvbHV0aW9uIGRpdmVyZ2VzKS4gRm9yIHRoaXMgcGFydGljdWxhciBleGFtcGxlLCB1c2luZyB0aGUgR2F1c3MtU2VpZGVsCiAgICAgICAgICAgICAgICAgICAgZG9lc24ndCBpbXByb3ZlIHRoZSBzcGVlZCBvZiBjb252ZXJnZW5jZS4gSW5zdGVhZCwgdGhlIEdhdXNzLVNlaWRlbCBkaXZlcmdlcyBtb3JlIHJhcGlkbHkuIFdlIGNvbmNsdWRlIHRoYXQgd2l0aAogICAgICAgICAgICAgICAgICAgIHRoZSBpbml0aWFsIGFwcHJveGltYXRpb24gPHNwYW4gdi1rYXRleD0iJ3hfMT0wJyI+PC9zcGFuPiBhbmQgPHNwYW4gdi1rYXRleD0iJ3hfMj0wJyI+PC9zcGFuPiwgbmVpdGhlciB0aGUgSmFjb2JpIG5vdCB0aGUgR2F1c3MtU2VpZGVsIG1ldGhvZCBjb252ZXJnZXMgdG8gdGhlIHNvbHV0aW9uLjxiciAvPjxicj4KCgogICAgICAgICAgICAgICAgICAgIFRoZSBNQVRMQUIgY29kZXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVzdWx0cyBpbiBUYWJsZXMgICAoNy4zKSBhbmQgKDcuNCkgYXJlIGdpdmVuIGJlbG93CgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb250LWl0YWxpYyBteS0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIgYWxsPGJyIC8+CgogICAgICAgICAgICAgICAgICAgICAgICBjbGM8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgJSBNQVRMQUIgY29kZSBmb3IgSmFjb2JpIG1ldGhvZCBzb2x1dGlvbiBvZiBkaXZlcmdpbmcgc3lzdGVtPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICUgICAgICB4MSAtIDUqeDIgPSAgLTQ7PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICUgICAgNyp4MSAtIHgyICAgPSAgIDY7PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICVQdXQgaW5pdGl0aWFsIGNvbmRpdGlvbnM8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgeDEoMSkgPSAwOyB4MigxKSA9IDA7PGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBuID0gMTo1ICAlIDUgaXRlcmF0aW9ucwoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWwtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MShuKzEpID0gICA1KngyKG4pIC0gNDs8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgyKG4rMSkgPSAgNyp4MShuKSAtIDY7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgJVByaW50IHRoZSByZXN1bHRzIG9mIHRoZSBmaXJzdCA4IGl0ZXJhdGlvbnM8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgPSAxOm4rMTxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICBmcHJpbnRmKCclMTAuMGZcdCAlMTAuMGZcdCAlMTAuMGZcbicsaS0xLHgxKGkpLHgyKGkpKTs8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgZW5kCgoKCiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb250LWl0YWxpYyBteS0zIj4KICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIgYWxsPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIGNsYyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgJSBNQVRMQUIgY29kZSBmb3IgR2F1c3MtU2VpZGVsIG1ldGhvZCBzb2x1dGlvbiBvZiBkaXZlcmdpbmcgc3lzdGVtIDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAlICAgICAgeDEgLSA1KngyID0gIC00OyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgJSAgICA3KngxIC0geDIgICA9ICAgNjsgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICVQdXQgaW5pdGl0aWFsIGNvbmRpdGlvbnM8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgeDEoMSkgPSAwOyB4MigxKSA9IDA7IDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbiA9IDE6NSAgJSA1IGl0ZXJhdGlvbnMKCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1sLTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeDEobisxKSA9ICAgNSp4MihuKSAtIDQ7IDxiciAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeDIobisxKSA9ICA3KngxKG4rMSkgLSA2OwogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgICAgICBlbmQKICAgICAgICAgICAgICAgICAgICAgICAgJVByaW50IHRoZSByZXN1bHRzIG9mIHRoZSBmaXJzdCA4IGl0ZXJhdGlvbnMgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpID0gMTpuKzEgPGJyIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIGZwcmludGYoJyUxMC4wZlx0ICUxMC4wZlx0ICUxMC4wZlxuJyxpLTEseDEoaSkseDIoaSkpOyA8YnIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgZW5kCgoKICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwhLS0uL0V4YW1wbGUgNy4zLS0+CiAgICAgICAgICAgICAgICBJbiB0aGUgcmVtYWluaW5nIHBhcnQgb2YgdGhpcyBzZWN0aW9uIHdlIHdpbGwgZGlzY3VzcyBtYW5pcHVsYXRpb24KICAgICAgICAgICAgICAgIHRlY2huaXF1ZXMgdGhhdCB3ZSBjYW4gdXNlIG9uIHRoZSBjb2VmZmljaWVudCBtYXRyaXggPHNwYW4gdi1rYXRleD0iJ0EnIj48L3NwYW4+IHRvIGd1YXJhbnRlZQogICAgICAgICAgICAgICAgY29udmVyZ2VuY2Ugb2YgdGhlIGl0ZXJhdGlvbnMgc2NoZW1lcy4gV2UgYmVnaW4gYnkgZGVmaW5pbmcgYSBzcGVjaWFsCiAgICAgICAgICAgICAgICB0eXBlIG9mIGNvZWZmaWNpZW50IG1hdHJpeCAgPHNwYW4gdi1rYXRleD0iJ0EnIj48L3NwYW4+LCBjYWxsZWQgYSA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+c3RyaWN0bHkgZGlhZ29uYWxseSBkb21pbmFudCBtYXRyaXg8L3NwYW4+LAogICAgICAgICAgICAgICAgZm9yIHdoaWNoIGl0IGlzIGd1YXJhbnRlZWQgdGhhdCBib3RoIG1ldGhvZHMgd2lsbCBjb252ZXJnZS4KCiAgICAgICAgICAgICAgICA8IS0tRGVmaXRpb24gNy4zLS0+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJub3RlIG5vdGUtZGVmaW5pdGlvbiBteS0zIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0idGV4dC1zdWNjZXNzIj4gRGVmaW5pdGlvbiA3LjM8L3NwYW4+PGJyPgogICAgICAgICAgICAgICAgICAgIEEgIDxzcGFuIHYta2F0ZXg9IiduIFxcdGltZXMgbiciPjwvc3Bhbj4gbWF0cml4ICA8c3BhbiB2LWthdGV4PSInQSciPjwvc3Bhbj4gaXMgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPnN0cmljdGx5IGRpYWdvbmFsbHkgZG9taW5hbnQ8L3NwYW4+IGlmCiAgICAgICAgICAgICAgICAgICAgdGhlIGFic29sdXRlIHZhbHVlIG9mIGVhY2ggZW50cnkgb24gdGhlIG1haW4gZGlhZ29uYWwgaXMgZ3JlYXRlciB0aGFuCiAgICAgICAgICAgICAgICAgICAgdGhlIHN1bSBvZiB0aGUgYWJzb2x1dGUgdmFsdWVzIG9mIHRoZSBvdGhlciBlbnRyaWVzIGluIHRoZSBzYW1lIHJvdy4KICAgICAgICAgICAgICAgICAgICBUaGF0IGlzLAoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH18YV97MTF9fCBcJlw+IHxhX3sxMn18ICArIHxhX3sxM318ICArIFxcY2RvdHMgKyB8YV97MW59fCBcXFxcIHxhX3syMn18IFwmXD4gfGFfezIxfXwgICsgfGFfezIzfXwgICsgXFxjZG90cyArIHxhX3sybn18IFxcXFwgICAgICAgICBcJiBcXHZkb3RzIFwmXFxcXHxhX3tubn18IFwmXD4gfGFfe24xfXwgICsgfGFfe24yfXwgICsgXFxjZG90cyArIHxhX3tuLG4tMX18IFxcXFwgXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KCgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwhLS0uL0RlZmluaXRpb24gNy4zLS0+CiAgICAgICAgICAgICAgICA8IS0tVGhlb3JlbSA3LjEtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRoZW9yZW0gbXktMyBwLTMgIj4KICAgICAgICAgICAgICAgICAgICA8dGhlb3JlbS1jb2xvcj5UaGVvcmVtIDcuMTwvdGhlb3JlbS1jb2xvcj4gPGk+Q29udmVyZ2VuY2Ugb2YgdGhlIEphY29iaSBhbmQgR2F1c3MtU2VpZGVsIE1ldGhvZHMuPC9pPgoKCiAgICAgICAgICAgICAgICAgICAgSWYgPHNwYW4gdi1rYXRleD0iJ0EnIj48L3NwYW4+IGlzIHN0cmljdGx5IGRpYWdvbmFsbHkgZG9taW5hbnQsIHRoZW4gdGhlIHN5c3RlbSBvZiBsaW5lYXIgZXF1YXRpb25zIGdpdmVuCiAgICAgICAgICAgICAgICAgICAgYnkgPHNwYW4gdi1rYXRleD0iJ0FcXHRleHRiZnt4fT1cXHRleHRiZntifSciPjwvc3Bhbj4gaGFzIGEgdW5pcXVlIHNvbHV0aW9uIHRvIHdoaWNoIHRoZSBKYWNvYmkgbWV0aG9kIGFuZAogICAgICAgICAgICAgICAgICAgIHRoZSBHYXVzcy1TZWlkZWwgbWV0aG9kIHdpbGwgY29udmVyZ2UgZm9yIGFueSBpbml0aWFsIGFwcHJveGltYXRpb24uCgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tLi9UaGVvcmVtIDcuMS0tPgogICAgICAgICAgICAgICAgQSBtYXRyaXggY2FuIGJlIGNvbnZlcnRlZCB0byBhIHN0cmljdGx5IGRpYWdvbmFsIGZvcm0gYnkgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPmludGVyY2hhbmdpbmcgcm93czwvc3Bhbj4gdG8gb2J0YWluIGNvbnZlcmdlbmNlLgoKICAgICAgICAgICAgICAgIDwhLS1FeGFtcGxlIDcuNC0tPgogICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNSIgY2xhc3M9Im15LTMgbWItNCBwLTMiPgogICAgICAgICAgICAgICAgICAgIEV4YW1wbGUgNy40ICA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+IEltcHJvdmluZyBjb252ZXJnZW5jZSBieSBpbnRlcmNoYW5naW5nIHJvd3M8L3NwYW4+CgogICAgICAgICAgICAgICAgICAgIEludGVyY2hhbmdlIHRoZSByb3dzIG9mIHRoZSBmb2xsb3dpbmcgc3lzdGVtCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSB4XzEgLSA1eF8yIFwmPSAtNFxcXFwgN3hfMSAtIHhfMiBcJj0gNiBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICB0byBvYnRhaW4gb25lIHdpdGggYSBzdHJpY3RseSBkaWFnb25hbCBkb21pbmFudCBtYXRyaXggdGhlbiB1c2Ugc2V2ZW4gKDcpIGl0ZXJhdGlvbnMgb2YgYm90aCB0aGUgSmFjb2JpIGFuZCBHYXVzcy1TZWlkZWwgbWV0aG9kIHRvIHNvbHZlIHRoZSBzeXN0ZW0gdXNpbmcgdGhlIGluaXRpYWwgYXBwcm94aW1hdGlvbiA8c3BhbiB2LWthdGV4PSInKHhfMSx4XzIpID0gKDAsMCknIj48L3NwYW4+LjxiciAvPgogICAgICAgICAgICAgICAgICAgIEJ5IGludGVyY2hhbmdpbmcgdGhlIHJvd3Mgb2YgdGhlIGdpdmVuIHN5c3RlbSB3ZSBvYnRhaW4KCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSA3eF8xIC0geF8yIFwmPSA2IFxcXFwgIHhfMSAtIDV4XzIgXCY9IC00IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIE5vdGUgdGhhdCB0aGUgY29lZmZpY2llbnQgbWF0cml4IG9mIHRoZSByZXN1bHRpbmcgc3lzdGVtIGlzIHN0cmljdGx5IGRpYWdvbmFsbHkgZG9taW5hbnQuCiAgICAgICAgICAgICAgICAgICAgVGhlIEphY29iaSBpdGVyYXRpb24gc2NoZW1lIGJlY29tZXMKCgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSAgeF8xXnsoayl9ICBcJj0gXFxmcmFjezF9ezd9eF8yXnsoay0xKX0gKyBcXGZyYWN7Nn17N30gXFxcXCAgeF8yXnsoayl9ICBcJj0gXFxmcmFjezF9ezV9eF8xXnsoay0xKX0gKyBcXGZyYWN7NH17NX0gXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgVGhlIEdhdXNzLVNlaWRlbCBpdGVyYXRpb24gc2NoZW1lIGlzIGdpdmVuIGJ5CgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSAgeF8xXnsoayl9ICBcJj0gXFxmcmFjezF9ezd9eF8yXnsoay0xKX0gKyBcXGZyYWN7Nn17N30gXFxcXCAgeF8yXnsoayl9ICBcJj0gXFxmcmFjezF9ezV9eF8xXnsoayl9ICsgXFxmcmFjezR9ezV9IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICBSdW5uaW5nIHRoZSBhYm92ZSBpdGVyYXRpb25zICBzY2hlbWVzIG92ZXIgNyBpdGVyYXRpb25zIGdpdmVzIHRoZSBmb2xsb3dpbmcgcmVzdWx0cwoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e3xjfGN8Y3x9XFxobGluZSAgICAgICAgIG5cJiAgICAgeF8xXCYgICAgICAgeF8yICAgIFxcXFwgXFxobGluZSAgICAgICAgIDBcJgkgICAgIDAuMDAwMAlcJiAgICAgMC4wMDAwIFxcXFwgICAgICAgICAxXCYJICAgICAwLjg1NzEJXCYgICAgIDAuODAwMCBcXFxcICAgICAgICAgMlwmCSAgICAgMC45NzE0CVwmICAgICAwLjk3MTRcXFxcICAgICAgICAgM1wmCSAgICAgMC45OTU5CVwmICAgICAwLjk5NDNcXFxcICAgICAgICAgNFwmCSAgICAgMC45OTkyCVwmICAgICAwLjk5OTJcXFxcICAgICAgICAgNVwmCSAgICAgMC45OTk5CVwmICAgICAwLjk5OThcXFxcICAgICAgICAgNlwmCSAgICAgMS4wMDAwCVwmICAgICAxLjAwMDBcXFxcICAgICAgICA3XCYJICAgICAxLjAwMDAJXCYgICAgIDEuMDAwMFxcXFwgXFxobGluZSBcXGVuZHthcnJheX0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTAiIHYta2F0ZXg6ZGlzcGxheT0iJ1xcdGV4dHJteyBUYWJsZSA3LjU6IEphY29iaSBpdGVyYXRpb24gc29sdXRpb259JyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FycmF5fXt8Y3xjfGN8fSAgICBcXGhsaW5lICAgIG4gXCYgICAgIHhfMSBcJiAgICAgICB4XzIgICAgXFxcXCBcXGhsaW5lICAgICAgICAgMAlcJiAgICAgMC4wMDAwCVwmICAgICAwLjAwMDBcXFxcICAgICAgICAxCVwmICAgICAwLjg1NzEJXCYgICAgIDAuOTcxNFxcXFwgICAgICAgIDIJXCYgICAgIDAuOTk1OQlcJiAgICAgMC45OTkyXFxcXCAgICAgICAgMwlcJiAgICAgMC45OTk5CVwmICAgICAxLjAwMDBcXFxcICAgICAgICAgNAlcJiAgICAgMS4wMDAwCVwmICAgICAxLjAwMDBcXFxcICAgICAgICAgNQlcJiAgICAgMS4wMDAwCVwmICAgICAxLjAwMDBcXFxcICAgICAgICAgNglcJiAgICAgMS4wMDAwCVwmICAgICAxLjAwMDBcXFxcICAgICAgICAgNwlcJiAgICAgMS4wMDAwCVwmICAgICAxLjAwMDBcXFxcICAgICBcXGhsaW5lIFxcZW5ke2FycmF5fSciPjwvZGl2PgoKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTAiIHYta2F0ZXg6ZGlzcGxheT0iJ1xcdGV4dHJteyBUYWJsZSA3LjY6IEdhdXNzLVNlaWRlbCBzb2x1dGlvbn0nIj48L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS4vRXhhbXBsZSA3LjQtLT4KICAgICAgICAgICAgICAgIDwhLS1FeGFtcGxlIDcuNS0tPgogICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNSIgY2xhc3M9Im15LTMgbWItNCBwLTMiPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5FeGFtcGxlIDcuNTwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgRGVyaXZlIHRoZSBKYWNvYmkgaXRlcmF0aW9uIHNjaGVtZSBmb3IgdGhlIGZvbGxvd2luZyBsaW5lYXIgc3lzdGVtCiAgICAgICAgICAgICAgICAgICAgYW5kIHVzZSB0ZW4gKDEwKSBpdGVyYXRpb25zIHRvIGFwcHJveGltYXRlIHRoZSBzb2x1dGlvbgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e2NjY2NjY2N9IHhfMSBcJitcJiA2IHhfMiBcJi1cJiAzIHhfMyBcJj1cJiAtMTZcXFxcIDcgeF8xIFwmK1wmIHhfMiBcJi1cJiB4XzMgXCY9XCYgMTBcXFxcIC0gMyB4XzEgXCYrXCYgMiB4XzIgXCYtXCYgMTAgeF8zIFwmPVwmIC0zMCBcXGVuZHthcnJheX0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPlNvbHV0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIFdlIG9ic2VydmUgdGhhdCB0aGUgbGluZWFyIHN5c3RlbSBpcyA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdAogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gZGlhZ29uYWxseSBkb21pbmFudC4gVGh1cywgYmVmb3JlIGFwcGx5aW5nIHRoZSBpdGVyYXRpb24gbWV0aG9kLCB3ZSByZWFycmFuZ2UgdGhlCiAgICAgICAgICAgICAgICAgICAgZXF1YXRpb25zIGFzIGZvbGxvd3MKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FycmF5fXtjY2NjY2NjfSA3IHhfMSBcJitcJiB4XzIgXCYtXCYgeF8zIFwmPVwmIDEwXFxcXCB4XzEgXCYrXCYgNiB4XzIgXCYtXCYgMyB4XzMgXCY9XCYgLTE2XFxcXCAtIDMgeF8xIFwmK1wmIDIgeF8yIFwmLVwmIDEwIHhfMyBcJj1cJiAtMzAgXFxlbmR7YXJyYXl9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIE1ha2luZyA8c3BhbiB2LWthdGV4PSIneF8xJyI+PC9zcGFuPiAsIDxzcGFuIHYta2F0ZXg9Iid4XzInIj48L3NwYW4+IGFuZCA8c3BhbiB2LWthdGV4PSIneF8zJyI+PC9zcGFuPiwgaW4gdHVybiwgdGhlIHN1YmplY3QgaW4gZWFjaCBlcXVhdGlvbiBnaXZlcwoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH0geF8xIFwmPSBcXGZyYWN7MTB9ezd9IC0gXFxmcmFje3hfMn17N30gKyBcXGZyYWN7eF8zfXs3fVxcXFwgeF8yIFwmPSAtIFxcZnJhY3s4fXszfS0gXFxmcmFje3hfMX17Nn0gKyBcXGZyYWN7eF8zfXsyfVxcXFwgeF8zIFwmPSAzIC0gXFxmcmFjezN4XzF9ezEwfSArIFxcZnJhY3t4XzJ9ezV9IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIFRodXMsIHRoZSBKYWNvYmkgaXRlcmF0aW9uIHNjaGVtZSBpcyBnaXZlbiBieQoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH0geF8xXnsoayl9IFwmPSBcXGZyYWN7MTB9ezd9IC0gXFxmcmFjezF9ezd9eF97Mn1eeyhrLTEpfSArIFxcZnJhY3sxfXs3fXhfM157KGstMSl9XFxcXCB4XzJeeyhrKX0gXCY9IC0gXFxmcmFjezh9ezN9LSBcXGZyYWN7MX17Nn14XzFeeyhrLTEpfSArIFxcZnJhY3sxfXsyfXhfM157KGstMSl9XFxcXCB4XzNeeyhrKX0gXCY9IDMgLSBcXGZyYWN7M317MTB9eF8xXnsoay0xKX0gKyBcXGZyYWN7MX17NX14XzJeeyhrLTEpfSBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBUaGUgcmVzdWx0cyBmb3IgdGhlIGZpcnN0IHRlbiBpdGVyYXRpb25zIGFyZSBnaXZlbiBpbiB0aGUgdGFibGUgYmVsb3cKCgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthcnJheX17fGN8Y3xjfGN8fSAgICBcXGhsaW5lICAgIGl0ZXIuXCYgeF8xIFwmIHhfMiBcJiB4XzNcXFxcIFxcaGxpbmUwIFwmIDAgXCYgMCBcJiAwIFxcXFwgMSBcJiAxLjQyODZcJiAtMi42NjY3XCYgMy4wMDAwXFxcXCAgMiBcJiAyLjIzODFcJiAtMS40MDQ4XCYgMi4wMzgxXFxcXCAzIFwmIDEuOTIwNFwmIC0yLjAyMDZcJiAyLjA0NzZcXFxcIDQgXCYgMi4wMDk4XCYgLTEuOTYyOVwmIDIuMDE5OFxcXFwgNSBcJiAxLjk5NzVcJiAtMS45OTE3XCYgMi4wMDQ1XFxcXCA2IFwmIDEuOTk5NVwmIC0xLjk5NzNcJiAyLjAwMjRcXFxcIDcgXCYgMi4wMDAwXCYgLTEuOTk4N1wmIDIuMDAwN1xcXFwgOCBcJiAxLjk5OTlcJiAtMS45OTk2XCYgMi4wMDAzXFxcXCA5IFwmIDIuMDAwMFwmIC0xLjk5OTlcJiAyLjAwMDFcXFxcIDEwXCYgMi4wMDAwXCYgLTIuMDAwMFwmIDIuMDAwMFxcXFwgIFxcaGxpbmUgXFxlbmR7YXJyYXl9JyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0wIiB2LWthdGV4OmRpc3BsYXk9IidcXHRleHRybXsgVGFibGUgNy43OiBKYWNvYmkgaXRlcmF0aW9uIGZvciBFeGFtcGxlIDcuNX0nIj48L2Rpdj4KCgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tLi9FeGFtcGxlIDcuNS0tPgogICAgICAgICAgICAgICAgPCEtLUV4YW1wbGUgNy42LS0+CiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlM2U1IiBjbGFzcz0ibXktMyBtYi00IHAtMyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkV4YW1wbGUgNy42PC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICBEZXJpdmUgdGhlIEdhdXNzLVNpZWRlbCBpdGVyYXRpb24gc2NoZW1lIGZvciB0aGUgZm9sbG93aW5nIGxpbmVhciBzeXN0ZW0gYW5kIHVzZSB0ZW4gKDEwKSBpdGVyYXRpb25zIHRvIGFwcHJveGltYXRlIHRoZSBzb2x1dGlvbgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e2NjY2NjY2N9IHhfMSBcJitcJiA2IHhfMiBcJi1cJiAzIHhfMyBcJj1cJiAtMTZcXFxcIDcgeF8xIFwmK1wmIHhfMiBcJi1cJiB4XzMgXCY9XCYgMTBcXFxcIC0gMyB4XzEgXCYrXCYgMiB4XzIgXCYtXCYgMTAgeF8zIFwmPVwmIC0zMCBcXGVuZHthcnJheX0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPlNvbHV0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIFdlIG9ic2VydmUgdGhhdCB0aGUgbGluZWFyIHN5c3RlbSBpcyA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdAogICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4gZGlhZ29uYWxseSBkb21pbmFudC4gVGh1cywgYmVmb3JlIGFwcGx5aW5nIHRoZSBpdGVyYXRpb24gbWV0aG9kLCB3ZSByZWFycmFuZ2UgdGhlCiAgICAgICAgICAgICAgICAgICAgZXF1YXRpb25zIGFzIGZvbGxvd3MKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FycmF5fXtjY2NjY2NjfSA3IHhfMSBcJitcJiB4XzIgXCYtXCYgeF8zIFwmPVwmIDEwXFxcXCB4XzEgXCYrXCYgNiB4XzIgXCYtXCYgMyB4XzMgXCY9XCYgLTE2XFxcXCAtIDMgeF8xIFwmK1wmIDIgeF8yIFwmLVwmIDEwIHhfMyBcJj1cJiAtMzAgXFxlbmR7YXJyYXl9JyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICBNYWtpbmcgPHNwYW4gdi1rYXRleD0iJ3hfMSciPjwvc3Bhbj4gLCA8c3BhbiB2LWthdGV4PSIneF8yJyI+PC9zcGFuPiBhbmQgPHNwYW4gdi1rYXRleD0iJ3hfMyciPjwvc3Bhbj4sIGluIHR1cm4sIHRoZSBzdWJqZWN0IGluIGVhY2ggZXF1YXRpb24gZ2l2ZXMKCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9eF8xIFwmPSBcXGZyYWN7MTB9ezd9IC0gXFxmcmFje3hfMn17N30gKyBcXGZyYWN7eF8zfXs3fVxcXFwgeF8yIFwmPSAtIFxcZnJhY3s4fXszfS0gXFxmcmFje3hfMX17Nn0gKyBcXGZyYWN7eF8zfXsyfVxcXFwgeF8zIFwmPSAzIC0gXFxmcmFjezN4XzF9ezEwfSArIFxcZnJhY3t4XzJ9ezV9IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIFRodXMsIHRoZSBKYWNvYmkgaXRlcmF0aW9uIHNjaGVtZSBpcyBnaXZlbiBieQoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH0geF8xXnsoayl9IFwmPSBcXGZyYWN7MTB9ezd9IC0gXFxmcmFjezF9ezd9eF97Mn1eeyhrLTEpfSArIFxcZnJhY3sxfXs3fXhfM157KGstMSl9XFxcXCB4XzJeeyhrKX0gXCY9IC0gXFxmcmFjezh9ezN9LSBcXGZyYWN7MX17Nn14XzFeeyhrKX0gKyBcXGZyYWN7MX17Mn14XzNeeyhrLTEpfVxcXFwgeF8zXnsoayl9IFwmPSAzIC0gXFxmcmFjezN9ezEwfXhfMV57KGspfSArIFxcZnJhY3sxfXs1fXhfMl57KGspfSBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICBUaGUgcmVzdWx0cyBmb3IgdGhlIGZpcnN0IHRlbiBpdGVyYXRpb25zIGFyZSBnaXZlbiBpbiB0aGUgdGFibGUgYmVsb3cKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e3xjfGN8Y3xjfH0gICAgXFxobGluZSAgaXRlci5cJiB4XzEgXCYgeF8yIFwmIHhfM1xcXFwgXFxobGluZSAwIFwmIDAgXCYgMCAmIDAgXFxcXCAxIFwmMS40Mjg2XCYgLTIuOTA0OFwmIDEuOTkwNVxcXFwgMiBcJjIuMTI3OVwmIC0yLjAyNjFcJiAxLjk1NjRcXFxcIDMgXCYxLjk5NzVcJiAtMi4wMjE0XCYgMS45OTY1XFxcXCA0IFwmMi4wMDI1XCYgLTIuMDAyMlwmIDEuOTk4OFxcXFwgNSBcJjIuMDAwMVwmIC0yLjAwMDZcJiAxLjk5OThcXFxcIDYgXCYyLjAwMDFcJiAtMi4wMDAxXCYgMi4wMDAwXFxcXCA3IFwmMi4wMDAwXCYgLTIuMDAwMFwmIDIuMDAwMFxcXFwgOCBcJjIuMDAwMFwmIC0yLjAwMDBcJiAyLjAwMDBcXFxcIDkgXCYyLjAwMDBcJiAtMi4wMDAwXCYgMi4wMDAwXFxcXCAxMFwmMi4wMDAwXCYgLTIuMDAwMFwmIDIuMDAwMFxcXFwgICBcXGhsaW5lIFxcZW5ke2FycmF5fSciPjwvZGl2PgoKCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im10LTAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtMCIgdi1rYXRleDpkaXNwbGF5PSInXFx0ZXh0cm17IFRhYmxlIDcuODogR2F1c3MtU2llZGVsIGl0ZXJhdGlvbiBmb3IgRXhhbXBsZSA3LjZ9JyI+PC9kaXY+CgoKICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgV2Ugb2JzZXJ2ZSB0aGF0IHRoZSBHYXVzcy1TaWVkZWwgY29udmVyZ2VzIG11Y2ggZmFzdGVyIHRoYW4gdGhlIEphY29iaSBtZXRob2QgZm9yIHRoZSBzb2x1dGlvbiBvZiB0aGlzIGV4YW1wbGUuCgoKICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS4vRXhhbXBsZSA3LjYtLT4KICAgICAgICAgICAgICAgIDwhLS1FeGVyY2lzZSA3LjEtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LTQgcC0zIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojZmZmM2UwIj4KICAgICAgICAgICAgICAgICAgICA8aDYgY2xhc3M9Img0LXJlc3BvbnNpdmUiPgogICAgICAgICAgICAgICAgICAgICAgICBFeGVyY2lzZSA3LjEgIDxkZWVwPkphY29iaSBhbmQgR2F1c3MtU2llZGVsIGl0ZXJhdGlvbjwvZGVlcD4KICAgICAgICAgICAgICAgICAgICA8L2g2PgoKICAgICAgICAgICAgICAgICAgICA8b2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlcml2ZSB0aGUgSmFjb2JpIGl0ZXJhdGlvbiBzY2hlbWUgZm9yIHRoZSBmb2xsb3dpbmcgbGluZWFyIHN5c3RlbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHVzZSB0ZW4gaXRlcmF0aW9ucyB0byBhcHByb3hpbWF0ZSB0aGUgc29sdXRpb25zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e2NjY2NjY2N9IC0gOSB4XzEgXCYtXCYgMyB4XzIgXCYrXCYgMyB4XzMgXCY9XCYgMTJcXFxcIDcgeF8xIFwmLVwmIDEwIHhfMiBcJi1cJiB4XzMgXCY9XCYgLTM4XFxcXCAtIDQgeF8xIFwmLVwmIHhfMiBcJitcJiA2IHhfMyBcJj1cJiAtOFxcXFwgXFxlbmR7YXJyYXl9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVyaXZlIHRoZSBHYXVzcy1TaWVkZWwgaXRlcmF0aW9uIHNjaGVtZSBmb3IgdGhlIGZvbGxvd2luZyBsaW5lYXIgc3lzdGVtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdXNlIGVpZ2h0ICg2KSBpdGVyYXRpb25zIHRvIGFwcHJveGltYXRlIHRoZSBzb2x1dGlvbgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthcnJheX17Y2NjY2NjY30gLSA4IHhfMSBcJi1cJiAzIHhfMiBcJitcJiB4XzMgXCY9XCYgLTI0XFxcXCB4XzEgXCYrXCYgMyB4XzIgXCYrXCYgMTAgeF8zIFwmPVwmIC0xMlxcXFwgMiB4XzEgXCYrXCYgOSB4XzIgXCYtXCYgMyB4XzMgXCY9XCYgMjhcXFxcIFxcZW5ke2FycmF5fSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b2wgc3R5bGU9Imxpc3Qtc3R5bGU6bG93ZXItbGF0aW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV291bGQgdGhlIEphY29iaSBtZXRob2QgY29udmVyZ2UgaW4gYXBwbGllZCBkaXJlY3RseSB0byBzb2x2ZSB0aGUgZm9sbG93aW5nIGxpbmVhciBzeXN0ZW0/CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSA0eF8xIC0geF8yICsgMnhfMyBcJj0gLTFcXFxcIDZ4XzEgKyA0eF8yICsgM3hfMyBcJj0gMlxcXFwgeF8xICsgeF8yIC0gM3hfMyBcJj0gNSBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+IAoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhvdyBjYW4gdGhlIHN5c3RlbSBiZSByZWFycmFuZ2VkIHRvIGEgZm9ybSB0aGF0IHdvdWxkIGNvbnZlcmdlIHdoZW4gc29sdmVkIHVzaW5nIHRoZSBKYWNvYmkgb3IgR2F1c3MgU2llZGVsIG1ldGhvZD8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGxpbmVhciBzeXN0ZW0KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9IDEweF8xICsgeF8yICsgeF8zID0gMTIsIHhfMSArIDEweF8yICsgeF8zID0gMTIsIHhfMSArIHhfMiArIDEweF8zID0gMTIgXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXMgdGhlIHVuaXF1ZSBzb2x1dGlvbiA8c3BhbiB2LWthdGV4PSIneF8xID0geF8yID0geF8zID0gMSciPjwvc3Bhbj4uPGJyIC8+CgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0aW5nIGZyb20gdGhlIGluaXRpYWwgZ3Vlc3MgIDxzcGFuIHYta2F0ZXg9Iid4XzFeeygwKX0gPSB4XzJeeygwKX0gPSB4XzNeeygwKX0gPSAwJyI+PC9zcGFuPgoKPG9sIHN0eWxlPSJsaXN0LXN0eWxlOmxvd2VyLWxhdGluIj4KICAgIDxsaT4gUGVyZm9ybSB0aHJlZSBpdGVyYXRpb25zIG9mIHRoZSBKYWNvYmkgTWV0aG9kIGFuZCBjb21wdXRlIHRoZSBlcnJvciBhdCBlYWNoIGl0ZXJhdGlvbiBsZXZlbC48L2xpPgogICAgPGxpPiBQZXJmb3JtIHRocmVlIGl0ZXJhdGlvbnMgb2YgdGhlIEphY29iaSBNZXRob2QgYW5kIGNvbXB1dGUgdGhlIGVycm9yIGF0IGVhY2ggaXRlcmF0aW9uIGxldmVsLjwvbGk+Cjwvb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIExldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidBID0gXFxiZWdpbntibWF0cml4fSAzXCYxXCYxXFxcXCAyXCY0XCYgLTFcXFxcIC0xXCYxXCYzIFxcZW5ke2JtYXRyaXh9XFw7XFw7XFw7IFxcdGV4dHJteyBhbmQgfSBcXDtcXDtcXDsgIGIgPSBcXGJlZ2lue2JtYXRyaXh9IDJcXFxcLTJcXFxcLTUgXFxlbmR7Ym1hdHJpeH0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvbCBzdHlsZT0ibGlzdC1zdHlsZTpsb3dlci1sYXRpbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaWxsIGJvdGggSmFjb2JpIGFuZCBHYXVzcy1TZWlkZWwgaXRlcmF0aW9ucyBjb252ZXJnZSBmb3IgdGhlIHByb2JsZW0gPHNwYW4gdi1rYXRleD0iJ0F4ID0gYiciPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU29sdmUgPHNwYW4gdi1rYXRleD0iJ0F4ID0gYiciPjwvc3Bhbj4gYnkgSmFjb2JpIGl0ZXJhdGlvbiB1cCB0byB0aHJlZSBkaWdpdHMgKGkuZS4geW91IGNhbiBzdG9wIHRoZSBpdGVyYXRpb24gYXMgc29vbiBhcyB0aGUgZmlyc3QgdGhyZWUgZGlnaXRzIGdldCBzdGFiaWxpemVkIGluIGVhY2ggPHNwYW4gdi1rYXRleD0iJ3hfMSwgeF8yLCB4XzMnIj48L3NwYW4+LikKICAgICAgKGl2KSBTb2x2ZSA8c3BhbiB2LWthdGV4PSInQXg9YiciPjwvc3Bhbj4gYnkgR2F1c3MtU2VpZGVsIGl0ZXJhdGlvbiB1cCB0byB0aHJlZSBkaWdpdHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS4vRXhlcmNpc2UgNy4xIC0tPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vU2VjdGlvbiA3LjMtLT4KICAgICAgICA8L3NlY3Rpb24+CiAgICA8L2Rpdj4K"},null]}