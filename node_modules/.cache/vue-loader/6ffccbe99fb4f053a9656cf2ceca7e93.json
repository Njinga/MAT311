{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit5.vue?vue&type=template&id=850205f2&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit5.vue","mtime":1599359772897},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "unit5" }, [
    _vm._m(0),
    _c("section", { staticClass: "dark-grey-text mb-4 p-3 mx-4" }, [
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.1 Trapezoid rule ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _c(
            "div",
            {
              staticClass: "my-3 red-text text-center p-4",
              staticStyle: { border: "2px solid blue" }
            },
            [_vm._v(" Space for figure ")]
          ),
          _vm._v(
            " The trapezoid rule is based on estimating the area under a curve using trapezoid. The area under the curve "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "y = f(x)",
                expression: "'y = f(x)'"
              }
            ]
          }),
          _vm._v(" in the above diagram, between "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(" can be approximated as "),
          _c(
            "div",
            { staticClass: "table-responsive", staticStyle: { width: "100%" } },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\text{Area } = \\int_{x_0}^{x_1} f(x)~dx = \\int_{x_0}^{x_0+h} f(x)~ dx \\approx \\frac{1}{2} h(f_0 + f_1)",
                            expression:
                              "'\\\\text{Area } = \\\\int_{x_0}^{x_1} f(x)~dx = \\\\int_{x_0}^{x_0+h} f(x)~ dx \\\\approx \\\\frac{1}{2} h(f_0 + f_1)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.1)",
                            expression: "'(5.1)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" To apply the trapezoid rule to an integral "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\displaystyle \\int_a^b f(x)~dx",
                expression: "'\\\\displaystyle \\\\int_a^b f(x)~dx'"
              }
            ]
          }),
          _vm._v(" we divide up the interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[a,b]",
                expression: "'[a,b]'"
              }
            ]
          }),
          _vm._v(" into "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(" equally spaced subintervals "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "(x_0,x_1),(x_1,x_2),\\ldots,(x_{n-1},x_n).",
                expression: "'(x_0,x_1),(x_1,x_2),\\\\ldots,(x_{n-1},x_n).'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The division points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(" are equally spaced: "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "x_i = a + i h,\\;\\;\\;\\text{where }\\;\\;\\;h = \\frac{b-a}{n}",
                expression:
                  "'x_i = a + i h,\\\\;\\\\;\\\\;\\\\text{where }\\\\;\\\\;\\\\;h = \\\\frac{b-a}{n}'",
                arg: "display"
              }
            ]
          }),
          _c(
            "div",
            {
              staticClass: "my-3 red-text text-center p-4",
              staticStyle: { border: "2px solid blue" }
            },
            [_vm._v(" Space for figure ")]
          ),
          _vm._v(
            " We apply equation (5.1) on each subinterval and add the results to obtain the "
          ),
          _c("deep", [_vm._v("extended or composite trapezoidal rule:")]),
          _c(
            "div",
            { staticClass: "table-responsive", staticStyle: { width: "100%" } },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\begin{aligned}\\int_a^b f(x)~dx & \\approx  \\frac{1}{2}h(f_0+f_1) + \\frac{1}{2}h(f_1+f_2)+  \\ldots + \\frac{1}{2}h(f_{n-2}+f_{n-1}) + \\frac{1}{2}h(f_{n-1}+f_n)~~~~&(5.2)\\\\     &= \\frac{h}{2}\\left(f_0 + 2f_1 + 2f_2 + \\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\right)&(5.3) \\end{aligned}",
                            expression:
                              "'\\\\begin{aligned}\\\\int_a^b f(x)~dx \\& \\\\approx  \\\\frac{1}{2}h(f_0+f_1) + \\\\frac{1}{2}h(f_1+f_2)+  \\\\ldots + \\\\frac{1}{2}h(f_{n-2}+f_{n-1}) + \\\\frac{1}{2}h(f_{n-1}+f_n)~~~~\\&(5.2)\\\\\\\\     \\&= \\\\frac{h}{2}\\\\left(f_0 + 2f_1 + 2f_2 + \\\\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\\\right)\\&(5.3) \\\\end{aligned}'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.1")
              ]),
              _vm._v(" Evaluate "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle{ \\int_2^6 \\frac{1}{1+x}~dx}",
                    expression:
                      "'\\\\displaystyle{ \\\\int_2^6 \\\\frac{1}{1+x}~dx}'"
                  }
                ]
              }),
              _vm._v(" using the Trapezoidal rule with "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h = 1",
                    expression: "'h = 1'"
                  }
                ]
              }),
              _vm._v("."),
              _c("br"),
              _vm._v(" Solution:"),
              _c("br"),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "a = 2",
                    expression: "'a = 2'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "b = 6",
                    expression: "'b = 6'"
                  }
                ]
              }),
              _vm._v(", thus "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n = (b-a)/h = 4",
                    expression: "'n = (b-a)/h = 4'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} \\int_2^6 \\frac{1}{1+x}~dx & \\approx  \\frac{1}{2}\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\right]\\\\ &=\\frac{1}{2}\\left[ f(2) + 2f(3)+2f(4)+2f(5)+f(6)\\right]\\\\ &=\\frac{1}{2}\\left[\\frac{1}{3} + 2\\cdot \\frac{1}{4}+ 2\\cdot \\frac{1}{5}+ 2\\cdot \\frac{1}{6}+ \\frac{1}{7}\\right] = \\frac{359}{420} = 0.855\\\\\\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} \\\\int_2^6 \\\\frac{1}{1+x}~dx \\& \\\\approx  \\\\frac{1}{2}\\\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\\\right]\\\\\\\\ \\&=\\\\frac{1}{2}\\\\left[ f(2) + 2f(3)+2f(4)+2f(5)+f(6)\\\\right]\\\\\\\\ \\&=\\\\frac{1}{2}\\\\left[\\\\frac{1}{3} + 2\\\\cdot \\\\frac{1}{4}+ 2\\\\cdot \\\\frac{1}{5}+ 2\\\\cdot \\\\frac{1}{6}+ \\\\frac{1}{7}\\\\right] = \\\\frac{359}{420} = 0.855\\\\\\\\\\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The exact solution is "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\ln|x+1|_2^6 = \\ln 7 - \\ln 3 = 0.847",
                    expression:
                      "'\\\\ln|x+1|_2^6 = \\\\ln 7 - \\\\ln 3 = 0.847'"
                  }
                ]
              })
            ]
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.2")
              ]),
              _vm._v(" Evaluate the integral "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle \\int_0^1 e^{-x^2}~dx",
                    expression: "'\\\\displaystyle \\\\int_0^1 e^{-x^2}~dx'"
                  }
                ]
              }),
              _vm._v(" using the trapezoid rule with "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h = 0.25",
                    expression: "'h = 0.25'"
                  }
                ]
              }),
              _c("br"),
              _vm._v(" Solution: "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} \\int_0^{1} e^{-x^2} & \\approx  \\frac{0.25}{2}  \\left[f(0) + 2 f(0.25) + 2 f(0.5) + 2 f(0.75) + f(1) \\right] \\\\  &= \\frac{0.25}{2}\\left[ e^0 + 2e^{-(0.25)^2} + 2e^{-(0.5)^2} +  2e^{-(0.75)^2} +   e^{-(1)^2}\\right] = 0.74298\\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} \\\\int_0^{1} e^{-x^2} \\& \\\\approx  \\\\frac{0.25}{2}  \\\\left[f(0) + 2 f(0.25) + 2 f(0.5) + 2 f(0.75) + f(1) \\\\right] \\\\\\\\  \\&= \\\\frac{0.25}{2}\\\\left[ e^0 + 2e^{-(0.25)^2} + 2e^{-(0.5)^2} +  2e^{-(0.75)^2} +   e^{-(1)^2}\\\\right] = 0.74298\\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              })
            ]
          )
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.2 Newton-Cotes formula ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(" Suppose that we have to evaluate the integral "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "\\int_a^b f(x)~dx",
                            expression: "'\\\\int_a^b f(x)~dx'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.4)",
                            expression: "'(5.4)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(
            " is a real valued function. Since polynomials are easy to integrate, we can approximate the function "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" by its Lagrange interpolation polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n",
                expression: "'P_n'"
              }
            ]
          }),
          _vm._v(" of degree "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(", so that the integral is approximated as "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_a^b f(x)~dx \\approx \\int_a^b P_n(x)~dx",
                            expression:
                              "'\\\\int_a^b f(x)~dx \\\\approx \\\\int_a^b P_n(x)~dx'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.5)",
                            expression: "'(5.5)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(
            " Recall from the previous chapter that the Lagrange interpolation polynomial of degree "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(" for the function "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f",
                expression: "'f'"
              }
            ]
          }),
          _vm._v(", with these interpolation points, is of the form "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "P_n(x) = L_0(x)f_0 + L_1(x)f_1 + \\ldots + L_n(x)f_n = \\sum_{k=0}^n  L_k(x)f(x_k)",
                            expression:
                              "'P_n(x) = L_0(x)f_0 + L_1(x)f_1 + \\\\ldots + L_n(x)f_n = \\\\sum_{k=0}^n  L_k(x)f(x_k)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.6)",
                            expression: "'(5.6)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" with the error of the interpolation given by "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "E_{n+1} = \\frac{\\pi_{n+1}(x)}{(n+1)!}f^{(n+1)}(\\xi),\\;\\;\\;\\;\\text{with }\\; x_0  <  \\xi < x_n",
                expression:
                  "'E_{n+1} = \\\\frac{\\\\pi_{n+1}(x)}{(n+1)!}f^{(n+1)}(\\\\xi),\\\\;\\\\;\\\\;\\\\;\\\\text{with }\\\\; x_0  <  \\\\xi < x_n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" where "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "L_k(x) = \\frac{(x-x_0)(x-x_1)\\cdots(x-x_{k-1})(x-x_{k+1})\\cdots(x-x_n)}{(x_k-x_0)(x_k-x_1)\\cdots(x_k-x_{k-1})(x_k-x_{k+1})\\cdots(x_k-x_n)}~,~~~k=0,1,2,\\ldots,n",
                            expression:
                              "'L_k(x) = \\\\frac{(x-x_0)(x-x_1)\\\\cdots(x-x_{k-1})(x-x_{k+1})\\\\cdots(x-x_n)}{(x_k-x_0)(x_k-x_1)\\\\cdots(x_k-x_{k-1})(x_k-x_{k+1})\\\\cdots(x_k-x_n)}~,~~~k=0,1,2,\\\\ldots,n'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.7)",
                            expression: "'(5.7)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" and "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\pi_{n+1}(x) = (x-x_0)(x-x_1)(x-x_2)\\cdots(x-x_{n-1})(x-x_n).",
                expression:
                  "'\\\\pi_{n+1}(x) = (x-x_0)(x-x_1)(x-x_2)\\\\cdots(x-x_{n-1})(x-x_n).'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" For simplicity, we shall assume that the points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(", are equally spaced, that is, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: " x_i = a + ih ,\\;\\;\\;\\; i = 0,1,\\ldots, n",
                expression:
                  "' x_i = a + ih ,\\\\;\\\\;\\\\;\\\\; i = 0,1,\\\\ldots, n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "h",
                expression: "'h'"
              }
            ]
          }),
          _vm._v(" is the step size defined by "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "h = \\frac{b - a}{n}",
                expression: "'h = \\\\frac{b - a}{n}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Substituting (5.6) into the (5.5) gives "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_a^b f(x)~dx \\approx \\sum_{k = 0}^{n}w_k f(x_k)",
                            expression:
                              "'\\\\int_a^b f(x)~dx \\\\approx \\\\sum_{k = 0}^{n}w_k f(x_k)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.8)",
                            expression: "'(5.8)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" where "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "w_k = \\int_a^b L_k(x)~dx,\\;\\;\\;\\;k = 0,1,\\ldots,n",
                            expression:
                              "'w_k = \\\\int_a^b L_k(x)~dx,\\\\;\\\\;\\\\;\\\\;k = 0,1,\\\\ldots,n'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.9)",
                            expression: "'(5.9)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" The values "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "w_k",
                expression: "'w_k'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k = 0,1,\\ldots,n",
                expression: "'k = 0,1,\\\\ldots,n'"
              }
            ]
          }),
          _vm._v(", are referred to as the "),
          _c("deep", [_vm._v("quadrature weights")]),
          _vm._v(", while the interpolation points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_k",
                expression: "'x_k'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k=0, 1,\\ldots,n",
                expression: "'k=0, 1,\\\\ldots,n'"
              }
            ]
          }),
          _vm._v(", are called the "),
          _c("deep", [_vm._v("quadrature points")]),
          _vm._v(". The formula (5.8), with "),
          _c("deep", [_vm._v("quadrature weights")]),
          _vm._v(" and equally spaced quadrature points, is called the "),
          _c("deep", [_vm._v("Newton-Cotes formula")]),
          _vm._v(" of order "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v("."),
          _c("br"),
          _c("br"),
          _c("deep", [_vm._v("Derivation of the Trapezium Rule")]),
          _c("br"),
          _vm._v(" To derive the Trapezium rule, we take "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n = 1",
                expression: "'n = 1'"
              }
            ]
          }),
          _vm._v(
            ". The Lagrange interpolation polynomial of degree 1 for the function "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f",
                expression: "'f'"
              }
            ]
          }),
          _vm._v(" is simply "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} P_1(x)&= L_0(x)f(x_0) + L_1(x)f(x_1)\\\\     &= \\frac{x - x_1}{x_0 - x_1}f(x_0) + \\frac{x-x_0}{x_1-x_0}f(x_1)\\\\     &= \\frac{x_1-x}{x_1 - x_0}f(x_0) + \\frac{x-x_0}{x_1-x_0}f(x_1)\\\\     &= \\frac{1}{h}[(x_1-x)f(x_0)+ (x-x_0)f(x_1)]  \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} P_1(x)\\&= L_0(x)f(x_0) + L_1(x)f(x_1)\\\\\\\\     \\&= \\\\frac{x - x_1}{x_0 - x_1}f(x_0) + \\\\frac{x-x_0}{x_1-x_0}f(x_1)\\\\\\\\     \\&= \\\\frac{x_1-x}{x_1 - x_0}f(x_0) + \\\\frac{x-x_0}{x_1-x_0}f(x_1)\\\\\\\\     \\&= \\\\frac{1}{h}[(x_1-x)f(x_0)+ (x-x_0)f(x_1)]  \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Integrating "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_1(x)",
                expression: "'P_1(x)'"
              }
            ]
          }),
          _vm._v(" from "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(" to "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(" gives, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\int_{x_0}^{x_1} f(x)~dx \\approx \\frac{x_1 - x_0}{2}[f(x_0) + f(x_1)] =  \\frac{h}{2}[f(x_0) + f(x_1)]",
                expression:
                  "'\\\\int_{x_0}^{x_1} f(x)~dx \\\\approx \\\\frac{x_1 - x_0}{2}[f(x_0) + f(x_1)] =  \\\\frac{h}{2}[f(x_0) + f(x_1)]'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" which is the Trapezium formula obtained in (5.1)."),
          _c("br"),
          _c("deep", [_vm._v("N.B")]),
          _vm._v(
            " When integrating Lagrange polynomials, it is convenient to express "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x",
                expression: "'x'"
              }
            ]
          }),
          _vm._v(" in terms of the variable "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "s",
                expression: "'s'"
              }
            ]
          }),
          _vm._v(" so that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "x = x_0 + sh\\;\\;\\;\\;\\text{and }\\;\\;\\;x - x_i = (s-i)h.",
                expression:
                  "'x = x_0 + sh\\\\;\\\\;\\\\;\\\\;\\\\text{and }\\\\;\\\\;\\\\;x - x_i = (s-i)h.'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" To integrate from "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(" to "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1",
                expression: "'x_1'"
              }
            ]
          }),
          _vm._v(" we note that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "dx = h~ds,\\;\\; s = 0\\;\\text{when }x = x_0,\\;\\; \\text{and }s = 1\\;\\text{when }x = x_1.",
                expression:
                  "'dx = h~ds,\\\\;\\\\; s = 0\\\\;\\\\text{when }x = x_0,\\\\;\\\\; \\\\text{and }s = 1\\\\;\\\\text{when }x = x_1.'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Thus, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} \\int_{x_0}^{x_1}P_1(x) &= \\int_{x_0}^{x_1}\\left[ \\frac{x_1-x}{x_1 - x_0}f(x_0) + \\frac{x-x_0}{x_1-x_0}f(x_1)\\right]~dx\\\\  & = h \\int_0^1 \\left[\\frac{-(s-1)h}{h}f(x_0) + \\frac{sh}{h}f(x_1) \\right]~ds\\\\  & = \\frac{h}{2}[f(x_0) + f(x_1)] \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} \\\\int_{x_0}^{x_1}P_1(x) \\&= \\\\int_{x_0}^{x_1}\\\\left[ \\\\frac{x_1-x}{x_1 - x_0}f(x_0) + \\\\frac{x-x_0}{x_1-x_0}f(x_1)\\\\right]~dx\\\\\\\\  \\& = h \\\\int_0^1 \\\\left[\\\\frac{-(s-1)h}{h}f(x_0) + \\\\frac{sh}{h}f(x_1) \\\\right]~ds\\\\\\\\  \\& = \\\\frac{h}{2}[f(x_0) + f(x_1)] \\\\end{aligned}'",
                arg: "display"
              }
            ]
          })
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "py-3 my-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.3 Simpson's Formula ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _c("deep", [_vm._v("Derivation of Simpson's 1st Rule")]),
          _c("br"),
          _vm._v(
            " A slightly more sophisticated quadrature formula is obtained by taking "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n = 2",
                expression: "'n = 2'"
              }
            ]
          }),
          _vm._v(". In this case, the three points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0, x_1",
                expression: "'x_0, x_1'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_2",
                expression: "'x_2'"
              }
            ]
          }),
          _vm._v(" are used and integration is done over the interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[x_0,x_2]",
                expression: "'[x_0,x_2]'"
              }
            ]
          }),
          _vm._v(". The quadrature weights are calculated from "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} w_0 & = \\int_{x_0}^{x_2} L_0(x)~dx\\\\ & = \\int_{x_0}^{x_2} \\frac{(x-x_1)(x-x_2)}{(x_0 - x_1)(x_0-x_2)}~dx\\\\ & = h \\int_0^2 \\frac{(s-1)(s-2)h^2}{(-h)(-2h)}~ds\\\\ & = \\frac{h}{2}\\int_0^2 (s^2 - 3s + 2)~ds\\\\ & =\\frac{h}{3} \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} w_0 \\& = \\\\int_{x_0}^{x_2} L_0(x)~dx\\\\\\\\ \\& = \\\\int_{x_0}^{x_2} \\\\frac{(x-x_1)(x-x_2)}{(x_0 - x_1)(x_0-x_2)}~dx\\\\\\\\ \\& = h \\\\int_0^2 \\\\frac{(s-1)(s-2)h^2}{(-h)(-2h)}~ds\\\\\\\\ \\& = \\\\frac{h}{2}\\\\int_0^2 (s^2 - 3s + 2)~ds\\\\\\\\ \\& =\\\\frac{h}{3} \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} w_1& = \\int_{x_0}^{x_2} L_1(x)~dx\\\\ & = \\int_{x_0}^{x_2} \\frac{(x-x_0)(x-x_2)}{(x_1 - x_0)(x_1-x_2)}~dx\\\\ & = h \\int_0^2 \\frac{s(s-2)h^2}{(h)(-h)}~ds\\\\ & = -h\\int_0^2 (s^2 - 2s)~ds\\\\ & =\\frac{4h}{3} \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} w_1\\& = \\\\int_{x_0}^{x_2} L_1(x)~dx\\\\\\\\ \\& = \\\\int_{x_0}^{x_2} \\\\frac{(x-x_0)(x-x_2)}{(x_1 - x_0)(x_1-x_2)}~dx\\\\\\\\ \\& = h \\\\int_0^2 \\\\frac{s(s-2)h^2}{(h)(-h)}~ds\\\\\\\\ \\& = -h\\\\int_0^2 (s^2 - 2s)~ds\\\\\\\\ \\& =\\\\frac{4h}{3} \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} w_2& = \\int_{x_0}^{x_2} L_2(x)~dx\\\\ & = \\int_{x_0}^{x_2} \\frac{(x-x_0)(x-x_1)}{(x_2 - x_0)(x_2-x_1)}~dx\\\\  & = h \\int_0^2 \\frac{s(s-1)h^2}{(2h)(h)}~ds\\\\  & = \\frac{h}{2}\\int_0^2 (s^2 - s)~ds\\\\  &= \\frac{h}{3} \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} w_2\\& = \\\\int_{x_0}^{x_2} L_2(x)~dx\\\\\\\\ \\& = \\\\int_{x_0}^{x_2} \\\\frac{(x-x_0)(x-x_1)}{(x_2 - x_0)(x_2-x_1)}~dx\\\\\\\\  \\& = h \\\\int_0^2 \\\\frac{s(s-1)h^2}{(2h)(h)}~ds\\\\\\\\  \\& = \\\\frac{h}{2}\\\\int_0^2 (s^2 - s)~ds\\\\\\\\ \\ &= \\\\frac{h}{3} \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" This gives, "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_{x_0}^{x_2}f(x)~dx = \\frac{h}{3}\\left[f(x_0) + 4f(x_1) + f(x_2) \\right]",
                            expression:
                              "'\\\\int_{x_0}^{x_2}f(x)~dx = \\\\frac{h}{3}\\\\left[f(x_0) + 4f(x_1) + f(x_2) \\\\right]'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.10)",
                            expression: "'(5.10)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _c("deep", [
            _vm._v("Derivation of Composite Trapezium and Simpson's rule")
          ]),
          _c("br"),
          _vm._v(" The Trapezoid rule for the sub-interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[x_i,x_{i+1}]",
                expression: "'[x_i,x_{i+1}]'"
              }
            ]
          }),
          _vm._v(" is "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_{x_i}^{x_{i+1}} f(x)dx \\approx \\frac{n}{2}[f(x_i) + f(x_{i+1})]",
                            expression:
                              "'\\\\int_{x_i}^{x_{i+1}} f(x)dx \\\\approx \\\\frac{n}{2}[f(x_i) + f(x_{i+1})]'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.11)",
                            expression: "'(5.11)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" Suppose that the interval "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[a,b]",
                expression: "'[a,b]'"
              }
            ]
          }),
          _vm._v(" is partitioned into "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(" equally spaced sub-intervals of length "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "h",
                expression: "'h'"
              }
            ]
          }),
          _vm._v(" as shown in the figure below "),
          _c(
            "div",
            {
              staticClass: "my-3 red-text text-center p-4",
              staticStyle: { border: "2px solid blue" }
            },
            [_vm._v(" Space for figure ")]
          ),
          _vm._v(" The sum of the Trapezoid rule on each interval is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned}\\sum_{i = 0}^{n-1}\\left[\\int_{x_i}^{x_{i+1}} f(x)dx \\right]&= \\int_{a}^b f(x)dx \\\\& \\approx \\frac{h}{2}\\sum_{i=0}^{n-1}[f(x_i) + f(x_{i+1})]\\\\& = \\frac{h}{2}\\left[f(x_0) + f(x_n) + 2 \\sum_{i=1}^{n-1} f(x_i)\\right]\\\\& = \\frac{h}{2}\\left(f_0 + 2f_1 + 2f_2 + \\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\right) \\end{aligned} ",
                expression:
                  "'\\\\begin{aligned}\\\\sum_{i = 0}^{n-1}\\\\left[\\\\int_{x_i}^{x_{i+1}} f(x)dx \\\\right]\\&= \\\\int_{a}^b f(x)dx \\\\\\\\\\& \\\\approx \\\\frac{h}{2}\\\\sum_{i=0}^{n-1}[f(x_i) + f(x_{i+1})]\\\\\\\\\\& = \\\\frac{h}{2}\\\\left[f(x_0) + f(x_n) + 2 \\\\sum_{i=1}^{n-1} f(x_i)\\\\right]\\\\\\\\\\& = \\\\frac{h}{2}\\\\left(f_0 + 2f_1 + 2f_2 + \\\\ldots + 2f_{n-2} + 2f_{n-1}+f_n\\\\right) \\\\end{aligned} '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f_i = f(x_{i})",
                expression: "'f_i = f(x_{i})'"
              }
            ]
          }),
          _vm._v("."),
          _c("br"),
          _vm._v(" The formula for the Simpson's rule over three points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_{i+1}",
                expression: "'x_{i+1}'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_{2i}",
                expression: "'x_{2i}'"
              }
            ]
          }),
          _vm._v(" is "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\int_{x_i}^{x_{i+2}}f(x)~dx = \\frac{h}{3}\\left[f(x_i) + 4f(x_{i+1}) + f(x_{i+2}) \\right]",
                            expression:
                              "'\\\\int_{x_i}^{x_{i+2}}f(x)~dx = \\\\frac{h}{3}\\\\left[f(x_i) + 4f(x_{i+1}) + f(x_{i+2}) \\\\right]'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.12)",
                            expression: "'(5.12)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" Suppose that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[a, b]",
                expression: "'[a, b]'"
              }
            ]
          }),
          _vm._v(" is subdivided into "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "2N",
                expression: "'2N'"
              }
            ]
          }),
          _vm._v(" subintervals "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "[x_i , x_{i+1}]",
                expression: "'[x_i , x_{i+1}]'"
              }
            ]
          }),
          _vm._v(" of equal width "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "h=(b-a)/(2N)",
                expression: "'h=(b-a)/(2N)'"
              }
            ]
          }),
          _vm._v(" by using "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i=a +ih",
                expression: "'x_i=a +ih'"
              }
            ]
          }),
          _vm._v(" for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "i=0,1,\\ldots,2N",
                expression: "'i=0,1,\\\\ldots,2N'"
              }
            ]
          }),
          _vm._v(" as shown below "),
          _c(
            "div",
            {
              staticClass: "my-3 red-text text-center p-4",
              staticStyle: { border: "2px solid blue" }
            },
            [_vm._v(" Space for figure ")]
          ),
          _vm._v(
            " The sum of Simpson's rules over the entire interval (taking 3-points at a time is) "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} \\sum_{i = 0}^{n-1}\\left[\\int_{x_i}^{x_{i+2}} f(x)dx \\right]&= \\int_{a}^b f(x)dx \\\\ & \\approx \\frac{h}{3}\\sum_{i=0}^{n-1}[f(x_{2i}) + 4f(x_{2i+1}+f(x_{2i+2})]\\\\ & = \\frac{h}{3}[(f_0 + 4f_1 + f_2)+(f_2 + 4f_3 + f_4) + (f_4 + 4f_5 + f_6)\\\\ & + \\cdots + (f_{2n-4} + 4f_{2n-3} + f_{2n-2})+(f_{2n-2} + 4f_{2n-1} + f_{2n}) \\\\ & = \\frac{h}{2}(f_0 + 4f_1 + 2f_2 + 4f_3 + 2f_4 + \\cdots + 2f_{2n-2} + 4f_{2n-1}+f_{2n}) \\end{aligned} ",
                expression:
                  "'\\\\begin{aligned} \\\\sum_{i = 0}^{n-1}\\\\left[\\\\int_{x_i}^{x_{i+2}} f(x)dx \\\\right]\\&= \\\\int_{a}^b f(x)dx \\\\\\\\ \\& \\\\approx \\\\frac{h}{3}\\\\sum_{i=0}^{n-1}[f(x_{2i}) + 4f(x_{2i+1}+f(x_{2i+2})]\\\\\\\\ \\& = \\\\frac{h}{3}[(f_0 + 4f_1 + f_2)+(f_2 + 4f_3 + f_4) + (f_4 + 4f_5 + f_6)\\\\\\\\ \\& + \\\\cdots + (f_{2n-4} + 4f_{2n-3} + f_{2n-2})+(f_{2n-2} + 4f_{2n-1} + f_{2n}) \\\\\\\\ \\& = \\\\frac{h}{2}(f_0 + 4f_1 + 2f_2 + 4f_3 + 2f_4 + \\\\cdots + 2f_{2n-2} + 4f_{2n-1}+f_{2n}) \\\\end{aligned} '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The above formula is the composite Simpson's rule. "),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.3")
              ]),
              _vm._v(" Approximate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^1 e^{x^2} ",
                    expression: "'\\\\int_0^1 e^{x^2} '",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" using the "),
              _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
                _c(
                  "li",
                  [
                    _vm._v(" Composite Trapezoid rule with "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "n = 8",
                          expression: "'n = 8'"
                        }
                      ]
                    }),
                    _vm._v("."),
                    _c("br"),
                    _c("br"),
                    _c("deep", [_vm._v("Solution:")]),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "\\begin{aligned} \\int_0^1 e^{x^2}& \\approx \\frac{h}{2}[f_0 + 2f_1 + 2f_2+2f_3+2f_4+ 2f_5+2f_6+2f_7+f_8]\\\\ & = \\frac{0.25}{2}\\left[e^0 + 2\\left(e^{0.25^2}+e^{0.5^2}+e^{0.75^2}+e^{1^2}+e^{1.25^2}+e^{1.5^2}+e^{1.75^2}\\right)+e^{2^2} \\right]\\\\ & = 1.4697123\\end{aligned}",
                          expression:
                            "'\\\\begin{aligned} \\\\int_0^1 e^{x^2}\\& \\\\approx \\\\frac{h}{2}[f_0 + 2f_1 + 2f_2+2f_3+2f_4+ 2f_5+2f_6+2f_7+f_8]\\\\\\\\ \\& = \\\\frac{0.25}{2}\\\\left[e^0 + 2\\\\left(e^{0.25^2}+e^{0.5^2}+e^{0.75^2}+e^{1^2}+e^{1.25^2}+e^{1.5^2}+e^{1.75^2}\\\\right)+e^{2^2} \\\\right]\\\\\\\\ \\& = 1.4697123\\\\end{aligned}'",
                          arg: "display"
                        }
                      ]
                    })
                  ],
                  1
                ),
                _c(
                  "li",
                  [
                    _vm._v(" Composite Simpson's rule with "),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "2n = 8",
                          expression: "'2n = 8'"
                        }
                      ]
                    }),
                    _vm._v("."),
                    _c("br"),
                    _c("br"),
                    _c("deep", [_vm._v("Solution:")]),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            "\\begin{aligned} \\int_0^1 e^{x^2}& \\approx \\frac{h}{3}[f_0 + 4f_1 + 2f_2+4f_3+2f_4+ 4f_5+2f_6+4f_7+f_8]\\\\ & = \\frac{0.25}{3}\\left[e^0 + 4e^{0.25^2}+2e^{0.5^2}+4e^{0.75^2}+2e^{1^2}+4e^{1.25^2}+2e^{1.5^2}+4e^{1.75^2}+e^{2^2} \\right]\\\\ & = 1.4627234 \\end{aligned}",
                          expression:
                            "'\\\\begin{aligned} \\\\int_0^1 e^{x^2}\\& \\\\approx \\\\frac{h}{3}[f_0 + 4f_1 + 2f_2+4f_3+2f_4+ 4f_5+2f_6+4f_7+f_8]\\\\\\\\ \\& = \\\\frac{0.25}{3}\\\\left[e^0 + 4e^{0.25^2}+2e^{0.5^2}+4e^{0.75^2}+2e^{1^2}+4e^{1.25^2}+2e^{1.5^2}+4e^{1.75^2}+e^{2^2} \\\\right]\\\\\\\\ \\& = 1.4627234 \\\\end{aligned}'",
                          arg: "display"
                        }
                      ]
                    })
                  ],
                  1
                )
              ])
            ]
          ),
          _c("div", { staticClass: "my-4 py-3" }, [
            _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
              _vm._v(" 5.3.1 Error analysis of the Trapezoid rule ")
            ]),
            _c(
              "div",
              { staticClass: "theorem my-3 p-3 " },
              [
                _c("theorem-color", [_vm._v("Theorem 5.1")]),
                _c("deep", [
                  _vm._v("Theorem on accuracy of the trapezoid rule")
                ]),
                _c("br"),
                _vm._v(" If "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f''(x)",
                      expression: "'f\\'\\'(x)'"
                    }
                  ]
                }),
                _vm._v(" exists and is continuous on the interval "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[a,b]",
                      expression: "'[a,b]'"
                    }
                  ]
                }),
                _vm._v(" and if the composite trapezoid rule "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "T",
                      expression: "'T'"
                    }
                  ]
                }),
                _vm._v(" with uniform spacing "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "h",
                      expression: "'h'"
                    }
                  ]
                }),
                _vm._v(" is used to estimate the integral "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: " I = \\int_a^b f(x)~dx",
                      expression: "' I = \\\\int_a^b f(x)~dx'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" then for some "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\xi",
                      expression: "'\\\\xi'"
                    }
                  ]
                }),
                _vm._v(" in "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(a,b)",
                      expression: "'(a,b)'"
                    }
                  ]
                }),
                _c(
                  "div",
                  {
                    staticClass: "table-responsive table-stripped",
                    staticStyle: { width: "100%" }
                  },
                  [
                    _c("table", { staticClass: "table" }, [
                      _c("thead", [
                        _c("tr", [
                          _c("th", [
                            _c("div", {
                              directives: [
                                {
                                  name: "katex",
                                  rawName: "v-katex:display",
                                  value:
                                    "E_T = I - T = -\\frac{h^2}{12}(b-a)f''(\\xi)",
                                  expression:
                                    "'E_T = I - T = -\\\\frac{h^2}{12}(b-a)f\\'\\'(\\\\xi)'",
                                  arg: "display"
                                }
                              ]
                            })
                          ]),
                          _c("th", [
                            _c("div", {
                              directives: [
                                {
                                  name: "katex",
                                  rawName: "v-katex:display",
                                  value: "(5.13)",
                                  expression: "'(5.13)'",
                                  arg: "display"
                                }
                              ]
                            })
                          ])
                        ])
                      ])
                    ])
                  ]
                )
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.4")
                ]),
                _vm._v(" Calculate the error bound in evaluating "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle \\int_0^1 e^{-x^2}~dx",
                      expression: "'\\\\displaystyle \\\\int_0^1 e^{-x^2}~dx'"
                    }
                  ]
                }),
                _vm._v(" with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "h = 0.25",
                      expression: "'h = 0.25'"
                    }
                  ]
                }),
                _vm._v(" when using the trapezoid rule."),
                _c("br"),
                _c("deep", [_vm._v("Solution.")]),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned}f(x)&= e^{-x^2}\\\\ f'(x)&= -2xe^{-x^2}\\\\ f''(x)&= -2e^{-x^2} + 4x^2 e^{-x^2} \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned}f(x)\\&= e^{-x^2}\\\\\\\\ f\\'(x)\\&= -2xe^{-x^2}\\\\\\\\ f\\'\\'(x)\\&= -2e^{-x^2} + 4x^2 e^{-x^2} \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" On [0,1], the derivative "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f''(x)",
                      expression: "'f\\'\\'(x)'"
                    }
                  ]
                }),
                _vm._v(
                  " has a magnitude that is no bigger than 2. Thus, the error bound is "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " \\frac{h^2(b-a)}{12}f''(\\xi) \\leq \\frac{(0.25)^2}{12}(1)(2) = 0.0104",
                      expression:
                        "' \\\\frac{h^2(b-a)}{12}f\\'\\'(\\\\xi) \\\\leq \\\\frac{(0.25)^2}{12}(1)(2) = 0.0104'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.5")
                ]),
                _vm._v(" Evaluate the integral "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle \\int_0^2 \\ln(1+x)~dx",
                      expression:
                        "'\\\\displaystyle \\\\int_0^2 \\\\ln(1+x)~dx'"
                    }
                  ]
                }),
                _vm._v(" by the trapezoid rule with an accuracy of at least "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\varepsilon = 0.05",
                      expression: "'\\\\varepsilon = 0.05'"
                    }
                  ]
                }),
                _c("br"),
                _c("deep", [_vm._v("Solution")]),
                _vm._v(": In order to obtain an accuracy "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\varepsilon=0.05",
                      expression: "'\\\\varepsilon=0.05'"
                    }
                  ]
                }),
                _vm._v(", we estimate "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "h",
                      expression: "'h'"
                    }
                  ]
                }),
                _vm._v(" such that "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\frac{h^2(b-a)}{12}f''(\\xi) \\leq \\varepsilon",
                      expression:
                        "'\\\\frac{h^2(b-a)}{12}f\\'\\'(\\\\xi) \\\\leq \\\\varepsilon'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "f(x) = \\ln(1+x),\\;\\;\\;f'(x) = \\frac{1}{1+x},\\;\\;\\;f''(x) = -\\frac{1}{(1+x)^2} ",
                      expression:
                        "'f(x) = \\\\ln(1+x),\\\\;\\\\;\\\\;f\\'(x) = \\\\frac{1}{1+x},\\\\;\\\\;\\\\;f\\'\\'(x) = -\\\\frac{1}{(1+x)^2} '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Thus, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f''(x)",
                      expression: "'f\\'\\'(x)'"
                    }
                  ]
                }),
                _vm._v(" has an absolute maximum of 1 on [0,2] and "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} \\frac{h^2}{12} (2-0)(1) & \\leq  0.05 \\\\ h^2 & \\leq  0.3 \\\\ h &  \\leq   0.548 \\\\ \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\\\frac{h^2}{12} (2-0)(1) \\& \\\\leq  0.05 \\\\\\\\ h^2 \\& \\\\leq  0.3 \\\\\\\\ h \\&  \\\\leq   0.548 \\\\\\\\ \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "n = \\frac{b-a}{h} \\geq \\frac{2}{0.548} = 3.65",
                      expression:
                        "'n = \\\\frac{b-a}{h} \\\\geq \\\\frac{2}{0.548} = 3.65'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Hence, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n = 4",
                      expression: "'n = 4'"
                    }
                  ]
                }),
                _vm._v(" or more points will produce the desired accuracy. "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} \\int_0^2 f(x)~dx &\\approx \\frac{0.5}{2}\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\right]\\\\ &= 0.25 \\left[\\ln(1) + 2\\ln(1.5) + 2\\ln(2) + 2\\ln(2.5) + \\ln(3)\\right] \\\\ &= 1.282105 \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\\\int_0^2 f(x)~dx \\&\\\\approx \\\\frac{0.5}{2}\\\\left[ f(x_0) + 2f(x_1)+2f(x_2)+2f(x_3)+f(x_4)\\\\right]\\\\\\\\ \\&= 0.25 \\\\left[\\\\ln(1) + 2\\\\ln(1.5) + 2\\\\ln(2) + 2\\\\ln(2.5) + \\\\ln(3)\\\\right] \\\\\\\\ \\&= 1.282105 \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            )
          ]),
          _c("div", { staticClass: "my-3 py-3" }, [
            _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
              _vm._v(" 5.3.2 Measuring Precision ")
            ]),
            _c("div", { staticClass: "note note-definition my-2" }, [
              _c("span", { staticClass: "text-success" }, [
                _vm._v(" Definition 5.1 ")
              ]),
              _c("strong", [_vm._v("degree of accuracy")]),
              _vm._v(" or "),
              _c("strong", [_vm._v("precision")]),
              _vm._v(
                " of a quadrature formula is the largest positive integer "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n",
                    expression: "'n'"
                  }
                ]
              }),
              _vm._v(" such that the formula is exact for "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x^k",
                    expression: "'x^k'"
                  }
                ]
              }),
              _vm._v(" for each "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "k = 0,1,2,\\ldots,n",
                    expression: "'k = 0,1,2,\\\\ldots,n'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _vm._v(" The degree of a quadrature formula is "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n",
                  expression: "'n'"
                }
              ]
            }),
            _vm._v(
              " if and only if the error is zero for all polynomials of degree "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "k=0,1,\\ldots,n",
                  expression: "'k=0,1,\\\\ldots,n'"
                }
              ]
            }),
            _vm._v(", but it not zero for some polynomials of degree "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n+1",
                  expression: "'n+1'"
                }
              ]
            }),
            _vm._v(". "),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.6")
                ]),
                _vm._v(" The quadrature formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\displaystyle \\int_{-1}^{1} f(x)~dx \\approx c_0 f(-1) +c_1f(0)+c_2f(1)",
                      expression:
                        "'\\\\displaystyle \\\\int_{-1}^{1} f(x)~dx \\\\approx c_0 f(-1) +c_1f(0)+c_2f(1)'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " is exact for all polynomials of degree less than or equal to 2 "
                ),
                _c("br"),
                _vm._v(" Determine "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0",
                      expression: "'c_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_2",
                      expression: "'c_2'"
                    }
                  ]
                }),
                _vm._v("."),
                _c("br"),
                _c("deep", [_vm._v("Solution:")]),
                _vm._v(" Since the formula is exact for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = 1,\\;\\;x,\\;\\;x^2",
                      expression: "'f(x) = 1,\\\\;\\\\;x,\\\\;\\\\;x^2'"
                    }
                  ]
                }),
                _vm._v(", we have "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} \\int_{-1}^1 1~dx &= c_0 + c_1 + c_2 = 2\\\\ \\int_{-1}^1 x~dx &= -c_0 + c_2 = 0\\\\ \\int_{-1}^1 x^2~dx &= c_0 + c_2 = \\frac{2}{3}\\\\ & c_0 = c_2 = \\frac{1}{3},\\;\\;\\; c_1 = \\frac{4}{3} \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\\\int_{-1}^1 1~dx \\&= c_0 + c_1 + c_2 = 2\\\\\\\\ \\\\int_{-1}^1 x~dx \\&= -c_0 + c_2 = 0\\\\\\\\ \\\\int_{-1}^1 x^2~dx \\&= c_0 + c_2 = \\\\frac{2}{3}\\\\\\\\ \\& c_0 = c_2 = \\\\frac{1}{3},\\\\;\\\\;\\\\; c_1 = \\\\frac{4}{3} \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.7")
                ]),
                _vm._v(" Find the constants "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0",
                      expression: "'c_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1",
                      expression: "'x_1'"
                    }
                  ]
                }),
                _vm._v(" so that the quadrature formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{0}^1 f(x) dx = c_0 f(0) + c_1 f(x_1)",
                      expression:
                        "'\\\\int_{0}^1 f(x) dx = c_0 f(0) + c_1 f(x_1)'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" has the highest possible degree of precision."),
                _c("br"),
                _c("deep", [_vm._v("Solution:")]),
                _vm._v(" Since there are three unknowns "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0",
                      expression: "'c_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1",
                      expression: "'x_1'"
                    }
                  ]
                }),
                _vm._v(", we expect the formula to be exact for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = 1, x",
                      expression: "'f(x) = 1, x'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x^2",
                      expression: "'x^2'"
                    }
                  ]
                }),
                _vm._v(". Thus, "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned}f(x) = 1:,\\;\\; \\int_{0}^1 f(x) dx &= 1 = c_0 + c_1,\\\\ f(x) = x:,\\;\\; \\int_{0}^1 f(x) dx &= \\frac{1}{2} = c_1x_1,\\\\ f(x) = x^2:,\\;\\; \\int_{0}^1 f(x) dx &= \\frac{1}{3} = c_1x_1^2, \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned}f(x) = 1:,\\\\;\\\\; \\\\int_{0}^1 f(x) dx \\&= 1 = c_0 + c_1,\\\\\\\\ f(x) = x:,\\\\;\\\\; \\\\int_{0}^1 f(x) dx \\&= \\\\frac{1}{2} = c_1x_1,\\\\\\\\ f(x) = x^2:,\\\\;\\\\; \\\\int_{0}^1 f(x) dx \\&= \\\\frac{1}{3} = c_1x_1^2, \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Solving, yields "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1 = \\frac{2}{3}",
                      expression: "'x_1 = \\\\frac{2}{3}'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1 = \\frac{3}{4}",
                      expression: "'c_1 = \\\\frac{3}{4}'"
                    }
                  ]
                }),
                _vm._v(". The first equation gives "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0=1 - c_1=\\frac{1}{4}",
                      expression: "'c_0=1 - c_1=\\\\frac{1}{4}'"
                    }
                  ]
                }),
                _vm._v(". The formula is "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_0^1 f(x)dx = \\frac{1}{4}f(0) + \\frac{3}{4}f\\left(\\frac{2}{3}\\right)",
                      expression:
                        "'\\\\int_0^1 f(x)dx = \\\\frac{1}{4}f(0) + \\\\frac{3}{4}f\\\\left(\\\\frac{2}{3}\\\\right)'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            )
          ])
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "my-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 5.4 Gaussian Quadrature Formulas ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(
            " Most numerical integration formulas are based on the pattern "
          ),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              " \\int_{a}^b f(x)dx \\approx A_0f(x_0) + A_1f(x_1) + A_2f(x_2) + \\cdots + A_nf(x_n).",
                            expression:
                              "' \\\\int_{a}^b f(x)dx \\\\approx A_0f(x_0) + A_1f(x_1) + A_2f(x_2) + \\\\cdots + A_nf(x_n).'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(5.14)",
                            expression: "'(5.14)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" The formula can be used for any prescribed "),
          _c("deep", [_vm._v("nodes")]),
          _vm._v(" "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0",
                expression: "'x_0'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_1,\\ldots, x_n",
                expression: "'x_1,\\\\ldots, x_n'"
              }
            ]
          }),
          _vm._v(" and the "),
          _c("deep", [_vm._v("weights")]),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "A_0, A_1,\\ldots, A_n",
                expression: "'A_0, A_1,\\\\ldots, A_n'"
              }
            ]
          }),
          _vm._v(
            ". To determine the weights, it may be assumed that an interpolation polynomial "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P(x)",
                expression: "'P(x)'"
              }
            ]
          }),
          _vm._v(" is a good approximation of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\int_{a}^b P(x)dx",
                expression: "'\\\\int_{a}^b P(x)dx'"
              }
            ]
          }),
          _vm._v(" is a good approximation of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\int_{a}^b f(x)dx",
                expression: "'\\\\int_{a}^b f(x)dx'"
              }
            ]
          }),
          _vm._v(". If the polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P(x)",
                expression: "'P(x)'"
              }
            ]
          }),
          _vm._v(" that interpolates "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "P(x)=\\sum_{i=0}^nf(x_i)\\ell_i(x),",
                expression: "'P(x)=\\\\sum_{i=0}^nf(x_i)\\\\ell_i(x),'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\displaystyle \\ell_i(x)",
                expression: "'\\\\displaystyle \\\\ell_i(x)'"
              }
            ]
          }),
          _vm._v(" is the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\displaystyle i^{\\text{th}}",
                expression: "'\\\\displaystyle i^{\\\\text{th}}'"
              }
            ]
          }),
          _vm._v(" Lagrange polynomial, then "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\int_a^b\\;f(x)\\;dx\\simeq \\int_a^b\\;P(x)dx=\\sum_{i=0}^nf(x_i)\\; \\int_a^b\\;\\ell_i(x)\\;dx,",
                expression:
                  "'\\\\int_a^b\\\\;f(x)\\\\;dx\\\\simeq \\\\int_a^b\\\\;P(x)dx=\\\\sum_{i=0}^nf(x_i)\\\\; \\\\int_a^b\\\\;\\\\ell_i(x)\\\\;dx,'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" If we let "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "\\displaystyle A_i=\\int_a^b\\;\\ell_i(x)",
                expression:
                  "'\\\\displaystyle A_i=\\\\int_a^b\\\\;\\\\ell_i(x)'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" then we have a quadrature rule. "),
          _c(
            "div",
            {
              staticClass: "my-3  p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.8")
              ]),
              _vm._v(
                " Construct a quadrature rule on the interval [0,4] using the nodes 0, 1, 2 and use your quadrature rule to approximate "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^4\\;\\frac{4x}{\\sqrt{x^2+1}}\\;dx.",
                    expression:
                      "'\\\\int_0^4\\\\;\\\\frac{4x}{\\\\sqrt{x^2+1}}\\\\;dx.'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The nodes are given: "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_0=0, ~ x_1=1, ~ x_2=2",
                    expression: "'x_0=0, ~ x_1=1, ~ x_2=2'"
                  }
                ]
              }),
              _vm._v(
                " so we need to first find and then integrate the Lagrange polynomials "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle \\ell_i(x)",
                    expression: "'\\\\displaystyle \\\\ell_i(x)'"
                  }
                ]
              }),
              _vm._v("."),
              _c("br"),
              _vm._v(" Nb. "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_0^4\\;f(x)\\;dx\\simeq f(x_0)\\;  \\int_0^4\\;\\ell_0(x)\\;dx+f(x_1)\\; \\int_0^4\\;\\ell_1(x)\\;dx+f(x_2)\\; \\int_0^4\\;\\ell_2(x)\\;dx",
                    expression:
                      "'\\\\displaystyle \\\\int_0^4\\\\;f(x)\\\\;dx\\\\simeq f(x_0)\\\\;  \\\\int_0^4\\\\;\\\\ell_0(x)\\\\;dx+f(x_1)\\\\; \\\\int_0^4\\\\;\\\\ell_1(x)\\\\;dx+f(x_2)\\\\; \\\\int_0^4\\\\;\\\\ell_2(x)\\\\;dx'"
                  }
                ]
              }),
              _vm._v(" where "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} \\ell_0(x)&=\\frac{(x-1)(x-2}{(0-1)(0-2)}=\\frac{1}{2}(x-1)(x-2),\\cr \\ell_1(x)&=\\frac{(x-0)(x-2)}{(1-0)(1-2)}=-x(x-2)\\cr \\ell_2(x)&=\\frac{(x-0)(x-1)}{(2-0)(2-1)}=\\frac{1}{2}x(x-1). \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} \\\\ell_0(x)\\&=\\\\frac{(x-1)(x-2}{(0-1)(0-2)}=\\\\frac{1}{2}(x-1)(x-2),\\\\cr \\\\ell_1(x)\\&=\\\\frac{(x-0)(x-2)}{(1-0)(1-2)}=-x(x-2)\\\\cr \\\\ell_2(x)\\&=\\\\frac{(x-0)(x-1)}{(2-0)(2-1)}=\\\\frac{1}{2}x(x-1). \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The coefficients are then "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} A_0=\\int_0^4\\;\\ell_0(x)\\;dx&=\\int_0^4\\;\\frac{1}{2}(x-1)(x-2)\\;dx=\\frac{8}{3},\\cr A_1=\\int_0^4\\;\\ell_1(x)\\;dx&=\\int_0^4\\;-x(x-2)\\;dx=-\\frac{16}{3}\\cr A_2=\\int_0^4\\;\\ell_2(x)\\;dx&=\\int_0^4\\;\\frac{1}{2}x(x-1)\\;dx=~~~\\frac{20}{3}. \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} A_0=\\\\int_0^4\\\\;\\\\ell_0(x)\\\\;dx&=\\\\int_0^4\\\\;\\\\frac{1}{2}(x-1)(x-2)\\\\;dx=\\\\frac{8}{3},\\\\cr A_1=\\\\int_0^4\\\\;\\\\ell_1(x)\\\\;dx&=\\\\int_0^4\\\\;-x(x-2)\\\\;dx=-\\\\frac{16}{3}\\\\cr A_2=\\\\int_0^4\\\\;\\\\ell_2(x)\\\\;dx\\&=\\\\int_0^4\\\\;\\\\frac{1}{2}x(x-1)\\\\;dx=~~~\\\\frac{20}{3}. \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Thus the quadrature rule is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_0^4\\;f(x)\\;dx\\approx \\frac{8}{3}f(0)-\\frac{16}{3}f(1)+\\frac{20}{3}f(2).",
                    expression:
                      "'\\\\int_0^4\\\\;f(x)\\\\;dx\\\\approx \\\\frac{8}{3}f(0)-\\\\frac{16}{3}f(1)+\\\\frac{20}{3}f(2).'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Now, "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\dosplaystyle f(x)=\\frac{4x}{\\sqrt{x^2+1}}",
                    expression:
                      "'\\\\dosplaystyle f(x)=\\\\frac{4x}{\\\\sqrt{x^2+1}}'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle f(0)=0, ~~ f(1)=2\\sqrt{2}, ~~f(2)=\\frac{8}{\\sqrt{5}}",
                    expression:
                      "'\\\\displaystyle f(0)=0, ~~ f(1)=2\\\\sqrt{2}, ~~f(2)=\\\\frac{8}{\\\\sqrt{5}}'"
                  }
                ]
              }),
              _vm._v(". Thus "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_0^4\\;f(x)\\;dx\\approx \\frac{8}{3}\\times 0-\\frac{16}{3}\\times 2\\sqrt{2}+\\frac{20}{3}\\times \\frac{8}{\\sqrt{5}}=8.766447.",
                    expression:
                      "'\\\\int_0^4\\\\;f(x)\\\\;dx\\\\approx \\\\frac{8}{3}\\\\times 0-\\\\frac{16}{3}\\\\times 2\\\\sqrt{2}+\\\\frac{20}{3}\\\\times \\\\frac{8}{\\\\sqrt{5}}=8.766447.'",
                    arg: "display"
                  }
                ]
              })
            ]
          ),
          _c(
            "h5",
            { staticClass: "h5-responsive font-weight-bold mt-3 py-3" },
            [
              _vm._v(
                " Determining the nodes weights by undetermined coefficients "
              )
            ]
          ),
          _vm._v(
            " The following example illustrates how nodes and weights may be determined by the method of undetermined coefficients. "
          ),
          _c(
            "div",
            {
              staticClass: "my-3  p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 5.9")
              ]),
              _vm._v(" For the case "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n=2",
                    expression: "'n=2'"
                  }
                ]
              }),
              _vm._v(", the quadrature formula is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_{-1}^1\\,f(x)\\,dx= A_1f(x_1)+A_2f(x_2).",
                    expression:
                      "'\\\\int_{-1}^1\\\\,f(x)\\\\,dx= A_1f(x_1)+A_2f(x_2).'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" In the formula we have 4 unknowns, "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "A_1, A_2",
                    expression: "'A_1, A_2'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_1",
                    expression: "'x_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_2",
                    expression: "'x_2'"
                  }
                ]
              }),
              _vm._v(
                ", so we are possibly looking at a cubic polynomial. To obtain the unknowns we thus evaluate the integral when: "
              ),
              _c("ol", [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=x^3",
                        expression: "'f(x)=x^3'"
                      }
                    ]
                  }),
                  _vm._v(", ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=x^2",
                        expression: "'f(x)=x^2'"
                      }
                    ]
                  }),
                  _vm._v(", ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=x ",
                        expression: "'f(x)=x '"
                      }
                    ]
                  }),
                  _vm._v(" and, ")
                ]),
                _c("li", [
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f(x)=1",
                        expression: "'f(x)=1'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ])
              ]),
              _vm._v(" Doing so gives "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "A_1=A_2=1",
                    expression: "'A_1=A_2=1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle x_2=-x_1=\\sqrt{\\frac{1}{3}}",
                    expression:
                      "'\\\\displaystyle x_2=-x_1=\\\\sqrt{\\\\frac{1}{3}}'"
                  }
                ]
              }),
              _vm._v(". This yields the formula "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_{-1}^{1}f(x)dx \\approx f\\left(-\\frac{1}{\\sqrt{3}}\\right)+f\\left(\\frac{1}{\\sqrt{3}}\\right)",
                    expression:
                      "'\\\\int_{-1}^{1}f(x)dx \\\\approx f\\\\left(-\\\\frac{1}{\\\\sqrt{3}}\\\\right)+f\\\\left(\\\\frac{1}{\\\\sqrt{3}}\\\\right)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(". ")
            ]
          ),
          _c("div", { staticClass: "my-3 py-3" }, [
            _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
              _vm._v(" 3.4.1 Gaussian Quadrature Theorem")
            ]),
            _vm._v(
              " It was observed by Friedrich Gauss that a special placement of the nodes may yield better accuracy of the integration instead of searching for arbitrary nodes. The result of Gauss is summarised in the theorem below, "
            ),
            _c(
              "div",
              { staticClass: "theorem my-3 p-3 " },
              [
                _c("theorem-color", [_vm._v("Theorem 5.2")]),
                _c("deep", [_vm._v("Gauss Quadrature Theorem")]),
                _c("br"),
                _vm._v(" Let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" be a non-trivial polynomial of degree "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n+1",
                      expression: "'n+1'"
                    }
                  ]
                }),
                _vm._v(" such that "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " \\int_a^b x^k q(x) dx = 0,\\;\\;\\; 0 \\leq k \\leq n",
                      expression:
                        "' \\\\int_a^b x^k q(x) dx = 0,\\\\;\\\\;\\\\; 0 \\\\leq k \\\\leq n'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0, x_1,\\ldots, x_n",
                      expression: "'x_0, x_1,\\\\ldots, x_n'"
                    }
                  ]
                }),
                _vm._v(" be the zeros of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(". Then the formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        " \\int_a^b f(x) dx \\approx \\sum_{i = 0}^n A_i f(x_i),;\\;\\;\\text{where }\\;\\;\\; A_i = \\int_a^b \\ell_i(x)dx",
                      expression:
                        "' \\\\int_a^b f(x) dx \\\\approx \\\\sum_{i = 0}^n A_i f(x_i),;\\\\;\\\\;\\\\text{where }\\\\;\\\\;\\\\; A_i = \\\\int_a^b \\\\ell_i(x)dx'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" with these "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_i",
                      expression: "'x_i'"
                    }
                  ]
                }),
                _vm._v(
                  "'s as nodes will be exact for all polynomials of degree at most "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "2n+1",
                      expression: "'2n+1'"
                    }
                  ]
                }),
                _vm._v(". Furthermore, the nodes line in the open interval "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(a,b)",
                      expression: "'(a,b)'"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.10")
                ]),
                _vm._v(
                  " Determine the Gaussian quadrature formula with three Gaussian nodes and three weights for the integral "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{-1}^{1}f(x)",
                      expression: "'\\\\int_{-1}^{1}f(x)'",
                      arg: "display"
                    }
                  ]
                }),
                _c("deep", [_vm._v("Solution.")]),
                _vm._v(
                  " Applying the Gaussian Quadrature Theorem, we must find the polynomial "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" and its roots. The degree of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" is 3, so "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" takes the form "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "q(x) = c_0 + c_1x + c_2x^2 + c_3x^3",
                      expression: "'q(x) = c_0 + c_1x + c_2x^2 + c_3x^3'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" The conditions that "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q",
                      expression: "'q'"
                    }
                  ]
                }),
                _vm._v(" must satisfy are "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^1 q(x)dx = \\int_{-1}^1 x q(x)dx = \\int_{-1}^1x^2q(x)dx = 0.",
                      expression:
                        "'\\\\int_{-1}^1 q(x)dx = \\\\int_{-1}^1 x q(x)dx = \\\\int_{-1}^1x^2q(x)dx = 0.'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" If we let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_0 = c_2 = 0",
                      expression: "'c_0 = c_2 = 0'"
                    }
                  ]
                }),
                _vm._v(", then "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "q(x) = c_1x + c_3x^3",
                      expression: "'q(x) = c_1x + c_3x^3'"
                    }
                  ]
                }),
                _vm._v(", and so "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{-1}^1 q(x)dx = \\int_{-1}^1x^2q(x)dx = 0",
                      expression:
                        "'\\\\int_{-1}^1 q(x)dx = \\\\int_{-1}^1x^2q(x)dx = 0'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " because the integral of an odd function over a symmetric interval is 0. To obtain "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1",
                      expression: "'c_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_3",
                      expression: "'c_3'"
                    }
                  ]
                }),
                _vm._v(", we impose the condition "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_{-1}^{1}x(c_1x + c_3x^3)dx = 0 ",
                      expression: "'\\\\int_{-1}^{1}x(c_1x + c_3x^3)dx = 0 '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" to obtain "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\frac{2}{3}c_1 + \\frac{2}{5}c_3 = 0",
                      expression: "'\\\\frac{2}{3}c_1 + \\\\frac{2}{5}c_3 = 0'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" A convenient solution of this is "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_1 = -3",
                      expression: "'c_1 = -3'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "c_3 = 5",
                      expression: "'c_3 = 5'"
                    }
                  ]
                }),
                _vm._v(". Hence, we obtain "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "q(x) = 5x^3 - 3x ",
                      expression: "'q(x) = 5x^3 - 3x '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" with roots "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "-\\sqrt{3/5}",
                      expression: "'-\\\\sqrt{3/5}'"
                    }
                  ]
                }),
                _vm._v(", 0 and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\sqrt{3 /5}",
                      expression: "'\\\\sqrt{3 /5}'"
                    }
                  ]
                }),
                _vm._v(
                  ". These are the Gaussian nodes for the desired quadrature formula."
                ),
                _c("br"),
                _vm._v(" To obtain the weights "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_0, A_1",
                      expression: "'A_0, A_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_2",
                      expression: "'A_2'"
                    }
                  ]
                }),
                _vm._v(
                  ", we use the method of undetermined coefficients. We want to determine "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_0",
                      expression: "'A_0'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_1",
                      expression: "'A_1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_2",
                      expression: "'A_2'"
                    }
                  ]
                }),
                _vm._v(" in the formula "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^1 f(x)dx \\approx A_0f\\left(\\sqrt{-\\frac{3}{5}}\\right)+ A_1f(0) + A_2f\\left(\\sqrt{\\frac{3}{5}}\\right) ",
                      expression:
                        "'\\\\int_{-1}^1 f(x)dx \\\\approx A_0f\\\\left(\\\\sqrt{-\\\\frac{3}{5}}\\\\right)+ A_1f(0) + A_2f\\\\left(\\\\sqrt{\\\\frac{3}{5}}\\\\right) '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" This equation must be exact for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = 1, x",
                      expression: "'f(x) = 1, x'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x^2",
                      expression: "'x^2'"
                    }
                  ]
                }),
                _vm._v(". Substituting these "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f",
                      expression: "'f'"
                    }
                  ]
                }),
                _vm._v(" monomials and computing the integrals gives "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} A_0 + A_1 + A_2& = 2\\\\ A_0 - A_2& = 0\\\\ A_0 + A_2 &= \\frac{10}{9} \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} A_0 + A_1 + A_2\\& = 2\\\\\\\\ A_0 - A_2\\& = 0\\\\\\\\ A_0 + A_2 \\&= \\\\frac{10}{9} \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" The weights are "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_0 = A_2 = \\frac{5}{9}",
                      expression: "'A_0 = A_2 = \\\\frac{5}{9}'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "A_1 = \\frac{8}{9}",
                      expression: "'A_1 = \\\\frac{8}{9}'"
                    }
                  ]
                }),
                _vm._v(". Thus the formula is "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^1 f(x)dx \\approx \\frac{5}{9} f\\left(\\sqrt{-\\frac{3}{5}}\\right)+ \\frac{8}{9}f(0) + \\frac{5}{9}f\\left(\\sqrt{\\frac{3}{5}}\\right) ",
                      expression:
                        "'\\\\int_{-1}^1 f(x)dx \\\\approx \\\\frac{5}{9} f\\\\left(\\\\sqrt{-\\\\frac{3}{5}}\\\\right)+ \\\\frac{8}{9}f(0) + \\\\frac{5}{9}f\\\\left(\\\\sqrt{\\\\frac{3}{5}}\\\\right) '",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 5.11")
                ]),
                _vm._v(" Use the two-point Gaussian Quadrature rule, "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_{-1}^{1}f(x)~dx \\approx f\\left(\\frac{-\\sqrt{3}}{3}\\right) + f\\left(\\frac{\\sqrt{3}}{3} \\right),",
                      expression:
                        "'\\\\int_{-1}^{1}f(x)~dx \\\\approx f\\\\left(\\\\frac{-\\\\sqrt{3}}{3}\\\\right) + f\\\\left(\\\\frac{\\\\sqrt{3}}{3} \\\\right),'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" to approximate the integral "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "\\int_0^1 x^2 e^{-x}~dx",
                      expression: "'\\\\int_0^1 x^2 e^{-x}~dx'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(
                  " and compare your result against the exact value of the integral"
                ),
                _c("br"),
                _c("deep", [_vm._v("Solution:")]),
                _vm._v(" We note that the limits of integration are not "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "-1",
                      expression: "'-1'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "1",
                      expression: "'1'"
                    }
                  ]
                }),
                _vm._v(". In this case, we use a linear shift using "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "      x=\\frac{(b-a)t+b+a}{2} ",
                      expression: "'      x=\\\\frac{(b-a)t+b+a}{2} '",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" to transform the interval "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[a,b]",
                      expression: "'[a,b]'"
                    }
                  ]
                }),
                _vm._v(" to "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "[-1,1]",
                      expression: "'[-1,1]'"
                    }
                  ]
                }),
                _vm._v("."),
                _c("br"),
                _vm._v(" To use the formula, we start by defining "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle x = \\frac{1+t}{2}",
                      expression: "'\\\\displaystyle x = \\\\frac{1+t}{2}'"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} & ~~~~\\int_0^1 x^2 e^{-x}~dx = \\frac{1}{2}\\int_{-1}^{1}\\left(\\frac{1+t}{2}\\right)^2\\exp(-\\frac{1+t}{2})\\\\ &\\approx \\frac{1}{2}\\left\\{\\left(\\frac{1-\\frac{\\sqrt{3}}{2}}{2} \\right)^2\\exp\\left[-\\left(\\frac{1-\\frac{\\sqrt{3}}{2}}{2}\\right)\\right] +   \\left(\\frac{1 + \\frac{\\sqrt{3}}{2}}{2}\\right)^2\\exp\\left[-\\left(\\frac{1+\\frac{\\sqrt{3}}{2}}{2}\\right)\\right] \\right\\}\\\\  &= \\frac{1}{2}\\left\\{(0.8095)(0.04466) + (0.4544)(0.6220) \\right\\} = 0.1594 \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} \\& ~~~~\\\\int_0^1 x^2 e^{-x}~dx = \\\\frac{1}{2}\\\\int_{-1}^{1}\\\\left(\\\\frac{1+t}{2}\\\\right)^2\\\\exp(-\\\\frac{1+t}{2})\\\\\\\\ \\&\\\\approx \\\\frac{1}{2}\\\\left\\\\{\\\\left(\\\\frac{1-\\\\frac{\\\\sqrt{3}}{2}}{2} \\\\right)^2\\\\exp\\\\left[-\\\\left(\\\\frac{1-\\\\frac{\\\\sqrt{3}}{2}}{2}\\\\right)\\\\right] +   \\\\left(\\\\frac{1 + \\\\frac{\\\\sqrt{3}}{2}}{2}\\\\right)^2\\\\exp\\\\left[-\\\\left(\\\\frac{1+\\\\frac{\\\\sqrt{3}}{2}}{2}\\\\right)\\\\right] \\\\right\\\\}\\\\\\\\  \\&= \\\\frac{1}{2}\\\\left\\\\{(0.8095)(0.04466) + (0.4544)(0.6220) \\\\right\\\\} = 0.1594 \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Exact value of the integral is "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\int_0^1 x^2 e^{-x}~dx = \\left. -x^2e^{-x} - 2xe^{-x}-2e^{-x}\\right |_0^1 = 0.1606",
                      expression:
                        "'\\\\int_0^1 x^2 e^{-x}~dx = \\\\left. -x^2e^{-x} - 2xe^{-x}-2e^{-x}\\\\right |_0^1 = 0.1606'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Thus, the Error is "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "= 0.0012",
                      expression: "'= 0.0012'"
                    }
                  ]
                })
              ],
              1
            )
          ])
        ],
        1
      ),
      _c(
        "div",
        {
          staticClass: "my-3 p-3",
          staticStyle: { "background-color": "#fff3e0" }
        },
        [
          _c(
            "h5",
            { staticClass: "h4-responsive" },
            [
              _vm._v("Exercise 5.1 "),
              _c("deep", [_vm._v("Numerical Integration:")])
            ],
            1
          ),
          _c("ol", [
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Using the smallest step-size possible, approximate "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_2^6 \\frac{1}{1 + x}~dx",
                    expression: "'\\\\int_2^6 \\\\frac{1}{1 + x}~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Simpson's rule using only the values of "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" at "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x = 2, 3, 4, 5 ",
                    expression: "'x = 2, 3, 4, 5 '"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "6",
                    expression: "'6'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Evaluate the integral "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "{\\displaystyle \\int_0^1 x^2e^{-x}\\,dx}",
                    expression:
                      "'{\\\\displaystyle \\\\int_0^1 x^2e^{-x}\\\\,dx}'"
                  }
                ]
              }),
              _vm._v(
                " analytically correct to two decimal places. Use the trapezoidal rule, then Simpson's rule both with "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h=0.25",
                    expression: "'h=0.25'"
                  }
                ]
              }),
              _vm._v(" to compute the same integral. Compare the results. ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Determine the values of "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n",
                    expression: "'n'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "h",
                    expression: "'h'"
                  }
                ]
              }),
              _vm._v(" required to approximate "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^2 \\frac{1}{x+4}~dx",
                    expression: "'\\\\int_0^2 \\\\frac{1}{x+4}~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" to within "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "10^{-5}",
                    expression: "'10^{-5}'"
                  }
                ]
              }),
              _vm._v(" then compute the approximation using "),
              _vm._m(1)
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Consider the integral "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "{\\displaystyle \\int_0^1 \\sin \\left(\\frac{\\pi x^2}{2}\\right)dx}",
                    expression:
                      "'{\\\\displaystyle \\\\int_0^1 \\\\sin \\\\left(\\\\frac{\\\\pi x^2}{2}\\\\right)dx}'"
                  }
                ]
              }),
              _vm._v(
                ". Suppose that we wish to integrate numerically, with an error of magnitude less than "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "10^{-3}",
                    expression: "'10^{-3}'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" What width "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h",
                        expression: "'h'"
                      }
                    ]
                  }),
                  _vm._v(
                    " is needed if we wish to use the composite Trapezoid rule? "
                  )
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" What width "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h",
                        expression: "'h'"
                      }
                    ]
                  }),
                  _vm._v(
                    " is needed if we wish to use the composite Simpson rule? "
                  )
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Evaluate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^2 \\ln(1 + x)~dx",
                    expression: "'\\\\int_0^2 \\\\ln(1 + x)~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" by "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Trapezoidal rule with accuracy "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\epsilon = 0.05",
                        expression: "'\\\\epsilon = 0.05'"
                      }
                    ]
                  })
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Simpson rule using step size "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h = 0.5",
                        expression: "'h = 0.5'"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Suppose an approximation to "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle I=\\int_0^{2h} f(x) \\, dx",
                    expression:
                      "'\\\\displaystyle I=\\\\int_0^{2h} f(x) \\\\, dx'"
                  }
                ]
              }),
              _vm._v(" is sought, and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" in "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[0,2h]",
                    expression: "'[0,2h]'"
                  }
                ]
              }),
              _vm._v(
                " is approximated by the linear function through the TWO points "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(0,f(0))",
                    expression: "'(0,f(0))'"
                  }
                ]
              }),
              _vm._v(", and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(h,f(h))",
                    expression: "'(h,f(h))'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(
                    " Write down the Lagrange representation of the polynomial that interpolates "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f",
                        expression: "'f'"
                      }
                    ]
                  }),
                  _vm._v(" at the two points "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "(0,f(0))",
                        expression: "'(0,f(0))'"
                      }
                    ]
                  }),
                  _vm._v(", and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "(h,f(h))",
                        expression: "'(h,f(h))'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(
                    " By integrating the polynomial in (a) above between "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "0",
                        expression: "'0'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "2h",
                        expression: "'2h'"
                      }
                    ]
                  }),
                  _vm._v(
                    ", prove that the desired quadrature formula is simply "
                  ),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: " I \\approx \\tilde{I} =2hf(h).",
                        expression: "' I \\\\approx \\\\tilde{I} =2hf(h).'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c(
                  "li",
                  { staticStyle: { "margin-bottom": "10px" } },
                  [
                    _vm._v(
                      " Use a three-point Gaussian Quadrature rule to approximate "
                    ),
                    _c("span", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex",
                          value: "\\displaystyle=\\int_0^2 e^{-x^2} \\, dx",
                          expression:
                            "'\\\\displaystyle=\\\\int_0^2 e^{-x^2} \\\\, dx'"
                        }
                      ]
                    }),
                    _vm._v("."),
                    _c("br"),
                    _c("deep", [_vm._v("Note:")]),
                    _c("div", {
                      directives: [
                        {
                          name: "katex",
                          rawName: "v-katex:display",
                          value:
                            " \\displaystyle \\left \\{ \\begin{array}{ccc} x_0 = -\\sqrt{\\frac{3}{5}}& ~~ & A_0=\\frac{5}{9}\\\\ x_1 = 0& ~~ & A_1=\\frac{8}{9}\\\\ x_2 = \\sqrt{\\frac{3}{5}}& ~~ & A_2=\\frac{5}{9} \\end{array} \\right .",
                          expression:
                            "' \\\\displaystyle \\\\left \\\\{ \\\\begin{array}{ccc} x_0 = -\\\\sqrt{\\\\frac{3}{5}}& ~~ \\& A_0=\\\\frac{5}{9}\\\\\\\\ x_1 = 0\\& ~~ \\& A_1=\\\\frac{8}{9}\\\\\\\\ x_2 = \\\\sqrt{\\\\frac{3}{5}}\\& ~~ \\& A_2=\\\\frac{5}{9} \\\\end{array} \\\\right .'",
                          arg: "display"
                        }
                      ]
                    })
                  ],
                  1
                )
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "p_2(x)",
                    expression: "'p_2(x)'"
                  }
                ]
              }),
              _vm._v(" be the quadratic polynomial interpolating "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" at "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(0,f(0))",
                    expression: "'(0,f(0))'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(h,f(h))",
                    expression: "'(h,f(h))'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(2h,f(2h))",
                    expression: "'(2h,f(2h))'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Write down the Lagrange representation of "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(". ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" By integrating "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(" between "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "0",
                        expression: "'0'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "3h",
                        expression: "'3h'"
                      }
                    ]
                  }),
                  _vm._v(
                    ", derive the following numerical integration rule that approximates "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\displaystyle I=\\int_0^{3h} f(x)\\, dx",
                        expression:
                          "'\\\\displaystyle I=\\\\int_0^{3h} f(x)\\\\, dx'"
                      }
                    ]
                  }),
                  _vm._v("; that is, show that "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "I \\approx \\frac{3h}{4} \\left [ f(0) +3f(2h)\\right ].",
                        expression:
                          "'I \\\\approx \\\\frac{3h}{4} \\\\left [ f(0) +3f(2h)\\\\right ].'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "p_2(x)",
                    expression: "'p_2(x)'"
                  }
                ]
              }),
              _vm._v(" be the quadratic polynomial interpolating "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" at "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(0,f(0))",
                    expression: "'(0,f(0))'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(h,f(h))",
                    expression: "'(h,f(h))'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(2h,f(2h))",
                    expression: "'(2h,f(2h))'"
                  }
                ]
              }),
              _vm._v(". "),
              _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" Write down the the polynomial "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(" in Newton forward-difference form. ")
                ]),
                _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
                  _vm._v(" By integrating "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "p_2(x)",
                        expression: "'p_2(x)'"
                      }
                    ]
                  }),
                  _vm._v(" between "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "h",
                        expression: "'h'"
                      }
                    ]
                  }),
                  _vm._v(" and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "2h",
                        expression: "'2h'"
                      }
                    ]
                  }),
                  _vm._v(
                    ", derive the following numerical integration rule that approximates "
                  ),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\displaystyle I=\\int_h^{2h} f(x)\\, dx",
                        expression:
                          "'\\\\displaystyle I=\\\\int_h^{2h} f(x)\\\\, dx'"
                      }
                    ]
                  }),
                  _vm._v("; that is, show that "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "  I \\approx \\frac{h}{12} \\left [ -f(0) +8f(h)+5f(2h)\\right ].",
                        expression:
                          "'  I \\\\approx \\\\frac{h}{12} \\\\left [ -f(0) +8f(h)+5f(2h)\\\\right ].'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Use the two-point Gaussian Quadrature rule, "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\int_{-1}^{1}f(x)~dx \\approx f\\left(\\frac{-\\sqrt{3}}{3}\\right) + f\\left(\\frac{\\sqrt{3}}{3} \\right),",
                    expression:
                      "'\\\\int_{-1}^{1}f(x)~dx \\\\approx f\\\\left(\\\\frac{-\\\\sqrt{3}}{3}\\\\right) + f\\\\left(\\\\frac{\\\\sqrt{3}}{3} \\\\right),'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" to approximate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_0^1 x^2 e^{-x}~dx",
                    expression: "'\\\\int_0^1 x^2 e^{-x}~dx'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " and compare your result against the exact value of the integral. "
              )
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(
                " Prove that the Gaussian quadrature formula with three Gaussian nodes and three weights for the integral "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\displaystyle \\int_{-1}^1 f(x)~dx",
                    expression: "'\\\\displaystyle \\\\int_{-1}^1 f(x)~dx'"
                  }
                ]
              }),
              _vm._v(" is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " \\int_{-1}^{1} f(x)~dx \\approx \\frac{5}{9} f\\left( -\\sqrt{\\frac{3}{5}} \\right) + \\frac{8}{9} f(0) + \\frac{5}{9}f\\left( \\sqrt{\\frac{3}{5}}\\right)",
                    expression:
                      "' \\\\int_{-1}^{1} f(x)~dx \\\\approx \\\\frac{5}{9} f\\\\left( -\\\\sqrt{\\\\frac{3}{5}} \\\\right) + \\\\frac{8}{9} f(0) + \\\\frac{5}{9}f\\\\left( \\\\sqrt{\\\\frac{3}{5}}\\\\right)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" use the above formula to approximate the integral "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_{-1}^1 x^4~dx",
                    expression: "'\\\\int_{-1}^1 x^4~dx'",
                    arg: "display"
                  }
                ]
              })
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" The quadrature formula "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_{-1}^{1} f(x)~dx \\approx c_0 f(-1) +c_1f(0)+c_2f(1)",
                    expression:
                      "'\\\\displaystyle \\\\int_{-1}^{1} f(x)~dx \\\\approx c_0 f(-1) +c_1f(0)+c_2f(1)'"
                  }
                ]
              }),
              _vm._v(
                " is exact for all polynomials of degree less than or equal to 2. Determine "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_0",
                    expression: "'c_0'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_1",
                    expression: "'c_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_2",
                    expression: "'c_2'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" The quadrature formula "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_{0}^{1} f(x)~dx \\approx c_0 f(0) +c_1f(x_1)",
                    expression:
                      "'\\\\displaystyle \\\\int_{0}^{1} f(x)~dx \\\\approx c_0 f(0) +c_1f(x_1)'"
                  }
                ]
              }),
              _vm._v(" has the highest degree of precision. Determine "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_0",
                    expression: "'c_0'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_1",
                    expression: "'c_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_1",
                    expression: "'x_1'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" The quadrature formula "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle \\int_{0}^{1} f(x)~dx \\approx \\frac{1}{2} f(x_0) +c_1f(x_1)",
                    expression:
                      "'\\\\displaystyle \\\\int_{0}^{1} f(x)~dx \\\\approx \\\\frac{1}{2} f(x_0) +c_1f(x_1)'"
                  }
                ]
              }),
              _vm._v(" has the highest degree of precision. Determine "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_0",
                    expression: "'x_0'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c_1",
                    expression: "'c_1'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_1",
                    expression: "'x_1'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Establish a numerical integration formula of the form "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "\\int_a^b f(x)~dx \\approx A f(a) + B f'(b)",
                    expression:
                      "'\\\\int_a^b f(x)~dx \\\\approx A f(a) + B f\\'(b)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " that is accurate for polynomials of as high a degree as possible. "
              )
            ]),
            _c("li", { staticStyle: { "margin-bottom": "15px" } }, [
              _vm._v(" Construct a quadrature rule of the form "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " \\int_{-1}^{1} f(x)~dx \\approx \\alpha f\\left(-\\frac{1}{2}\\right) + \\beta f(0) + \\gamma f\\left(\\frac{1}{2}\\right)",
                    expression:
                      "' \\\\int_{-1}^{1} f(x)~dx \\\\approx \\\\alpha f\\\\left(-\\\\frac{1}{2}\\\\right) + \\\\beta f(0) + \\\\gamma f\\\\left(\\\\frac{1}{2}\\\\right)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" that is exact for all polynomials of degree "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\leq 2",
                    expression: "'\\\\leq 2'"
                  }
                ]
              }),
              _vm._v("; that is, determine values for "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\alpha",
                    expression: "'\\\\alpha'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\beta",
                    expression: "'\\\\beta'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\gamma",
                    expression: "'\\\\gamma'"
                  }
                ]
              }),
              _vm._v(". ")
            ])
          ])
        ]
      )
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "section",
      {
        staticClass: "py-3 px-3 mx-4",
        staticStyle: { "background-color": "#fff3e0" }
      },
      [
        _c("h3", { staticClass: " h3-responsive font-weight-bold" }, [
          _vm._v(" 5.Numerical Integration")
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
        _vm._v(" Composite Trapezoid rule ")
      ]),
      _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
        _vm._v(" Composite Simpson rule ")
      ])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}