{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit4.vue?vue&type=template&id=851e34f4&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit4.vue","mtime":1599866739036},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "unit4" }, [
    _vm._m(0),
    _c("section", { staticClass: "dark-grey-text mb-4 p-3 mx-4" }, [
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 4.1 Polynomial Interpolation ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(
            " The viscosity of water has been experimentally determined at different temperatures, as indicated in the following table. "
          ),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "50%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", {}, [_vm._v(" Temperature ")]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "0^o",
                            expression: "'0^o'"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "5^o",
                            expression: "'5^o'"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "10^o",
                            expression: "'10^o'"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "14^o",
                            expression: "'14^o'"
                          }
                        ]
                      })
                    ])
                  ])
                ]),
                _c("tbody", [
                  _c("tr", [
                    _c("td", [_vm._v(" viscosity ")]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "1.792",
                            expression: "'1.792'"
                          }
                        ]
                      })
                    ]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: " 1.519",
                            expression: "' 1.519'"
                          }
                        ]
                      })
                    ]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "1.308",
                            expression: "'1.308'"
                          }
                        ]
                      })
                    ]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "1.140",
                            expression: "'1.140'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(
            " From this table, how can we estimate a reasonable value for the viscosity at a temperature of "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "8^o",
                expression: "'8^o'"
              }
            ]
          }),
          _vm._v(" ? The method of "),
          _c("deep", [_vm._v("Polynomial Interpolation")]),
          _vm._v(
            " is used to find polynomial that passes assumes the values in the table. This polynomial should provide acceptable intermediate values for temperatures not tabulated."
          ),
          _c("br"),
          _c("deep", [_vm._v("Interpolation Problem Statement")]),
          _c("br"),
          _vm._v(" Given "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(n+1)",
                expression: "'(n+1)'"
              }
            ]
          }),
          _vm._v(" distinct points as shown in the table below "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "50%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", {}, [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "x",
                            expression: "'x'"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "x_1",
                            expression: "'x_1'"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "x_2",
                            expression: "'x_2'"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\dots",
                            expression: "'\\\\dots'"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "x_n",
                            expression: "'x_n'"
                          }
                        ]
                      })
                    ])
                  ])
                ]),
                _c("tbody", [
                  _c("tr", [
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "y",
                            expression: "'y'"
                          }
                        ]
                      })
                    ]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "y_1",
                            expression: "'y_1'"
                          }
                        ]
                      })
                    ]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "y_2",
                            expression: "'y_2'"
                          }
                        ]
                      })
                    ]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\dots",
                            expression: "'\\\\dots'"
                          }
                        ]
                      })
                    ]),
                    _c("td", [
                      _c("span", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "y_n",
                            expression: "'y_n'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" we want to find a polynomial that is defined for all "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x",
                expression: "'x'"
              }
            ]
          }),
          _vm._v(", and takes on the corresponding value of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "y_i",
                expression: "'y_i'"
              }
            ]
          }),
          _vm._v(" for each of the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n+1",
                expression: "'n+1'"
              }
            ]
          }),
          _vm._v(" distinct "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v("'s in the table. A polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P",
                expression: "'P'"
              }
            ]
          }),
          _vm._v(" for which "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "P(x_i) = y_i ~~~~~~~\\text{ when } 0 \\leq i \\leq n",
                expression:
                  "'P(x_i) = y_i ~~~~~~~\\\\text{ when } 0 \\\\leq i \\\\leq n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" is said to "),
          _c("deep", [_vm._v("interpolate")]),
          _vm._v(" the table. The points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(" are called "),
          _c("deep", [_vm._v("nodes")]),
          _vm._v(
            ". Generally, degree of the polynomial depends on the number of nodes. "
          ),
          _c(
            "div",
            { staticClass: "theorem my-3 p-3 " },
            [
              _c("theorem-color", [_vm._v("Theorem 4.1")]),
              _vm._v(" "),
              _c("deep", [_vm._v("Weierstrass Approximation Theorem")]),
              _c("br"),
              _vm._v(" If "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f",
                    expression: "'f'"
                  }
                ]
              }),
              _vm._v(" is defined and continuous on "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\epsilon > 0",
                    expression: "'\\\\epsilon > 0'"
                  }
                ]
              }),
              _vm._v(" is given, then there exists a polynomial "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "P",
                    expression: "'P'"
                  }
                ]
              }),
              _vm._v(", defined on "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v(", with the property that "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "|f(x) - P(x)| < \\epsilon, \\quad \\forall x \\in [a,b].",
                    expression:
                      "'|f(x) - P(x)| < \\\\epsilon, \\\\quad \\\\forall x \\\\in [a,b].'",
                    arg: "display"
                  }
                ]
              })
            ],
            1
          ),
          _c("p", [
            _vm._v(
              " Thus a given function can be approximated `closely' by a polynomial which passes through the points "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value:
                    "(x_0,f(x_0)),\\;(x_1,f(x_1)),\\ldots,\\; (x_n,f(x_n))",
                  expression:
                    "'(x_0,f(x_0)),\\\\;(x_1,f(x_1)),\\\\ldots,\\\\; (x_n,f(x_n))'"
                }
              ]
            }),
            _vm._v(". ")
          ]),
          _c("p", [
            _vm._v(" Knowing that "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f(x_k)",
                  expression: "'f(x_k)'"
                }
              ]
            }),
            _vm._v(" (written compactly as "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f_k",
                  expression: "'f_k'"
                }
              ]
            }),
            _vm._v("), "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "k = 0,1,\\ldots,n",
                  expression: "'k = 0,1,\\\\ldots,n'"
                }
              ]
            }),
            _vm._v(" are the values of a certain function "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "y=f(x)",
                  expression: "'y=f(x)'"
                }
              ]
            }),
            _vm._v(" at "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_k",
                  expression: "'x_k'"
                }
              ]
            }),
            _vm._v(
              ", the most obvious thing then to do is to construct a polynomial "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "p_n(x)",
                  expression: "'p_n(x)'"
                }
              ]
            }),
            _vm._v(" of degree at most "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n",
                  expression: "'n'"
                }
              ]
            }),
            _vm._v(" that passes through the "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(n+1)",
                  expression: "'(n+1)'"
                }
              ]
            }),
            _vm._v(" points: ")
          ]),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "(x_0,f_0),~(x_1,f_1),~\\cdots, (x_n,f_n)",
                expression: "'(x_0,f_0),~(x_1,f_1),~\\\\cdots, (x_n,f_n)'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" If the nodes "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0, x_1, \\ldots, x_n",
                expression: "'x_0, x_1, \\\\ldots, x_n'"
              }
            ]
          }),
          _vm._v(
            " are assumed to be distinct, the such a polynomial always does exist and is unique, as can be seen from the following result."
          ),
          _c("br"),
          _vm._v(" Let "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x) = a_0 + a_1 x + a_2x^2 + \\ldots + a_nx_n",
                expression:
                  "'P_n(x) = a_0 + a_1 x + a_2x^2 + \\\\ldots + a_nx_n'"
              }
            ]
          }),
          _vm._v(" be a polynomial of degree "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(". If "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(" interpolates "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" at "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0, x_1,\\ldots, x_n",
                expression: "'x_0, x_1,\\\\ldots, x_n'"
              }
            ]
          }),
          _vm._v(", we must have, by definition "),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: " row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "P_n(x_0) = f_0 = a_0 + a_1 x_0 + a_2x_0^2 + \\ldots + a_nx_0^n",
                      expression:
                        "'P_n(x_0) = f_0 = a_0 + a_1 x_0 + a_2x_0^2 + \\\\ldots + a_nx_0^n'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "P_n(x_1) = f_1 = a_0 + a_1 x_1 + a_2x_1^2 + \\ldots + a_nx_1^n",
                      expression:
                        "'P_n(x_1) = f_1 = a_0 + a_1 x_1 + a_2x_1^2 + \\\\ldots + a_nx_1^n'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value:
                        "~~~~~~~~~~~~~~~~~\\vdots~~~~~~~~~~~~~~~~~  \\vdots \\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;\\;  \\vdots",
                      expression:
                        "'~~~~~~~~~~~~~~~~~\\\\vdots~~~~~~~~~~~~~~~~~  \\\\vdots \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  \\\\vdots'"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "P_n(x_n) = f_n = a_0 + a_1 x_n + a_2x_n^2 + \\ldots + a_nx_n^n ",
                      expression:
                        "'P_n(x_n) = f_n = a_0 + a_1 x_n + a_2x_n^2 + \\\\ldots + a_nx_n^n '",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "~~~~",
                      expression: "'~~~~'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "~~~~",
                      expression: "'~~~~'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(4.1)",
                      expression: "'(4.1)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" These equations can be written in matrix form as "),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\left(\\begin{matrix}  1 & x_0 & x_0^2 & \\cdots & x_0^n\\\\  1 & x_1 & x_1^2 & \\cdots & x_1^n \\\\ \\vdots  & \\vdots & \\vdots & \\cdots & \\vdots \\\\  1 & x_n & x_n^2 & \\cdots & x_n^n \\\\ \\end{matrix}\\right)   \\left(\\begin{matrix}  a_0\\\\a_1\\\\ \\vdots\\\\a_n \\end{matrix} \\right) =  \\left(\\begin{matrix} f_0 \\\\ f_1 \\\\ \\vdots \\\\ f_n \\end{matrix} \\right)",
                      expression:
                        "'\\\\left(\\\\begin{matrix}  1 \\& x_0 \\& x_0^2 \\& \\\\cdots \\& x_0^n\\\\\\\\  1 \\& x_1 \\& x_1^2 \\& \\\\cdots \\& x_1^n \\\\\\\\ \\\\vdots  \\& \\\\vdots \\& \\\\vdots \\& \\\\cdots & \\\\vdots \\\\\\\\  1 \\& x_n \\& x_n^2 \\& \\\\cdots \\& x_n^n \\\\\\\\ \\\\end{matrix}\\\\right)   \\\\left(\\\\begin{matrix}  a_0\\\\\\\\a_1\\\\\\\\ \\\\vdots\\\\\\\\a_n \\\\end{matrix} \\\\right) =  \\\\left(\\\\begin{matrix} f_0 \\\\\\\\ f_1 \\\\\\\\ \\\\vdots \\\\\\\\ f_n \\\\end{matrix} \\\\right)'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "~~~~~",
                      expression: "'~~~~~'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(4.2)",
                      expression: "'(4.2)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" The coefficient matrix in (4.2) is called the "),
          _c("deep", [_vm._v("Vandermonde matrix.")]),
          _c("br"),
          _vm._v(" Because "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0, x_1, \\ldots, x_n",
                expression: "'x_0, x_1, \\\\ldots, x_n'"
              }
            ]
          }),
          _vm._v(
            " are distinct, it can be shown that the above matrix system is nonsingular. Thus the linear system for the unknowns "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_0, a_1, \\ldots, a_n",
                expression: "'a_0, a_1, \\\\ldots, a_n'"
              }
            ]
          }),
          _vm._v(" has a unique solution. This means that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(
            " exists and is unique. This leads to the following theorem. "
          ),
          _c(
            "div",
            { staticClass: "theorem my-3 p-3 " },
            [
              _c("theorem-color", [_vm._v("Theorem 4.1")]),
              _vm._v(" "),
              _c("deep", [
                _vm._v(
                  "Existence and Uniqueness Theorem for Polynomial Interpolation"
                )
              ]),
              _c("br"),
              _vm._v(" Given "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(n+1)",
                    expression: "'(n+1)'"
                  }
                ]
              }),
              _vm._v(" distinct points "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "x_0, x_1, \\ldots, x_n",
                    expression: "'x_0, x_1, \\\\ldots, x_n'"
                  }
                ]
              }),
              _vm._v(" and the associated values "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f_0, f_1, \\ldots, f_n",
                    expression: "'f_0, f_1, \\\\ldots, f_n'"
                  }
                ]
              }),
              _vm._v(" of a function "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" at these points (i.e if "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)=f_i",
                    expression: "'f(x)=f_i'"
                  }
                ]
              }),
              _vm._v(") there is a unique polynomial "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "p_n(x)",
                    expression: "'p_n(x)'"
                  }
                ]
              }),
              _vm._v(" of degree at most "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n",
                    expression: "'n'"
                  }
                ]
              }),
              _vm._v(" such that "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "P_n(x)= f_i~,~~~~~~\\text{ for }~~i = 0,1,\\ldots,n",
                    expression:
                      "'P_n(x)= f_i~,~~~~~~\\\\text{ for }~~i = 0,1,\\\\ldots,n'",
                    arg: "display"
                  }
                ]
              })
            ],
            1
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 4.1")
              ]),
              _vm._v(" Find a cubic polynomial "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "P_3(x) = a_0 + a_1x + a_2x^2 + a_3x^3",
                    expression: "'P_3(x) = a_0 + a_1x + a_2x^2 + a_3x^3'"
                  }
                ]
              }),
              _vm._v(" that interpolates the data "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(-2, 10)",
                    expression: "'(-2, 10)'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(-1, 4)",
                    expression: "'(-1, 4)'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(1, 6)",
                    expression: "'(1, 6)'"
                  }
                ]
              }),
              _vm._v(" and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(2, 3)",
                    expression: "'(2, 3)'"
                  }
                ]
              }),
              _c("br"),
              _c("deep", [_vm._v("Solution:")]),
              _c("br"),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} P_3(-2) = 10 &\\Longrightarrow a_0 -2a_1  + 4a_2 - 8a_3 = 10 \\\\  P_3(-1) = 4  &\\Longrightarrow a_0 -a_1   +  a_2 -  a_3 = 4 \\\\ P_3(1) = 6  &\\Longrightarrow a_0 +a_1   +  a_2 +  a_3 = 6 \\\\ P_3(2) = 3  &\\Longrightarrow a_0 +2a_1  + 4a_2 + 8a_3 = 3 \\\\ \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} P_3(-2) = 10 \\&\\\\Longrightarrow a_0 -2a_1  + 4a_2 - 8a_3 = 10 \\\\\\\\  P_3(-1) = 4  \\&\\\\Longrightarrow a_0 -a_1   +  a_2 -  a_3 = 4 \\\\\\\\ P_3(1) = 6  \\&\\\\Longrightarrow a_0 +a_1   +  a_2 +  a_3 = 6 \\\\\\\\ P_3(2) = 3  \\&\\\\Longrightarrow a_0 +2a_1  + 4a_2 + 8a_3 = 3 \\\\\\\\ \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " Expressing the above equations in Matrix-Vector form gives; "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\left[ \\begin{array}{llll} 1 &-2& 4&-8 \\\\ 1 &-1& 1&-1 \\\\ 1 &1 & 1& 1 \\\\ 1 &2 & 4& 8 \\\\ \\end{array} \\right] \\left[  \\begin{array}{c} a_0\\\\ a_1\\\\ a_2\\\\ a_3\\\\ \\end{array} \\right] =  \\left[  \\begin{array}{c} 10\\\\ 4\\\\ 6\\\\ 3\\\\ \\end{array} \\right]",
                    expression:
                      "'\\\\left[ \\\\begin{array}{llll} 1 \\&-2\\& 4\\&-8 \\\\\\\\ 1 \\&-1\\& 1\\&-1 \\\\\\\\ 1 \\&1 \\& 1\\& 1 \\\\\\\\ 1 \\&2 \\& 4\\& 8 \\\\\\\\ \\\\end{array} \\\\right] \\\\left[  \\\\begin{array}{c} a_0\\\\\\\\ a_1\\\\\\\\ a_2\\\\\\\\ a_3\\\\\\\\ \\\\end{array} \\\\right] =  \\\\left[  \\\\begin{array}{c} 10\\\\\\\\ 4\\\\\\\\ 6\\\\\\\\ 3\\\\\\\\ \\\\end{array} \\\\right]'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The solution of the above matrix system is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " a_0 = 4.5000,\\;\\; a_1= 1.9167,\\;\\; a_2 =  0.5000,\\;\\; a_3 = -0.9167",
                    expression:
                      "' a_0 = 4.5000,\\\\;\\\\; a_1= 1.9167,\\\\;\\\\; a_2 =  0.5000,\\\\;\\\\; a_3 = -0.9167'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Thus, the cubic interpolating polynomial is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "P_3(x) =  4.5 + 1.9167x + 0.5x^2 - 0.9167x^3",
                    expression:
                      "'P_3(x) =  4.5 + 1.9167x + 0.5x^2 - 0.9167x^3'",
                    arg: "display"
                  }
                ]
              })
            ],
            1
          ),
          _vm._v(" This approach is known as the "),
          _c("deep", [_vm._v("Vandemonde Interpolation approach")]),
          _vm._v(" and is summarised below as follows:"),
          _c("br"),
          _vm._v(
            " The Vandemonde Interpolation approach seeks to determine the interpolation polynomial "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "P_n(x) = a_0 + a_1 x + a_2 x^2 + \\ldots + a_n x^n",
                expression:
                  "'P_n(x) = a_0 + a_1 x + a_2 x^2 + \\\\ldots + a_n x^n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" for the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(n+1)",
                expression: "'(n+1)'"
              }
            ]
          }),
          _vm._v(" points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_i,y_i)",
                expression: "'(x_i,y_i)'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "i = 0,1,\\ldots,n",
                expression: "'i = 0,1,\\\\ldots,n'"
              }
            ]
          }),
          _vm._v(" by forming the equation "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  " y_i = a_0 + a_1 x_i + a_2 x_i^2 + \\ldots + a_n x_i^n,\\;\\; \\text{ for }\\;\\; i = 0,1,\\ldots,n",
                expression:
                  "' y_i = a_0 + a_1 x_i + a_2 x_i^2 + \\\\ldots + a_n x_i^n,\\\\;\\\\; \\\\text{ for }\\\\;\\\\; i = 0,1,\\\\ldots,n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" and solving for the unknown coefficients "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_0,a_1,\\ldots,a_n",
                expression: "'a_0,a_1,\\\\ldots,a_n'"
              }
            ]
          }),
          _vm._v(". The system can be written by using the matrices "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "XA = Y",
                expression: "'XA = Y'"
              }
            ]
          }),
          _vm._v(", where "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "X",
                expression: "'X'"
              }
            ]
          }),
          _vm._v(" is the Vandemonde matrix. "),
          _c("div", { staticClass: "my-3" }, [
            _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
              _vm._v("4.1.1 Linear Interpolation")
            ]),
            _vm._v(
              " The simplest form of interpolation is probably the straight line, connecting two points by a straight line. Let two data points ("
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0, y_0)",
                  expression: "'x_0, y_0)'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_1, y_1)",
                  expression: "'(x_1, y_1)'"
                }
              ]
            }),
            _vm._v(
              " be given. There is a unique straight line passing through these points. The equation for a straight line passing through ("
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0, y_0)",
                  expression: "'x_0, y_0)'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_1, y_1)",
                  expression: "'(x_1, y_1)'"
                }
              ]
            }),
            _vm._v(" is "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    " \\frac{y - y_0}{x - x_0} = \\frac{y_1 - y_0}{x_1 - x_0}",
                  expression:
                    "' \\\\frac{y - y_0}{x - x_0} = \\\\frac{y_1 - y_0}{x_1 - x_0}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" or "),
            _c("div", { staticClass: "container" }, [
              _c("div", { staticClass: "row" }, [
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          " y  =  y_0  + \\left(\\frac{y_1 - y_0}{x_1 - x_0}\\right)(x - x_0)  = P_1(x) ",
                        expression:
                          "' y  =  y_0  + \\\\left(\\\\frac{y_1 - y_0}{x_1 - x_0}\\\\right)(x - x_0)  = P_1(x) '",
                        arg: "display"
                      }
                    ]
                  })
                ]),
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "(4.3)",
                        expression: "'(4.3)'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _vm._v(" which can be rearranged to give "),
            _c("div", { staticClass: "container" }, [
              _c("div", { staticClass: "row" }, [
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          " P_1(x) =\\left( \\frac{x - x_1}{x_0 - x_1}\\right)y_0 + \\left(\\frac{x - x_0}{x_1 - x_0}\\right)y_1",
                        expression:
                          "' P_1(x) =\\\\left( \\\\frac{x - x_1}{x_0 - x_1}\\\\right)y_0 + \\\\left(\\\\frac{x - x_0}{x_1 - x_0}\\\\right)y_1'",
                        arg: "display"
                      }
                    ]
                  })
                ]),
                _c("div", { staticClass: "col" }, [
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value: "(4.4)",
                        expression: "'(4.4)'",
                        arg: "display"
                      }
                    ]
                  })
                ])
              ])
            ]),
            _vm._v(" Equations 4.3 and 4.4 are both linear in "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x",
                  expression: "'x'"
                }
              ]
            }),
            _vm._v(" (hence the term "),
            _c("i", [_vm._v("linear interpolation")]),
            _vm._v(") and can be written as "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "P_1(x) = a_0 + a_1x",
                  expression: "'P_1(x) = a_0 + a_1x'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" The requirement that the straight line passes through "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_0, y_0)",
                  expression: "'(x_0, y_0)'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "(x_1, y_1)",
                  expression: "'(x_1, y_1)'"
                }
              ]
            }),
            _vm._v(" yields the equations "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} P_1(x_0) & = & a_1x_0 + a_0 = y_0 \\\\ P_1(x_1) & = & a_1x_1 + a_0 = y_1 \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} P_1(x_0) \\& = \\& a_1x_0 + a_0 = y_0 \\\\\\\\ P_1(x_1) \\& = \\& a_1x_1 + a_0 = y_1 \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" which can be solved for the coefficients "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "a_0",
                  expression: "'a_0'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "a_1",
                  expression: "'a_1'"
                }
              ]
            }),
            _vm._v(" by solving the linear system "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\left(\\begin{array}{cc}1 & x_0\\\\1 &x_1\\end{array}\\right) \\left(\\begin{array}{c}a_0 \\\\ a_1\\end{array}\\right)  = \\left(\\begin{array}{c}y_0 \\\\ y_1\\end{array}\\right) ",
                  expression:
                    "'\\\\left(\\\\begin{array}{cc}1 \\& x_0\\\\\\\\1 \\&x_1\\\\end{array}\\\\right) \\\\left(\\\\begin{array}{c}a_0 \\\\\\\\ a_1\\\\end{array}\\\\right)  = \\\\left(\\\\begin{array}{c}y_0 \\\\\\\\ y_1\\\\end{array}\\\\right) '",
                  arg: "display"
                }
              ]
            }),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 4.2")
                ]),
                _vm._v(
                  " Find the polynomial of least degree that interpolates the data in the following table. "
                ),
                _c("div", { staticClass: "text-center" }, [
                  _c(
                    "div",
                    {
                      staticClass: "table-responsive table-stripped",
                      staticStyle: { width: "40%" }
                    },
                    [
                      _c("table", { staticClass: "table" }, [
                        _c("thead", [
                          _c("tr", [
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "x",
                                    expression: "'x'"
                                  }
                                ]
                              })
                            ]),
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1.4",
                                    expression: "'1.4'"
                                  }
                                ]
                              })
                            ]),
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1.25",
                                    expression: "'1.25'"
                                  }
                                ]
                              })
                            ])
                          ])
                        ]),
                        _c("tbody", [
                          _c("tr", [
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: " y",
                                    expression: "' y'"
                                  }
                                ]
                              })
                            ]),
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "3.7",
                                    expression: "'3.7'"
                                  }
                                ]
                              })
                            ]),
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "3.9",
                                    expression: "'3.9'"
                                  }
                                ]
                              })
                            ])
                          ])
                        ])
                      ])
                    ]
                  )
                ]),
                _c("deep", [_vm._v("Solution.")]),
                _vm._v(" We set "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_0 = 1.4",
                      expression: "'x_0 = 1.4'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "y_0 = 3.7",
                      expression: "'y_0 = 3.7'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x_1 = 1.25",
                      expression: "'x_1 = 1.25'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "y_1 = 3.9",
                      expression: "'y_1 = 3.9'"
                    }
                  ]
                }),
                _vm._v(
                  ". By the equation for linear interpolation, the polynomial that is sought is "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} P_1(x) & =  3.7 + \\left(\\frac{3.9 - 3.7}{1.25 - 1.4}\\right)(x - 1.4)\\\\ & =  3.7 - \\frac{4}{3}(x - 1.4) \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} P_1(x) \\& =  3.7 + \\\\left(\\\\frac{3.9 - 3.7}{1.25 - 1.4}\\\\right)(x - 1.4)\\\\\\\\ \\& =  3.7 - \\\\frac{4}{3}(x - 1.4) \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 4.3")
                ]),
                _vm._v(" The following table gives values for "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x) = \\tan x",
                      expression: "'f(x) = \\\\tan x'"
                    }
                  ]
                }),
                _vm._v(" for a few values of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x",
                      expression: "'x'"
                    }
                  ]
                }),
                _vm._v(". "),
                _c("div", { staticClass: "text-center" }, [
                  _c(
                    "div",
                    {
                      staticClass: "table-responsive table-stripped",
                      staticStyle: { width: "50%" }
                    },
                    [
                      _c("table", { staticClass: "table" }, [
                        _c("thead", [
                          _c("tr", [
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "x",
                                    expression: "'x'"
                                  }
                                ]
                              })
                            ]),
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1",
                                    expression: "'1'"
                                  }
                                ]
                              })
                            ]),
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1.1",
                                    expression: "'1.1'"
                                  }
                                ]
                              })
                            ]),
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1.2",
                                    expression: "'1.2'"
                                  }
                                ]
                              })
                            ]),
                            _c("th", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1.3",
                                    expression: "'1.3'"
                                  }
                                ]
                              })
                            ])
                          ])
                        ]),
                        _c("tbody", [
                          _c("tr", [
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "\\tan x",
                                    expression: "'\\\\tan x'"
                                  }
                                ]
                              })
                            ]),
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1.5574",
                                    expression: "'1.5574'"
                                  }
                                ]
                              })
                            ]),
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "1.9648 ",
                                    expression: "'1.9648 '"
                                  }
                                ]
                              })
                            ]),
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "2.5722",
                                    expression: "'2.5722'"
                                  }
                                ]
                              })
                            ]),
                            _c("td", [
                              _c("span", {
                                directives: [
                                  {
                                    name: "katex",
                                    rawName: "v-katex",
                                    value: "3.6021",
                                    expression: "'3.6021'"
                                  }
                                ]
                              })
                            ])
                          ])
                        ])
                      ])
                    ]
                  )
                ]),
                _vm._v(" Use linear interpolation to estimate "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\tan(1.15)",
                      expression: "'\\\\tan(1.15)'"
                    }
                  ]
                }),
                _vm._v("."),
                _c("br"),
                _c("deep", [_vm._v("Solution.")]),
                _vm._v(" Since 1.15 is between "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "1.1",
                      expression: "'1.1'"
                    }
                  ]
                }),
                _vm._v(" and 1.2 we set "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "x_0 = 1.1,~~~~~~ x_1 = 1.2,~~~~~~y_0 = 1.9648,~~~~~~y_1=2.5722",
                      expression:
                        "'x_0 = 1.1,~~~~~~ x_1 = 1.2,~~~~~~y_0 = 1.9648,~~~~~~y_1=2.5722'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "x = 1.15",
                      expression: "'x = 1.15'"
                    }
                  ]
                }),
                _vm._v(". Then "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} P_1(x) &= y_0  + \\left(\\frac{y_1 - y_0}{x_1 - x_0}\\right)(x - x_0)\\\\ \\tan 1.15 & \\approx  1.9648 + \\frac{2.5722 - 1.9648}{1.2 - 1.1}(1.15 - 1.1)\\\\  &= 2.2685 \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} P_1(x) \\&= y_0  + \\\\left(\\\\frac{y_1 - y_0}{x_1 - x_0}\\\\right)(x - x_0)\\\\\\\\ \\\\tan 1.15 \\& \\\\approx  1.9648 + \\\\frac{2.5722 - 1.9648}{1.2 - 1.1}(1.15 - 1.1)\\\\\\\\  \\&= 2.2685 \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" The true value is "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\tan 1.15 = 2.2345",
                      expression: "'\\\\tan 1.15 = 2.2345'"
                    }
                  ]
                }),
                _vm._v(" so our interpolation has a percentage error of "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "1.152\\%",
                      expression: "'1.152\\\\%'"
                    }
                  ]
                })
              ],
              1
            )
          ])
        ],
        1
      ),
      _c(
        "div",
        { staticClass: " my-4 p-3 " },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 4.2 The Lagrange Interpolation ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(
            " Once we know that the interpolating polynomial exists and is unique, the problem then becomes how to construct an interpolating polynomial; that is, how to construct a polynomial "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(" of degree at most "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(", such that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "P_n(x_i) = f_i,~~~~~~~~~~~~i = 0,1,\\ldots,n",
                expression: "'P_n(x_i) = f_i,~~~~~~~~~~~~i = 0,1,\\\\ldots,n'",
                arg: "display"
              }
            ]
          }),
          _vm._v(
            " It is natural to obtain the polynomial by solving the linear system (4.4) in the previous section. Unfortunately,the matrix of this linear system, known as the "
          ),
          _c("deep", [_vm._v("Vandermonde Matrix")]),
          _vm._v(", is usually highly "),
          _c("i", [_vm._v("ill-conditioned")]),
          _vm._v(
            ", and the solution of such an ill-conditioned system, even by the use of a stable method, may not be accurate. There are, however, several other ways to construct such a polynomial, that do not require solution of a Vandermonde system. We describe one such in the following:"
          ),
          _c("br"),
          _vm._v(" Suppose "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n = 1",
                expression: "'n = 1'"
              }
            ]
          }),
          _vm._v(", that is, suppose that we have only two points "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_0, f_0)$, $(x_1, f_1)",
                expression: "'(x_0, f_0)$, $(x_1, f_1)'"
              }
            ]
          }),
          _vm._v(", then it is easy to see that the linear polynomial "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "P_1(x) = \\frac{x - x_1}{x_0 - x_1}f_0 + \\frac{x - x_0}{x_1 - x_0}f_1",
                expression:
                  "'P_1(x) = \\\\frac{x - x_1}{x_0 - x_1}f_0 + \\\\frac{x - x_0}{x_1 - x_0}f_1'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" is an interpolating polynomial, because "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "P_1(x_0) = f_0~,~~~~P_1(x_1) = f_1",
                expression: "'P_1(x_0) = f_0~,~~~~P_1(x_1) = f_1'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" For convenience, we shall write the polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_1(x)",
                expression: "'P_1(x)'"
              }
            ]
          }),
          _vm._v(" in the form "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "P_1(x) = L_0(x)f_0 + L_1(x)f_1",
                expression: "'P_1(x) = L_0(x)f_0 + L_1(x)f_1'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" where "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "L_0(x) = \\frac{x - x_1}{x_0 - x_1}~~~\\text{and }~~~L_1(x)=\\frac{x - x_0}{x_1 - x_0}",
                expression:
                  "'L_0(x) = \\\\frac{x - x_1}{x_0 - x_1}~~~\\\\text{and }~~~L_1(x)=\\\\frac{x - x_0}{x_1 - x_0}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Note that both the polynomials "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "L_0(x)",
                expression: "'L_0(x)'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "L_1(x)",
                expression: "'L_1(x)'"
              }
            ]
          }),
          _vm._v(" are polynomials of degree 1. So, "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_1",
                expression: "'P_1'"
              }
            ]
          }),
          _vm._v(" is the unique linear function that passes through "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_0,f_0)",
                expression: "'(x_0,f_0)'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_1,f_1)",
                expression: "'(x_1,f_1)'"
              }
            ]
          }),
          _vm._v(" (See the Fig. below) "),
          _c(
            "div",
            {
              staticClass: "my-3 red-text text-center p-4",
              staticStyle: { border: "2px solid blue" }
            },
            [_vm._v(" Space for figure ")]
          ),
          _vm._v(
            " The concept can be generalized easily for polynomials of higher degrees. To generate polynomials of higher degrees, let's define the set of polynomials "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\{L_k(x)\\}",
                expression: "'\\\\{L_k(x)\\\\}'"
              }
            ]
          }),
          _vm._v(" recursively, as follows: "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "L_k(x) = \\frac{(x-x_0)(x-x_1)\\cdots(x-x_{k-1})(x-x_{k+1})\\cdots(x-x_n)}{(x_k-x_0)(x_k-x_1)\\cdots(x_k-x_{k-1})(x_k-x_{k+1})\\cdots(x_k-x_n)}~,~~~k=0,1,2,\\ldots,n",
                            expression:
                              "'L_k(x) = \\\\frac{(x-x_0)(x-x_1)\\\\cdots(x-x_{k-1})(x-x_{k+1})\\\\cdots(x-x_n)}{(x_k-x_0)(x_k-x_1)\\\\cdots(x_k-x_{k-1})(x_k-x_{k+1})\\\\cdots(x_k-x_n)}~,~~~k=0,1,2,\\\\ldots,n'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.5)",
                            expression: "'(4.5)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" The interpolating polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(" is defined as follows "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "P_n(x) = L_0(x)f_0 + L_1(x)f_1 + \\ldots + L_n(x)f_n = \\sum_{k=0}^n  L_k(x)f(x_k)",
                            expression:
                              "'P_n(x) = L_0(x)f_0 + L_1(x)f_1 + \\\\ldots + L_n(x)f_n = \\\\sum_{k=0}^n  L_k(x)f(x_k)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.6)",
                            expression: "'(4.6)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" To see that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(
            " defined in equation (4.6) is an interpolating polynomial we note that "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} L_0(x) &=& \\frac{(x-x_1)(x - x_2)\\cdots(x - x_n)}{(x_0-x_1)(x_0 - x_2)\\cdots(x_0 - x_n)}\\\\  L_1(x)&=& \\frac{(x-x_0)(x - x_2)\\cdots(x - x_n)}{(x_1-x_0)(x_1 - x_2)\\cdots(x_1 - x_n)}\\\\ \\vdots &&~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\vdots \\\\ L_n(x) &=& \\frac{(x-x_0)(x - x_1)\\cdots(x - x_{n-1})}{(x_n-x_0)(x_n - x_1)\\cdots(x_n - x_{n-1})} \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} L_0(x) \\&=\\& \\\\frac{(x-x_1)(x - x_2)\\\\cdots(x - x_n)}{(x_0-x_1)(x_0 - x_2)\\\\cdots(x_0 - x_n)}\\\\\\\\  L_1(x)\\&=\\& \\\\frac{(x-x_0)(x - x_2)\\\\cdots(x - x_n)}{(x_1-x_0)(x_1 - x_2)\\\\cdots(x_1 - x_n)}\\\\\\\\ \\\\vdots \\&\\&~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\\vdots \\\\\\\\ L_n(x) \\&=\\& \\\\frac{(x-x_0)(x - x_1)\\\\cdots(x - x_{n-1})}{(x_n-x_0)(x_n - x_1)\\\\cdots(x_n - x_{n-1})} \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Also, note that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} L_0(x_0)&=&1,~L_0(x_1) = L_0(x_2) = \\cdots = L_0(x_n) = 0\\\\L_1(x_1)&=&1,~L_1(x_0) = L_1(x_2) = \\cdots = L_1(x_n) = 0\\\\ \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} L_0(x_0)\\&=\\&1,~L_0(x_1) = L_0(x_2) = \\\\cdots = L_0(x_n) = 0\\\\\\\\L_1(x_1)\\&=\\&1,~L_1(x_0) = L_1(x_2) = \\\\cdots = L_1(x_n) = 0\\\\\\\\ \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" In general, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "L_k(x_k) = 1~~~~~~~\\text{and }~~~~~L_k(x_i) = 0~,~~~ i \\neq k. ",
                expression:
                  "'L_k(x_k) = 1~~~~~~~\\\\text{and }~~~~~L_k(x_i) = 0~,~~~ i \\\\neq k. '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "L_k",
                expression: "'L_k'"
              }
            ]
          }),
          _vm._v(" are know as "),
          _c("deep", [_vm._v("cardinal polynomials")]),
          _vm._v(" and have the property "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "L_i(x_j) = \\left\\{\\begin{array}{cc}0 & \\text{if } i \\neq j \\\\1 & \\text{if } i = j \\end{array} \\right.",
                expression:
                  "'L_i(x_j) = \\\\left\\\\{\\\\begin{array}{cc}0 \\& \\\\text{if } i \\\\neq j \\\\\\\\1 & \\\\text{if } i = j \\\\end{array} \\\\right.'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Thus "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned}P_n(x_0) &=& L_0(x_0)f_0 + L_1(x_0)f_1 + \\cdots + L_n(x_0)f_n = f_0 + 0 + \\ldots + 0 = f_0\\\\ P_n(x_1) &=& L_0(x_1)f_0 + L_1(x_1)f_1 + \\cdots + L_n(x_1)f_n =  0  + f_1 \\ldots + 0 = f_1 \\\\ \\vdots   & & \\\\  P_n(x_n) &=& L_0(x_n)f_0 + L_1(x_n)f_1 + \\cdots + L_n(x_n)f_n =  0  + 0 \\ldots + f_n = f_n \\\\ \\end{aligned}",
                expression:
                  "'\\\\begin{aligned}P_n(x_0) \\&=\\& L_0(x_0)f_0 + L_1(x_0)f_1 + \\\\cdots + L_n(x_0)f_n = f_0 + 0 + \\\\ldots + 0 = f_0\\\\\\\\ P_n(x_1) \\&=\\& L_0(x_1)f_0 + L_1(x_1)f_1 + \\\\cdots + L_n(x_1)f_n =  0  + f_1 \\\\ldots + 0 = f_1 \\\\\\\\ \\\\vdots   \\& \\& \\\\\\\\  P_n(x_n) \\&=\\& L_0(x_n)f_0 + L_1(x_n)f_1 + \\\\cdots + L_n(x_n)f_n =  0  + 0 \\\\ldots + f_n = f_n \\\\\\\\ \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" That is, the polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(" has the property that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x_k) = f_k",
                expression: "'P_n(x_k) = f_k'"
              }
            ]
          }),
          _vm._v(" for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k = 0,1,\\ldots,n",
                expression: "'k = 0,1,\\\\ldots,n'"
              }
            ]
          }),
          _vm._v(" The polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(" defined by equation (4.6) is known as the "),
          _c("deep", [_vm._v("Lagrange Interpolating Polynomial ")]),
          _vm._v(
            ". An example of a Lagrange interpolating polynomial passing through "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n + 1",
                expression: "'n + 1'"
              }
            ]
          }),
          _vm._v(" points in shown in the Fig. below; "),
          _c(
            "div",
            {
              staticClass: "my-3 red-text text-center p-4",
              staticStyle: { border: "2px solid blue" }
            },
            [_vm._v(" Space for figure with caption ")]
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 4.4")
              ]),
              _vm._v(
                " Use the Lagrange Interpolation polynomial to interpolate "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" from the following table: "),
              _c(
                "div",
                {
                  staticClass: "table-responsive table-stripped",
                  staticStyle: { width: "50%" }
                },
                [
                  _c("table", { staticClass: "table" }, [
                    _c("thead", [
                      _c("tr", [
                        _c("th", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "x",
                                expression: "'x'"
                              }
                            ]
                          })
                        ]),
                        _c("th", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "0",
                                expression: "'0'"
                              }
                            ]
                          })
                        ]),
                        _c("th", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "1",
                                expression: "'1'"
                              }
                            ]
                          })
                        ]),
                        _c("th", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "2",
                                expression: "'2'"
                              }
                            ]
                          })
                        ]),
                        _c("th", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "4",
                                expression: "'4'"
                              }
                            ]
                          })
                        ])
                      ])
                    ]),
                    _c("tbody", [
                      _c("tr", [
                        _c("td", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: " f(x)",
                                expression: "' f(x)'"
                              }
                            ]
                          })
                        ]),
                        _c("td", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "7",
                                expression: "'7'"
                              }
                            ]
                          })
                        ]),
                        _c("td", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "13 ",
                                expression: "'13 '"
                              }
                            ]
                          })
                        ]),
                        _c("td", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "21",
                                expression: "'21'"
                              }
                            ]
                          })
                        ]),
                        _c("td", [
                          _c("span", {
                            directives: [
                              {
                                name: "katex",
                                rawName: "v-katex",
                                value: "43",
                                expression: "'43'"
                              }
                            ]
                          })
                        ])
                      ])
                    ])
                  ])
                ]
              ),
              _vm._v(" and find an approximation to "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(3)",
                    expression: "'f(3)'"
                  }
                ]
              }),
              _vm._v(" "),
              _c("br"),
              _c("deep", [_vm._v("Solution")]),
              _vm._v(". We note that "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n = 3",
                    expression: "'n = 3'"
                  }
                ]
              }),
              _vm._v(
                ", hence we look for an interpolating polynomial of the form "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "P_3(x) = L_0(x)f_0 + L_1(x)f_1 + L_2(x)f_2 + L_3(x)f_3",
                    expression:
                      "'P_3(x) = L_0(x)f_0 + L_1(x)f_1 + L_2(x)f_2 + L_3(x)f_3'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" where "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} L_0(x) &=& \\frac{(x-x_1)(x-x_2)(x-x_3)}{(x_0-x_1)(x_0-x_2)(x_0-x_3)} =\\frac{(x-1)(x-2)(x-4)}{(-1)(-2)(-4)}\\\\ L_1(x) &=& \\frac{(x-x_0)(x-x_2)(x-x_3)}{(x_1-x_0)(x_1-x_2)(x_1-x_3)} =\\frac{(x-0)(x-2)(x-4)}{(1)(-1)(-3)}\\\\ L_2(x) &=& \\frac{(x-x_0)(x-x_1)(x-x_3)}{(x_2-x_0)(x_2-x_1)(x_2-x_3)} =\\frac{(x-0)(x-1)(x-4)}{(2)(1)(-2)}\\\\ L_3(x) &=& \\frac{(x-x_0)(x-x_1)(x-x_2)}{(x_3-x_0)(x_3-x_1)(x_3-x_2)} =\\frac{(x-0)(x-1)(x-2)}{(4)(3)(2)}\\\\ \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} L_0(x) \\&=\\& \\\\frac{(x-x_1)(x-x_2)(x-x_3)}{(x_0-x_1)(x_0-x_2)(x_0-x_3)} =\\\\frac{(x-1)(x-2)(x-4)}{(-1)(-2)(-4)}\\\\\\\\ L_1(x) \\&=\\& \\\\frac{(x-x_0)(x-x_2)(x-x_3)}{(x_1-x_0)(x_1-x_2)(x_1-x_3)} =\\\\frac{(x-0)(x-2)(x-4)}{(1)(-1)(-3)}\\\\\\\\ L_2(x) \\&=\\& \\\\frac{(x-x_0)(x-x_1)(x-x_3)}{(x_2-x_0)(x_2-x_1)(x_2-x_3)} =\\\\frac{(x-0)(x-1)(x-4)}{(2)(1)(-2)}\\\\\\\\ L_3(x) \\&=\\& \\\\frac{(x-x_0)(x-x_1)(x-x_2)}{(x_3-x_0)(x_3-x_1)(x_3-x_2)} =\\\\frac{(x-0)(x-1)(x-2)}{(4)(3)(2)}\\\\\\\\ \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Thus "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} f(x) &\\approx& P_3(x) = 7L_0(x)+ 13L_1(x) + 21L_2(x) + 43L_3(x)\\\\ f(3) &\\approx& P_3(3) = 7L_0(3)+ 13L_1(3) + 21L_2(3) + 43L_3(3) \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} f(x) \\&\\\\approx\\& P_3(x) = 7L_0(x)+ 13L_1(x) + 21L_2(x) + 43L_3(x)\\\\\\\\ f(3) \\&\\\\approx\\& P_3(3) = 7L_0(3)+ 13L_1(3) + 21L_2(3) + 43L_3(3) \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Now "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "\\displaystyle L_0(3) = \\frac{1}{4}, L_1(3) = -1,~L_2(3) = \\frac{3}{2},~L_3(3) = \\frac{1}{4}",
                    expression:
                      "'\\\\displaystyle L_0(3) = \\\\frac{1}{4}, L_1(3) = -1,~L_2(3) = \\\\frac{3}{2},~L_3(3) = \\\\frac{1}{4}'"
                  }
                ]
              }),
              _vm._v(". So "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "f(3) \\approx  P_3(3) = 7\\left(\\frac{1}{4}\\right)+ 13(-1) + 21\\left(\\frac{3}{2}\\right) + 43\\left(\\frac{1}{4}\\right) = 31",
                    expression:
                      "'f(3) \\\\approx  P_3(3) = 7\\\\left(\\\\frac{1}{4}\\\\right)+ 13(-1) + 21\\\\left(\\\\frac{3}{2}\\\\right) + 43\\\\left(\\\\frac{1}{4}\\\\right) = 31'",
                    arg: "display"
                  }
                ]
              })
            ],
            1
          )
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "mb-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [
              _vm._v(
                " 4.3 Divided Differences and the Newton-Interpolation Formula "
              )
            ]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _vm._v(
            " A major difficulty with the Lagrange Interpolation is that one is not sure about the degree of interpolating polynomial needed to achieve a certain accuracy. Thus, if the accuracy is not good enough with polynomial of a certain degree, one needs to increase the degree of polynomial, and computations need to be started all over again."
          ),
          _c("br"),
          _vm._v(
            " Furthermore, computing various Lagrangian polynomials is an expensive procedure. It is, indeed, desirable to have a formula which makes use of "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_{k-1}(x)",
                expression: "'P_{k-1}(x)'"
              }
            ]
          }),
          _vm._v(" in computing "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_k(x)",
                expression: "'P_k(x)'"
              }
            ]
          }),
          _vm._v("."),
          _c("br"),
          _vm._v(" The following form of interpolation, known as "),
          _c("deep", [_vm._v("Newton's interpolation")]),
          _vm._v(
            " allows us to do so. The idea is to obtain the interpolating polynomial "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n(x)",
                expression: "'P_n(x)'"
              }
            ]
          }),
          _vm._v(" in the following form: "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "P_n(x) = a_0 + a_1(x - x_0) + a_2(x - x_0)(x - x_1) + \\cdots + a_n(x - x_0)(x - x_1)\\cdots(x - x_{n-1}) ",
                            expression:
                              "'P_n(x) = a_0 + a_1(x - x_0) + a_2(x - x_0)(x - x_1) + \\\\cdots + a_n(x - x_0)(x - x_1)\\\\cdots(x - x_{n-1}) '",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.7)",
                            expression: "'(4.7)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(
            " The Newton interpolating polynomial can be written succinctly as "
          ),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              " P_n(x) = \\sum_{i=0}^{n}a_i \\prod_{j=0}^{i-1}(x-x_i)",
                            expression:
                              "' P_n(x) = \\\\sum_{i=0}^{n}a_i \\\\prod_{j=0}^{i-1}(x-x_i)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.8)",
                            expression: "'(4.8)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(
            " Consider, as an example, the problem of interpolating the four points "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_0,y_0)",
                expression: "'(x_0,y_0)'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_1,y_1)",
                expression: "'(x_1,y_1)'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_2,y_2)",
                expression: "'(x_2,y_2)'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x_3,y_3)",
                expression: "'(x_3,y_3)'"
              }
            ]
          }),
          _vm._v(" with a cubic polynomial "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_3(x)",
                expression: "'P_3(x)'"
              }
            ]
          }),
          _vm._v("."),
          _c("br"),
          _vm._v(
            " However, instead of expressing the interpolant in terms of the canonical basis "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\{1, x, x^2, x^3\\}",
                expression: "'\\\\{1, x, x^2, x^3\\\\}'"
              }
            ]
          }),
          _vm._v(" (as in the Vandemonde approach), we use the basis "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\{1, (x - x_0), (x-x_0)(x-x_1), (x-x_0)(x-x_1)(x-x_2)\\}",
                expression:
                  "'\\\\{1, (x - x_0), (x-x_0)(x-x_1), (x-x_0)(x-x_1)(x-x_2)\\\\}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" and look for the coefficients "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_0, a_1, a_2, a_3",
                expression: "'a_0, a_1, a_2, a_3'"
              }
            ]
          }),
          _vm._v(" so that if "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "P_3(x) = a_0 + a_1(x - x_0) + a_2(x-x_0)(x-x_1) + a_3(x-x_0)(x-x_1)(x-x_2)",
                            expression:
                              "'P_3(x) = a_0 + a_1(x - x_0) + a_2(x-x_0)(x-x_1) + a_3(x-x_0)(x-x_1)(x-x_2)'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.9)",
                            expression: "'(4.9)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" then "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_3(x_i) = y_i",
                expression: "'P_3(x_i) = y_i'"
              }
            ]
          }),
          _vm._v(" for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "i = 0,1,2,3",
                expression: "'i = 0,1,2,3'"
              }
            ]
          }),
          _vm._v(
            ". This expression is called the Newton representation of the interpolating polynomial. In expanded form, equation (4.9) can be written as "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} y_0 & = a_0 \\\\ y_1 & = a_0 + a_1(x_1 - x_0)\\\\ y_2 & = a_0 + a_1(x_2 - x_0) + a_2(x_2-x_0)(x_2-x_1)\\\\ y_3 & = a_0 + a_1(x_3 - x_0) + a_2(x_3-x_0)(x_3-x_1) + a_3(x_3-x_0)(x_3-x_1)(x_3-x_2) \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} y_0 \\& = a_0 \\\\\\\\ y_1 \\& = a_0 + a_1(x_1 - x_0)\\\\\\\\ y_2 \\& = a_0 + a_1(x_2 - x_0) + a_2(x_2-x_0)(x_2-x_1)\\\\\\\\ y_3 \\& = a_0 + a_1(x_3 - x_0) + a_2(x_3-x_0)(x_3-x_1) + a_3(x_3-x_0)(x_3-x_1)(x_3-x_2) \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(
            " and can be expressed these equations in matrix-vector form as "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\left[\\begin{array}{rrrr} 1 & 0 & 0 & 0 \\\\ 1 & x_1 - x_0 & 0 & 0 \\\\ 1 & x_2 - x_0 &(x_2-x_0)(x_2-x_1) & 0 \\\\ 1 & x_3 - x_0 &(x_3-x_0)(x_3-x_1) & (x_3-x_0)(x_3-x_1)(x_3-x_2)  \\end{array} \\right] \\left[ \\begin{array}{c} a_0\\\\ a_1\\\\ a_2\\\\ a_3 \\end{array} \\right] =  \\left[ \\begin{array}{c} y_0 \\\\ y_1 \\\\ y_2\\\\ y_3 \\end{array} \\right]",
                expression:
                  "'\\\\left[\\\\begin{array}{rrrr} 1 \\& 0 \\& 0 \\& 0 \\\\\\\\ 1 \\& x_1 - x_0 \\& 0 \\& 0 \\\\\\\\ 1 \\& x_2 - x_0 \\&(x_2-x_0)(x_2-x_1) \\& 0 \\\\\\\\ 1 \\& x_3 - x_0 \\&(x_3-x_0)(x_3-x_1) \\& (x_3-x_0)(x_3-x_1)(x_3-x_2)  \\\\end{array} \\\\right] \\\\left[ \\\\begin{array}{c} a_0\\\\\\\\ a_1\\\\\\\\ a_2\\\\\\\\ a_3 \\\\end{array} \\\\right] =  \\\\left[ \\\\begin{array}{c} y_0 \\\\\\\\ y_1 \\\\\\\\ y_2\\\\\\\\ y_3 \\\\end{array} \\\\right]'",
                arg: "display"
              }
            ]
          }),
          _vm._v(
            " This linear system can be reduced to 3-by-3 system and solved by Gaussian Elimination"
          ),
          _c("br"),
          _vm._v(" A crucial observation about "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n",
                expression: "'P_n'"
              }
            ]
          }),
          _vm._v(" is that the coefficients "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_0, a_1, \\ldots ",
                expression: "'a_0, a_1, \\\\ldots '"
              }
            ]
          }),
          _vm._v(" do not depend on "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(". In other words, "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n",
                expression: "'P_n'"
              }
            ]
          }),
          _vm._v(" is obtained from "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_{n-1}",
                expression: "'P_{n-1}'"
              }
            ]
          }),
          _vm._v(
            " by adding one more term, without altering the coefficients already present in "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_{n-1}",
                expression: "'P_{n-1}'"
              }
            ]
          }),
          _vm._v(" itself. This is because we began with the hope that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_n",
                expression: "'P_n'"
              }
            ]
          }),
          _vm._v(" could be expressed in the form "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "P_n(x) = P_{n-1}(x) + a_n(x - x_0)(x - x_1)\\cdots(x - x_{n-1}) ",
                            expression:
                              "'P_n(x) = P_{n-1}(x) + a_n(x - x_0)(x - x_1)\\\\cdots(x - x_{n-1}) '",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.10)",
                            expression: "'(4.10)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(
            " A way of systematically determining the unknown coefficients "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_0, a_1, \\ldots, a_n",
                expression: "'a_0, a_1, \\\\ldots, a_n'"
              }
            ]
          }),
          _vm._v(" is to set "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x",
                expression: "'x'"
              }
            ]
          }),
          _vm._v(" equal in turn to "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0, x_1, \\ldots, x_n",
                expression: "'x_0, x_1, \\\\ldots, x_n'"
              }
            ]
          }),
          _vm._v(
            " in equation (4.7) and write down the resulting equations as follows: "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned}\\text{For } x = x_0,~~~P_n(x_0) &= a_0 = f(x_0)\\\\ \\text{For } x = x_1,~~~P_n(x_1)&= a_0  + a_1(x_1 - x_0) = f(x_1)\\\\ \\text{For  } x = x_2,~~~P_n(x_2)&= a_0  + a_1(x_2 - x_0) + a_2(x_2 - x_0)(x_2-x_1) = f(x_2)\\\\ \\text{etc.}&& \\end{aligned}",
                expression:
                  "'\\\\begin{aligned}\\\\text{For } x = x_0,~~~P_n(x_0) \\&= a_0 = f(x_0)\\\\\\\\ \\\\text{For } x = x_1,~~~P_n(x_1)\\&= a_0  + a_1(x_1 - x_0) = f(x_1)\\\\\\\\ \\\\text{For  } x = x_2,~~~P_n(x_2)\\&= a_0  + a_1(x_2 - x_0) + a_2(x_2 - x_0)(x_2-x_1) = f(x_2)\\\\\\\\ \\\\text{etc.}\\&\\& \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" which gives "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} a_0 &= f(x_0)\\\\ a_1&= \\frac{f(x_1)-a_0}{x_1 - x_0} = \\frac{f(x_1)-f(x_0)}{x_1 - x_0}\\\\ a_2&= \\frac{ f(x_2) - a_0 - a_1(x_2 - x_0)}{(x_2 - x_0)(x_2 - x_1)} = \\frac{\\displaystyle \\frac{f(x_2)-f(x_1)}{x_2 - x_1} - \\frac{f(x_1)-f(x_0)}{x_1 - x_0}}{x_2 - x_0}\\end{aligned}",
                expression:
                  "'\\\\begin{aligned} a_0 \\&= f(x_0)\\\\\\\\ a_1\\&= \\\\frac{f(x_1)-a_0}{x_1 - x_0} = \\\\frac{f(x_1)-f(x_0)}{x_1 - x_0}\\\\\\\\ a_2\\&= \\\\frac{ f(x_2) - a_0 - a_1(x_2 - x_0)}{(x_2 - x_0)(x_2 - x_1)} = \\\\frac{\\\\displaystyle \\\\frac{f(x_2)-f(x_1)}{x_2 - x_1} - \\\\frac{f(x_1)-f(x_0)}{x_1 - x_0}}{x_2 - x_0}\\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The other numbers "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_i",
                expression: "'a_i'"
              }
            ]
          }),
          _vm._v(" for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "i = 3,4, \\ldots",
                expression: "'i = 3,4, \\\\ldots'"
              }
            ]
          }),
          _vm._v(" can similarly be obtained. We see that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_0",
                expression: "'a_0'"
              }
            ]
          }),
          _vm._v(" depends of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x_0)",
                expression: "'f(x_0)'"
              }
            ]
          }),
          _vm._v(", and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_1",
                expression: "'a_1'"
              }
            ]
          }),
          _vm._v(" depends on "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x_0)",
                expression: "'f(x_0)'"
              }
            ]
          }),
          _vm._v(", and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x_1)",
                expression: "'f(x_1)'"
              }
            ]
          }),
          _vm._v(", and so on. In general, "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_k",
                expression: "'a_k'"
              }
            ]
          }),
          _vm._v(" depends on "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x_0), f(x_1),\\ldots,f(x_k)",
                expression: "'f(x_0), f(x_1),\\\\ldots,f(x_k)'"
              }
            ]
          }),
          _vm._v(". In other words "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_k",
                expression: "'a_k'"
              }
            ]
          }),
          _vm._v(" depends on the values of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f",
                expression: "'f'"
              }
            ]
          }),
          _vm._v(" at the nodes "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0, x_1,\\ldots,x_k",
                expression: "'x_0, x_1,\\\\ldots,x_k'"
              }
            ]
          }),
          _vm._v(". The tradional notation used for the coefficients "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "a_k",
                expression: "'a_k'"
              }
            ]
          }),
          _vm._v(" is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "a_k = f[x_0,x_1,\\ldots,x_k]",
                expression: "'a_k = f[x_0,x_1,\\\\ldots,x_k]'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The quantity "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f[x_0,x_1,\\ldots,x_k]",
                expression: "'f[x_0,x_1,\\\\ldots,x_k]'"
              }
            ]
          }),
          _vm._v(" is called the "),
          _c("deep", [_vm._v("divided difference of order")]),
          _vm._v(" "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k",
                expression: "'k'"
              }
            ]
          }),
          _vm._v(" for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f",
                expression: "'f'"
              }
            ]
          }),
          _vm._v(". The divided differences for a function "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x)",
                expression: "'f(x)'"
              }
            ]
          }),
          _vm._v(" are defined as follows:"),
          _c("br"),
          _vm._v(" The first divided difference relative to "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_i",
                expression: "'x_i'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_{i+1}",
                expression: "'x_{i+1}'"
              }
            ]
          }),
          _vm._v(" is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "f[x_i,x_{i+1}] = \\frac{f[x_{i+1}] - f[x_i]}{x_{i+1} - x_i}",
                expression:
                  "'f[x_i,x_{i+1}] = \\\\frac{f[x_{i+1}] - f[x_i]}{x_{i+1} - x_i}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The second divided difference is given by "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "f[x_i,x_{i+1},x_{i+2}] = \\frac{f[x_{i+1},x_{i+2}] - f[x_i,x_{i+1}]}{x_{i+2} - x_i} ",
                expression:
                  "'f[x_i,x_{i+1},x_{i+2}] = \\\\frac{f[x_{i+1},x_{i+2}] - f[x_i,x_{i+1}]}{x_{i+2} - x_i} '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" After the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(k-1)",
                expression: "'(k-1)'"
              }
            ]
          }),
          _vm._v("st divided differences, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "f[x_i,x_{i+1},x_{i+2},\\ldots,x_{i+k-1}]~~~\\text{and }~~~f[x_{i+1},x_{i+2},\\ldots,x_{i+k-1},x_{i+k}]",
                expression:
                  "'f[x_i,x_{i+1},x_{i+2},\\\\ldots,x_{i+k-1}]~~~\\\\text{and }~~~f[x_{i+1},x_{i+2},\\\\ldots,x_{i+k-1},x_{i+k}]'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" have been determined, the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "k",
                expression: "'k'"
              }
            ]
          }),
          _vm._v("th divided difference is defined by "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "f[x_i,x_{i+1},x_{i+2},\\ldots,x_{i+k-1},x_{i+k}] = \\frac{f[x_{i+1},x_{i+2},\\ldots,x_{i+k-1},x_{i+k}] - f[x_i,x_{i+1},x_{i+2},\\ldots,x_{i+k-1}]}{x_{i+k} - x_i}",
                expression:
                  "'f[x_i,x_{i+1},x_{i+2},\\\\ldots,x_{i+k-1},x_{i+k}] = \\\\frac{f[x_{i+1},x_{i+2},\\\\ldots,x_{i+k-1},x_{i+k}] - f[x_i,x_{i+1},x_{i+2},\\\\ldots,x_{i+k-1}]}{x_{i+k} - x_i}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The process ends with the single "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v("th divided difference "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "f[x_0,x_1,\\ldots,x_n] = \\frac{f[x_1,x_2,ldots,x_n] - f[x_0,x_1,\\ldots,x_{n-1}]}{x_n - x_0}",
                            expression:
                              "'f[x_0,x_1,\\\\ldots,x_n] = \\\\frac{f[x_1,x_2,\\ldots,x_n] - f[x_0,x_1,\\\\ldots,x_{n-1}]}{x_n - x_0}'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.11)",
                            expression: "'(4.11)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" With this notation, it can be shown that the "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v("th Lagrange interpolation polynomial (4.7) for "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f",
                expression: "'f'"
              }
            ]
          }),
          _vm._v(" with respect to "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x_0,x_1,\\ldots,x_n",
                expression: "'x_0,x_1,\\\\ldots,x_n'"
              }
            ]
          }),
          _vm._v(" can be expressed as "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "\\begin{aligned} P_n(x) &= f[x_0] + f[x_0,x_1](x - x_0) +f[x_0,x_1,x_2](x-x_0)(x-x_1)\\\\  &  + \\ldots + f[x_0,x_1,\\ldots,x_n](x-x_0)(x-x_1)\\cdots(x-x_{n-1}) \\end{aligned}",
                            expression:
                              "'\\\\begin{aligned} P_n(x) \\&= f[x_0] + f[x_0,x_1](x - x_0) +f[x_0,x_1,x_2](x-x_0)(x-x_1)\\\\\\\\  \\&  + \\\\ldots + f[x_0,x_1,\\\\ldots,x_n](x-x_0)(x-x_1)\\\\cdots(x-x_{n-1}) \\\\end{aligned}'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.12)",
                            expression: "'(4.12)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _vm._v(" Equation (4.12) is called the "),
          _c("deep", [_vm._v("Newton's divided difference formula")]),
          _vm._v(" and can be written in compressed form as "),
          _c(
            "div",
            {
              staticClass: "table-responsive table-stripped",
              staticStyle: { width: "100%" }
            },
            [
              _c("table", { staticClass: "table" }, [
                _c("thead", [
                  _c("tr", [
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value:
                              "P_n(x) = f[x_0] + \\sum_{k=1}^{n}f[x_0,x_1,\\ldots,x_k](x-x_0)(x-x_1)\\cdots(x-x_{k-1})",
                            expression:
                              "'P_n(x) = f[x_0] + \\\\sum_{k=1}^{n}f[x_0,x_1,\\\\ldots,x_k](x-x_0)(x-x_1)\\\\cdots(x-x_{k-1})'",
                            arg: "display"
                          }
                        ]
                      })
                    ]),
                    _c("th", [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex:display",
                            value: "(4.13)",
                            expression: "'(4.13)'",
                            arg: "display"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ]
          ),
          _c("deep", [_vm._v("Note.")]),
          _c("ol", [
            _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
              _vm._v(
                " Note that each divided difference can be obtained from two previous ones of lower orders. For example, "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f[x_0, x_1, x_2]",
                    expression: "'f[x_0, x_1, x_2]'"
                  }
                ]
              }),
              _vm._v(" can be computed from "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f[x_0, x_1]",
                    expression: "'f[x_0, x_1]'"
                  }
                ]
              }),
              _vm._v(", and "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f[x_1, x_2]",
                    expression: "'f[x_1, x_2]'"
                  }
                ]
              }),
              _vm._v(
                ", and so on. Indeed, they can be arranged in form of a table as shown below for "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n = 5",
                    expression: "'n = 5'"
                  }
                ]
              }),
              _vm._v(": "),
              _c(
                "div",
                {
                  staticClass: "my-3 red-text text-center p-4",
                  staticStyle: { border: "2px solid blue" }
                },
                [_vm._v(" Space for figure ")]
              ),
              _vm._v(" For "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n = 3",
                    expression: "'n = 3'"
                  }
                ]
              }),
              _vm._v(" we get the following diagram. "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{array}{c|c|c|c|c} x & f[~~] &f[~~,~~]&f[~~,~~,~~]&f[~~,~~,~~,~~]\\\\ \\hline x_0&f[x_0]&&& \\\\  &  & f[x_0,x_1]&& \\\\ x_1 &f[x_1]& & f[x_0,x_1,x_2]\\\\ & & f[x_1,x_2]& & f[x_0,x_1,x_2,x_3]\\\\ x_2 & f[x_2]& & f[x_1,x_2,x_3]\\\\ & &f[x_2,x_3]\\\\ x_3 &f[x_3] \\end{array}",
                    expression:
                      "'\\\\begin{array}{c|c|c|c|c} x \\& f[~~] \\&f[~~,~~]\\&f[~~,~~,~~]\\&f[~~,~~,~~,~~]\\\\\\\\ \\\\hline x_0\\&f[x_0]\\&\\&\\& \\\\\\\\  \\&  \\& f[x_0,x_1]\\&\\& \\\\\\\\ x_1 \\&f[x_1]\\& \\& f[x_0,x_1,x_2]\\\\\\\\ \\& \\& f[x_1,x_2]& & f[x_0,x_1,x_2,x_3]\\\\\\\\ x_2 \\& f[x_2]\\& \\& f[x_1,x_2,x_3]\\\\\\\\ \\& \\&f[x_2,x_3]\\\\\\\\ x_3 \\&f[x_3] \\\\end{array}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" where "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f[~~,~~]",
                    expression: "'f[~~,~~]'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f[~~,~~,~~]",
                    expression: "'f[~~,~~,~~]'"
                  }
                ]
              }),
              _vm._v(", "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f[~~,~~,~~,~~]",
                    expression: "'f[~~,~~,~~,~~]'"
                  }
                ]
              }),
              _vm._v(
                " denote first, second and third order differences respectively. "
              )
            ]),
            _c("li", { staticStyle: { "margin-bottom": "10px" } }, [
              _vm._v(" Note that in computing "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "P_n(x)",
                    expression: "'P_n(x)'"
                  }
                ]
              }),
              _vm._v(
                " we need only the diagonal entries of the above table; that is, we need only "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value:
                      "f[x_0], f[x_0, x_1], \\ldots, f[x_0, x_1,\\ldots, x_n]",
                    expression:
                      "'f[x_0], f[x_0, x_1], \\\\ldots, f[x_0, x_1,\\\\ldots, x_n]'"
                  }
                ]
              }),
              _vm._v(". ")
            ]),
            _c("li", [
              _vm._v(
                " Since the divided differences are generated recursively, the interpolating polynomials of successively higher degrees can also be generated recursively. Thus the work done previously can be used gainfully."
              ),
              _c("br"),
              _vm._v(" For example, "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned} P_1(x) &= f[x_0] + f[x_1, x_0](x - x_0)\\\\ P_2(x) &= f[x_0] + f[x_0, x_1](x - x_0) + f[x_0, x_1; x_2](x - x_0)(x - x_1)\\\\  &= P_1(x) + f[x_0, x_1, x_2](x - x_0)(x - x_1)\\\\ \\text{Similarly }~~~ P_3(x) &= P_2(x) + f[x_0, x_1, x_2, x_3](x - x_0)(x - x_1)(x - x_2)\\\\ P_4(x) &= P_3(x) + f[x_0, x_1, x_2, x_3, x_4](x - x_0)(x - x_1)(x - x_2)(x - x_3)\\\\ \\text{and so on }&& \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned} P_1(x) \\&= f[x_0] + f[x_1, x_0](x - x_0)\\\\\\\\ P_2(x) \\&= f[x_0] + f[x_0, x_1](x - x_0) + f[x_0, x_1; x_2](x - x_0)(x - x_1)\\\\\\\\  \\&= P_1(x) + f[x_0, x_1, x_2](x - x_0)(x - x_1)\\\\\\\\ \\\\text{Similarly }~~~ P_3(x) \\&= P_2(x) + f[x_0, x_1, x_2, x_3](x - x_0)(x - x_1)(x - x_2)\\\\\\\\ P_4(x) \\&= P_3(x) + f[x_0, x_1, x_2, x_3, x_4](x - x_0)(x - x_1)(x - x_2)(x - x_3)\\\\\\\\ \\\\text{and so on }\\&\\& \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              })
            ])
          ]),
          _vm._v(" Thus, in computing "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_2(x)",
                expression: "'P_2(x)'"
              }
            ]
          }),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_1(x)",
                expression: "'P_1(x)'"
              }
            ]
          }),
          _vm._v(" has been gainfully used; in computing "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_3(x), P_2(x)",
                expression: "'P_3(x), P_2(x)'"
              }
            ]
          }),
          _vm._v(" has been gainfully used, etc. "),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 4.5")
              ]),
              _vm._v(" Construct a divided difference table for the function "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f",
                    expression: "'f'"
                  }
                ]
              }),
              _vm._v(
                " given in the following table, and write out Newton's interpolating polynomial. "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{array}{c|c|c|c|c} x~~~ &~~ 0~~ &~~ 2~~ &~~ 3~~ &~~5~~ \\\\ \\hline f(x)& 1 & 3 & 2 & 5 \\end{array}",
                    expression:
                      "'\\\\begin{array}{c|c|c|c|c} x~~~ \\&~~ 0~~ \\&~~ 2~~ \\&~~ 3~~ \\&~~5~~ \\\\\\\\ \\\\hline f(x)\\& 1 \\& 3 \\& 2 \\& 5 \\\\end{array}'",
                    arg: "display"
                  }
                ]
              }),
              _c("deep", [_vm._v("Solution.")]),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{array}{c|c|c|c|c} x & f[~~] &f[~~,~~]&f[~~,~~,~~]&f[~~,~~,~~,~~]\\\\ \\hline 0& 1&&&\\\\ &  & 1&&\\\\ 2 & 3& &\\displaystyle -\\frac{2}{3}\\\\ & & -1& & \\displaystyle \\frac{3}{10}\\\\ 3& 2& & \\displaystyle \\frac{5}{6}\\\\ & & \\displaystyle \\frac{3}{2}\\\\ 5 &5 \\end{array}",
                    expression:
                      "'\\\\begin{array}{c|c|c|c|c} x \\& f[~~] \\&f[~~,~~]\\&f[~~,~~,~~]\\&f[~~,~~,~~,~~]\\\\\\\\ \\\\hline 0\\& 1\\&\\&\\&\\\\\\\\ \\&  \\& 1\\&\\&\\\\\\\\ 2 \\& 3\\& \\&\\\\displaystyle -\\\\frac{2}{3}\\\\\\\\ \\& \\& -1\\& & \\\\displaystyle \\\\frac{3}{10}\\\\\\\\ 3\\& 2\\& \\& \\\\displaystyle \\\\frac{5}{6}\\\\\\\\ \\& \\& \\\\displaystyle \\\\frac{3}{2}\\\\\\\\ 5 \\&5 \\\\end{array}'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(
                " Using the Newton's divided difference formula, the interpolating polynomial is "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{array}{ccl}P_n(x) &=& f[x_0] + f[x_0,x_1](x - x_0) +f[x_0,x_1,x_2](x-x_0)(x-x_1)\\\\   & & + \\ldots + f[x_0,x_1,\\ldots,x_n](x-x_0)(x-x_1)\\cdots(x-x_{n-1})\\\\ P_3(x) & = & 1 + 1\\cdot(x - 0) - \\displaystyle \\frac{2}{3}(x-0)(x - 2) + \\frac{3}{10}(x-0)(x-2)(x-3)\\\\   & = & 1 + x - \\displaystyle \\frac{2}{3}x(x - 2) + \\frac{3}{10}x(x-2)(x-3)\\\\  \\end{array}",
                    expression:
                      "'\\\\begin{array}{ccl}P_n(x) \\&=\\& f[x_0] + f[x_0,x_1](x - x_0) +f[x_0,x_1,x_2](x-x_0)(x-x_1)\\\\\\\\   \\& \\& + \\\\ldots + f[x_0,x_1,\\\\ldots,x_n](x-x_0)(x-x_1)\\\\cdots(x-x_{n-1})\\\\\\\\ P_3(x) \\& = \\& 1 + 1\\\\cdot(x - 0) - \\\\displaystyle \\\\frac{2}{3}(x-0)(x - 2) + \\\\frac{3}{10}(x-0)(x-2)(x-3)\\\\\\\\   \\& = \\& 1 + x - \\\\displaystyle \\\\frac{2}{3}x(x - 2) + \\\\frac{3}{10}x(x-2)(x-3)\\\\\\\\  \\\\end{array}'",
                    arg: "display"
                  }
                ]
              })
            ],
            1
          ),
          _vm._v(" The Newton's interpolating formula is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} P_n(x) &= a_0 + a_1(x - x_0) + a_2(x - x_0)(x - x_1) + \\cdots + a_n(x - x_0)(x - x_1)\\cdots(x - x_{n-1}) \\\\ &= P_{n-1}(x) + a_n(x - x_0)(x - x_1)\\cdots(x - x_{n-1})  \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} P_n(x) \\&= a_0 + a_1(x - x_0) + a_2(x - x_0)(x - x_1) + \\\\cdots + a_n(x - x_0)(x - x_1)\\\\cdots(x - x_{n-1}) \\\\\\\\ \\&= P_{n-1}(x) + a_n(x - x_0)(x - x_1)\\\\cdots(x - x_{n-1})  \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Thus "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} P_0(x)&= a_0 = 1 \\\\ P_1(x)&= a_0 + a_1(x-x_0)\\\\ P_1(2)&= 1 + a_1(2-0) = 3, \\Longrightarrow a_1 = 1\\\\ P_2(x)&= a_0 + a_1(x-x_0) + a_2(x-x_0)(x-x_1)\\\\ P_2(3)&= 1 +1(3-0) +a_2(3-0)(3-2) = 2, \\Longrightarrow a_2 = \\displaystyle -\\frac{2}{3}\\\\ P_3(x)&= a_0 + a_1(x - x_0) + a_2(x - x_0)(x - x_1) + a_3(x - x_0)(x - x_1)(x-x_2)\\\\  P_3(5)&= \\displaystyle 1 +1(5-0)+\\left(-\\frac{2}{3}\\right)(5-0)(5-2) + a_3(5-0)(5-2)(5 - 3) = 5\\\\ &  \\Longrightarrow a_3 = \\frac{9}{30} = \\frac{3}{10}\\\\ P_3(x)&= 1 + x - \\displaystyle \\frac{2}{3}x(x - 2) + \\frac{3}{10}x(x-2)(x-3)\\\\ \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} P_0(x)\\&= a_0 = 1 \\\\\\\\ P_1(x)\\&= a_0 + a_1(x-x_0)\\\\\\\\ P_1(2)\\&= 1 + a_1(2-0) = 3, \\\\Longrightarrow a_1 = 1\\\\\\\\ P_2(x)\\&= a_0 + a_1(x-x_0) + a_2(x-x_0)(x-x_1)\\\\\\\\ P_2(3)\\&= 1 +1(3-0) +a_2(3-0)(3-2) = 2, \\\\Longrightarrow a_2 = \\\\displaystyle -\\\\frac{2}{3}\\\\\\\\ P_3(x)\\&= a_0 + a_1(x - x_0) + a_2(x - x_0)(x - x_1) + a_3(x - x_0)(x - x_1)(x-x_2)\\\\\\\\  P_3(5)\\&= \\\\displaystyle 1 +1(5-0)+\\\\left(-\\\\frac{2}{3}\\\\right)(5-0)(5-2) + a_3(5-0)(5-2)(5 - 3) = 5\\\\\\\\ \\&  \\\\Longrightarrow a_3 = \\\\frac{9}{30} = \\\\frac{3}{10}\\\\\\\\ P_3(x)\\&= 1 + x - \\\\displaystyle \\\\frac{2}{3}x(x - 2) + \\\\frac{3}{10}x(x-2)(x-3)\\\\\\\\ \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _c("div", { staticClass: "my-4" }, [
            _c("h5", { staticClass: "h5-responsive mb-3 font-weight-bold " }, [
              _vm._v(
                " 4.3.1 The Newton Interpolation with Equally Spaced Nodes"
              )
            ]),
            _vm._v(
              " Newton's interpolatory divided-difference formula has a simpler form when "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x_0, x_1, \\ldots , x_n",
                  expression: "'x_0, x_1, \\\\ldots , x_n'"
                }
              ]
            }),
            _vm._v(
              " are arranged consecutively with equal spacing. In this case, we first introduce the notation "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "h = x_{i+1} - x_i~~~\\text{for each }~~ i = 0, 1,\\ldots, n-1.",
                  expression:
                    "'h = x_{i+1} - x_i~~~\\\\text{for each }~~ i = 0, 1,\\\\ldots, n-1.'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Then we let a new variable "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "s",
                  expression: "'s'"
                }
              ]
            }),
            _vm._v(" be defined by the equation "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "x = x_0 + sh",
                  expression: "'x = x_0 + sh'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" The difference "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x - x_i",
                  expression: "'x - x_i'"
                }
              ]
            }),
            _vm._v(" can then be written as "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "x - x_i = (s - i)h",
                  expression: "'x - x_i = (s - i)h'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" and the divided-difference formula becomes "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{array}{ccl} P_n(x) &=& f[x_0] + f[x_0,x_1](x - x_0) +f[x_0,x_1,x_2](x-x_0)(x-x_1)\\\\  & & + \\ldots + f[x_0,x_1,\\ldots,x_n](x-x_0)(x-x_1)\\cdots(x-x_{n-1})\\\\ &=& f[x_0] + sh f[x_0,x_1] + s(s-1)h^2 f[x_0,x_1,x_2]\\\\ & & + \\ldots + s(s-1)\\cdots(s-n+1)f[x_0,x_1,\\ldots,x_n]\\\\ &=&\\sum_{k=0}^n s(s-1)\\cdots(s-k+1)h^k f[x_0,x_1,\\ldots,x_k] \\end{array}",
                  expression:
                    "'\\\\begin{array}{ccl} P_n(x) \\&=\\& f[x_0] + f[x_0,x_1](x - x_0) +f[x_0,x_1,x_2](x-x_0)(x-x_1)\\\\\\\\  \\& \\& + \\\\ldots + f[x_0,x_1,\\\\ldots,x_n](x-x_0)(x-x_1)\\\\cdots(x-x_{n-1})\\\\\\\\ \\&=\\& f[x_0] + sh f[x_0,x_1] + s(s-1)h^2 f[x_0,x_1,x_2]\\\\\\\\ \\& \\& + \\\\ldots + s(s-1)\\\\cdots(s-n+1)f[x_0,x_1,\\\\ldots,x_n]\\\\\\\\ \\&=\\&\\\\sum_{k=0}^n s(s-1)\\\\cdots(s-k+1)h^k f[x_0,x_1,\\\\ldots,x_k] \\\\end{array}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Using a generalization of the binomial-coefficient notation, "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\left(\\begin{array}{c}s\\\\ k \\end{array}\\right) = \\frac{s(s-1)\\cdots(s-k+1)}{k!}",
                  expression:
                    "'\\\\left(\\\\begin{array}{c}s\\\\\\\\ k \\\\end{array}\\\\right) = \\\\frac{s(s-1)\\\\cdots(s-k+1)}{k!}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" where s$ need not be an integer, we can express "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "P_n(x)",
                  expression: "'P_n(x)'"
                }
              ]
            }),
            _vm._v(" compactly as follows. "),
            _c(
              "div",
              {
                staticClass: "table-responsive table-stripped",
                staticStyle: { width: "100%" }
              },
              [
                _c("table", { staticClass: "table" }, [
                  _c("thead", [
                    _c("tr", [
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value:
                                "P_n(x) = P_n(x_0 + sh) = f[x_0] + \\sum_{k=0}^n \\left(\\begin{array}{c}s\\\\k \\end{array}\\right)k!h^kf[x_0,x_1,\\ldots,x_k]",
                              expression:
                                "'P_n(x) = P_n(x_0 + sh) = f[x_0] + \\\\sum_{k=0}^n \\\\left(\\\\begin{array}{c}s\\\\\\\\k \\\\end{array}\\\\right)k!h^kf[x_0,x_1,\\\\ldots,x_k]'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "(4.14)",
                              expression: "'(4.14)'",
                              arg: "display"
                            }
                          ]
                        })
                      ])
                    ])
                  ])
                ])
              ]
            )
          ]),
          _c("div", { staticClass: "my-4" }, [
            _c("h5", { staticClass: "h5-responsive mb-3 font-weight-bold " }, [
              _vm._v(" 4.3.2 Newton forward difference formula")
            ]),
            _vm._v(" Let's introduce the notations: "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\Delta  f_i = f(x_{i+1}) - f(x_i)~~~~~~~\\text{1st forward difference}",
                  expression:
                    "'\\\\Delta  f_i = f(x_{i+1}) - f(x_i)~~~~~~~\\\\text{1st forward difference}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" then "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\Delta f_0 = f(x_1) - f(x_0)",
                  expression: "'\\\\Delta f_0 = f(x_1) - f(x_0)'"
                }
              ]
            }),
            _vm._v(" , "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\Delta f_1 = f(x_2) - f(x_1)",
                  expression: "'\\\\Delta f_1 = f(x_2) - f(x_1)'"
                }
              ]
            }),
            _vm._v(", etc. So "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "f[x_0,x_1] = \\frac{f(x_1) - f(x_0)}{x_1 - x_0} = \\frac{\\Delta f_0}{h}",
                  expression:
                    "'f[x_0,x_1] = \\\\frac{f(x_1) - f(x_0)}{x_1 - x_0} = \\\\frac{\\\\Delta f_0}{h}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Also, note that "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} \\Delta^2 f_i &= \\Delta(\\Delta f_i) = \\Delta(f(x_{i+1}) -f(x_i))\\\\ &= \\Delta f(x_{i+1}) - \\Delta f(x_i)\\\\ &= [f(x_{i+2}) - f(x_{i+1})] - [f(x_{i+1}) - f(x_i)]\\\\ &= f(x_{i+2}) - 2f(x_{i+1}) + f(x_i)~~~~~~\\text{2nd forward difference}\\\\ \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} \\\\Delta^2 f_i \\&= \\\\Delta(\\\\Delta f_i) = \\\\Delta(f(x_{i+1}) -f(x_i))\\\\\\\\ \\&= \\\\Delta f(x_{i+1}) - \\\\Delta f(x_i)\\\\\\\\ \\&= [f(x_{i+2}) - f(x_{i+1})] - [f(x_{i+1}) - f(x_i)]\\\\\\\\ \\&= f(x_{i+2}) - 2f(x_{i+1}) + f(x_i)~~~~~~\\\\text{2nd forward difference}\\\\\\\\ \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" For example "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\Delta^2 f_0 = f(x_2) - 2f(x_1) + f(x_0)",
                  expression: "'\\\\Delta^2 f_0 = f(x_2) - 2f(x_1) + f(x_0)'"
                }
              ]
            }),
            _vm._v(". It can also be shown that "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "\\Delta^3 f_0 = f(x_3) -3f(x_2) + 3f(x_1) - f(x_0)",
                  expression:
                    "'\\\\Delta^3 f_0 = f(x_3) -3f(x_2) + 3f(x_1) - f(x_0)'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Higher order differences are again the differences of the next lower order differences.. With this notation the first two divided diffrences for "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "f",
                  expression: "'f'"
                }
              ]
            }),
            _vm._v(" can be written as "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{aligned} f[x_0,x_1]&= \\frac{f(x_1) - f(x_0)}{x_1 - x_0} = \\frac{\\Delta f(x_0)}{h}\\\\ f[x_0,x_1,x_2]&= \\frac{f[x_{1},x_{2}] - f[x_0,x_{1}]}{x_{2} - x_0}\\\\ &= \\frac{\\displaystyle \\frac{f(x_2)-f(x_1)}{x_2 - x_1} - \\frac{f(x_1)-f(x_0)}{x_1 - x_0}}{x_2 - x_0}\\\\   &= \\frac{f(x_2) - 2f(x_1) + f(x_0)}{h \\times 2h} = \\frac{\\Delta^2 f_0}{2h^2} \\end{aligned}",
                  expression:
                    "'\\\\begin{aligned} f[x_0,x_1]\\&= \\\\frac{f(x_1) - f(x_0)}{x_1 - x_0} = \\\\frac{\\\\Delta f(x_0)}{h}\\\\\\\\ f[x_0,x_1,x_2]\\&= \\\\frac{f[x_{1},x_{2}] - f[x_0,x_{1}]}{x_{2} - x_0}\\\\\\\\ \\&= \\\\frac{\\\\displaystyle \\\\frac{f(x_2)-f(x_1)}{x_2 - x_1} - \\\\frac{f(x_1)-f(x_0)}{x_1 - x_0}}{x_2 - x_0}\\\\\\\\   \\&= \\\\frac{f(x_2) - 2f(x_1) + f(x_0)}{h \\\\times 2h} = \\\\frac{\\\\Delta^2 f_0}{2h^2} \\\\end{aligned}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" In general, we have "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "f[x_0,x_1,\\ldots,x_k] = \\frac{1}{k! h^k}\\Delta^k f_0 ",
                  expression:
                    "'f[x_0,x_1,\\\\ldots,x_k] = \\\\frac{1}{k! h^k}\\\\Delta^k f_0 '",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " Thus, the interpolating polynomial given by equation (4.14) can be written using forward differences as "
            ),
            _c(
              "div",
              {
                staticClass: "table-responsive table-stripped",
                staticStyle: { width: "100%" }
              },
              [
                _c("table", { staticClass: "table" }, [
                  _c("thead", [
                    _c("tr", [
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value:
                                "P_n(x) = f_0 + s\\Delta f_0 + \\frac{s(s-1)}{2!}\\Delta^2 f_0 + \\frac{s(s-1)(s-2)}{3!}\\Delta^3f_0 +\\ldots+ \\frac{s(s-1)\\cdots(s-n+1)}{n!}\\Delta^n f_0",
                              expression:
                                "'P_n(x) = f_0 + s\\\\Delta f_0 + \\\\frac{s(s-1)}{2!}\\\\Delta^2 f_0 + \\\\frac{s(s-1)(s-2)}{3!}\\\\Delta^3f_0 +\\\\ldots+ \\\\frac{s(s-1)\\\\cdots(s-n+1)}{n!}\\\\Delta^n f_0'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "(4.15)",
                              expression: "'(4.15)'",
                              arg: "display"
                            }
                          ]
                        })
                      ])
                    ])
                  ])
                ])
              ]
            ),
            _vm._v(" or "),
            _c(
              "div",
              {
                staticClass: "table-responsive",
                staticStyle: { width: "100%" }
              },
              [
                _c("table", { staticClass: "table" }, [
                  _c("thead", [
                    _c("tr", [
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value:
                                "P_n(x) = \\sum_{k=0}^{n}\\left(\\begin{array}{c}s\\\\k \\end{array}\\right)\\Delta^k f_0",
                              expression:
                                "'P_n(x) = \\\\sum_{k=0}^{n}\\\\left(\\\\begin{array}{c}s\\\\\\\\k \\\\end{array}\\\\right)\\\\Delta^k f_0'",
                              arg: "display"
                            }
                          ]
                        })
                      ]),
                      _c("th", [
                        _c("div", {
                          directives: [
                            {
                              name: "katex",
                              rawName: "v-katex:display",
                              value: "(4.16)",
                              expression: "'(4.16)'",
                              arg: "display"
                            }
                          ]
                        })
                      ])
                    ])
                  ])
                ])
              ]
            ),
            _vm._v(" The forward difference table with "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "n = 4",
                  expression: "'n = 4'"
                }
              ]
            }),
            _vm._v(" is given by "),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "\\begin{array}{c|c|c|c|c|c} x_i &~~f(x_i)~~ &~~ \\Delta f~~ &~~ \\Delta^2 f~~ &~~ \\Delta^3 f ~~&~~ \\Delta^4 f \\\\ \\hline x_0 & f_0 &	 & & & \\\\    &     &\\Delta f_0  & & & \\\\ x_1 & f_1 &  &\\Delta^2 f_0 & & \\\\ &     &\\Delta f_1  & &\\Delta^3 f_0 & \\\\ x_2 & f_2 & & \\Delta^2 f_1& & \\Delta^4 f_0 \\\\  &     &\\Delta f_2  & & \\Delta^3 f_1& \\\\ x_3 & f_3 & &\\Delta^2 f_2 & & \\\\ &     &\\Delta f_3  & & & \\\\ x_4 & f_4 & & & & \\\\ \\end{array}",
                  expression:
                    "'\\\\begin{array}{c|c|c|c|c|c} x_i \\&~~f(x_i)~~ \\&~~ \\\\Delta f~~ \\&~~ \\\\Delta^2 f~~ \\&~~ \\\\Delta^3 f ~~\\&~~ \\\\Delta^4 f \\\\\\\\ \\\\hline x_0 \\& f_0 \\&\t \\& \\& \\& \\\\\\\\    \\&     \\&\\\\Delta f_0  \\& \\& \\& \\\\\\\\ x_1 \\& f_1 \\&  \\&\\\\Delta^2 f_0 \\& \\& \\\\\\\\ \\&     \\&\\\\Delta f_1  \\& \\&\\\\Delta^3 f_0 \\& \\\\\\\\ x_2 \\& f_2 \\& \\& \\\\Delta^2 f_1\\& \\& \\\\Delta^4 f_0 \\\\\\\\  \\&     \\&\\\\Delta f_2  \\& \\& \\\\Delta^3 f_1\\& \\\\\\\\ x_3 \\& f_3 \\& \\&\\\\Delta^2 f_2 \\& \\& \\\\\\\\ \\&     \\&\\\\Delta f_3  \\& \\& \\& \\\\\\\\ x_4 \\& f_4 \\& \\& \\& \\& \\\\\\\\ \\\\end{array}'",
                  arg: "display"
                }
              ]
            }),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 4.6")
                ]),
                _vm._v(" Given the points "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(-3,-1)",
                      expression: "'(-3,-1)'"
                    }
                  ]
                }),
                _vm._v(", "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(0,2)",
                      expression: "'(0,2)'"
                    }
                  ]
                }),
                _vm._v(" and "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(3,-2)",
                      expression: "'(3,-2)'"
                    }
                  ]
                }),
                _vm._v(
                  " construct a forward difference table; hence deduce the polynomial of degree "
                ),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\leq 2",
                      expression: "'\\\\leq 2'"
                    }
                  ]
                }),
                _vm._v(" that goes through the points in Newton form "),
                _c("br"),
                _c("deep", [_vm._v("Solution.")]),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{array}{c|c|c|c} x_i &~~f(x_i)~~ &~~ \\Delta f~~ &~~ \\Delta^2 f\\\\ \\hline -3 & -1 &	 &  \\\\     &     &3 & \\\\ 0 & 2 &  &-7 \\\\  &     &-4  & \\\\ 3 & -2 & & \\\\ \\end{array}",
                      expression:
                        "'\\\\begin{array}{c|c|c|c} x_i \\&~~f(x_i)~~ \\&~~ \\\\Delta f~~ \\&~~ \\\\Delta^2 f\\\\\\\\ \\\\hline -3 \\& -1 \\&\t \\&  \\\\\\\\     \\&     \\&3 \\& \\\\\\\\ 0 \\& 2 \\&  \\&-7 \\\\\\\\  \\&     \\&-4  \\& \\\\\\\\ 3 \\& -2 \\& \\& \\\\\\\\ \\\\end{array}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Using formula (4.15) with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n = 2",
                      expression: "'n = 2'"
                    }
                  ]
                }),
                _vm._v(" we have "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "P_2(x) = f_0 + s\\Delta f_0 + \\frac{s(s-1)}{2!}\\Delta^2f_0 ",
                      expression:
                        "'P_2(x) = f_0 + s\\\\Delta f_0 + \\\\frac{s(s-1)}{2!}\\\\Delta^2f_0 '",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "3~,~~~~x = x_0 + sh,~~~s = \\frac{x-x_0}{h} = \\frac{x+3}{3}~",
                      expression:
                        "'3~,~~~~x = x_0 + sh,~~~s = \\\\frac{x-x_0}{h} = \\\\frac{x+3}{3}~'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} P_2(x) &=\\displaystyle   -1 + \\frac{(x+3)}{3}(3) + \\frac{\\displaystyle \\frac{(x+3)}{3}\\left(\\frac{x+3}{3} - 1\\right)}{2!}(-7)\\\\  &= -1 + (x+3) + \\frac{x(x+3)(-7)}{2\\cdot 3^2}\\\\       &= -1 + (x + 3) - \\frac{7}{18}x(x+3) \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} P_2(x) \\&=\\\\displaystyle   -1 + \\\\frac{(x+3)}{3}(3) + \\\\frac{\\\\displaystyle \\\\frac{(x+3)}{3}\\\\left(\\\\frac{x+3}{3} - 1\\\\right)}{2!}(-7)\\\\\\\\  \\&= -1 + (x+3) + \\\\frac{x(x+3)(-7)}{2\\\\cdot 3^2}\\\\\\\\       \\&= -1 + (x + 3) - \\\\frac{7}{18}x(x+3) \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            ),
            _c(
              "div",
              {
                staticClass: "my-3 mb-4 p-3",
                staticStyle: { "background-color": "#e2e3e5" }
              },
              [
                _c("span", { staticClass: "font-weight-bold" }, [
                  _vm._v("Example 4.7")
                ]),
                _vm._v(
                  " Construct a Newton's forward difference table corresponding to the following data and find a polynomial of least degree that goes through the points. "
                ),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{array}{c|c|c|c|c|c} x &~~-2~~ &~~-1~~ &~~ 0~~ &~~1~~&~~2~~ \\\\ \\hline f(x)& -1 & 3 & 1 & -1 & 3 \\end{array} ",
                      expression:
                        "'\\\\begin{array}{c|c|c|c|c|c} x \\&~~-2~~ \\&~~-1~~ \\&~~ 0~~ \\&~~1~~\\&~~2~~ \\\\\\\\ \\\\hline f(x)\\& -1 \\& 3 \\& 1 \\& -1 \\& 3 \\\\end{array} '",
                      arg: "display"
                    }
                  ]
                }),
                _c("deep", [_vm._v("Solution.")]),
                _vm._v(" The forward difference table with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n = 4",
                      expression: "'n = 4'"
                    }
                  ]
                }),
                _vm._v(" is given by "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{array}{c|c|c|c|c|c} x_i &~~f(x_i)~~ &~~ \\Delta f~~ &~~ \\Delta^2 f~~ &~~ \\Delta^3 f ~~&~~ \\Delta^4 f \\\\ \\hline-2 & -1 &	 & & & \\\\    &     &4  & & & \\\\-1 & 3 &  & -6 & & \\\\    &     &-2 & &6 & \\\\ 0 & 1 & & 0& & 0 \\\\    &     &-2 & &6& \\\\ 1 & -1 & &6 & & \\\\    &     &4  & & & \\\\ 2 & 3 & & & & \\\\ \\end{array}",
                      expression:
                        "'\\\\begin{array}{c|c|c|c|c|c} x_i \\&~~f(x_i)~~ \\&~~ \\\\Delta f~~ \\&~~ \\\\Delta^2 f~~ \\&~~ \\\\Delta^3 f ~~\\&~~ \\\\Delta^4 f \\\\\\\\ \\\\hline-2 \\& -1 \\&\t \\& \\& \\& \\\\\\\\    \\&     \\&4  \\& \\& \\& \\\\\\\\-1 \\& 3 \\&  \\& -6 \\& \\& \\\\\\\\    \\&     \\&-2 \\& \\&6 \\& \\\\\\\\ 0 \\& 1 \\& \\& 0\\& \\& 0 \\\\\\\\    \\&     \\&-2 \\& \\&6\\& \\\\\\\\ 1 \\& -1 \\& \\&6 \\& \\& \\\\\\\\    \\&     \\&4  \\& \\& \\& \\\\\\\\ 2 \\& 3 \\& \\& \\& \\& \\\\\\\\ \\\\end{array}'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Using formula (4.15) with "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "n = 4",
                      expression: "'n = 4'"
                    }
                  ]
                }),
                _vm._v(" we have "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "  h  = 1~,~~x_0 = -2~,~~~s = \\frac{x-x_0}{h} = x+2~",
                      expression:
                        "'  h  = 1~,~~x_0 = -2~,~~~s = \\\\frac{x-x_0}{h} = x+2~'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "\\begin{aligned} P_4(x) &= f_0  + s \\Delta f_0 + \\frac{s(s-1)}{2!}\\Delta^2 f_0 + \\frac{s(s-1)(s-2)}{3!}\\Delta^3 f_0 +  \\frac{s(s-1)(s-2)(s-3)}{4!}\\Delta^4 f_0\\\\  &= -1 + (x+2)(4) + \\frac{(x+2)(x+1)}{2!}(-6) +\\frac{(x+2)(x+1)(x)}{3!}(6)\\\\  &= -1 + 4(x+2)  -3(x+1)(x+2) + x(x+1)(x+2) \\end{aligned}",
                      expression:
                        "'\\\\begin{aligned} P_4(x) \\&= f_0  + s \\\\Delta f_0 + \\\\frac{s(s-1)}{2!}\\\\Delta^2 f_0 + \\\\frac{s(s-1)(s-2)}{3!}\\\\Delta^3 f_0 +  \\\\frac{s(s-1)(s-2)(s-3)}{4!}\\\\Delta^4 f_0\\\\\\\\  \\&= -1 + (x+2)(4) + \\\\frac{(x+2)(x+1)}{2!}(-6) +\\\\frac{(x+2)(x+1)(x)}{3!}(6)\\\\\\\\  \\&= -1 + 4(x+2)  -3(x+1)(x+2) + x(x+1)(x+2) \\\\end{aligned}'",
                      arg: "display"
                    }
                  ]
                })
              ],
              1
            )
          ])
        ],
        1
      ),
      _c(
        "div",
        { staticClass: "my-4 py-3" },
        [
          _c(
            "h4",
            { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
            [_vm._v(" 4.4 Error in polynomial Interpolation ")]
          ),
          _c("hr", { staticClass: "blue mb-4 mt-0 " }),
          _c(
            "div",
            { staticClass: "theorem my-3 p-3 " },
            [
              _c("theorem-color", [_vm._v("Theorem 4.3")]),
              _vm._v(" Let "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" be a function defined in an interval "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(a,b)",
                    expression: "'(a,b)'"
                  }
                ]
              }),
              _vm._v(" and suppose that "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f (x)",
                    expression: "'f (x)'"
                  }
                ]
              }),
              _vm._v(" has "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n + 1",
                    expression: "'n + 1'"
                  }
                ]
              }),
              _vm._v(" continuous derivatives on "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(a, b)",
                    expression: "'(a, b)'"
                  }
                ]
              }),
              _vm._v(". If "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "a  \\leq  x_0 < x_1 < \\ldots < x_n  \\leq  b,",
                    expression:
                      "'a  \\\\leq  x_0 < x_1 < \\\\ldots < x_n  \\\\leq  b,'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" then "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "f(x) - P_n(x) =\\frac{(x - x_0)(x - x_1)\\cdots  (x - x_n)}{(n + 1)!} f^{(n+1)}(\\xi)",
                    expression:
                      "'f(x) - P_n(x) =\\\\frac{(x - x_0)(x - x_1)\\\\cdots  (x - x_n)}{(n + 1)!} f^{(n+1)}(\\\\xi)'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" for some "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\xi \\in (x_0,x_N)",
                    expression: "'\\\\xi \\\\in (x_0,x_N)'"
                  }
                ]
              }),
              _vm._v(". ")
            ],
            1
          ),
          _c("deep", [_vm._v("Note:")]),
          _vm._v(" The "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "n",
                expression: "'n'"
              }
            ]
          }),
          _vm._v(
            "th degree polynomial generated by the Newtons divided difference formula is the exact same polynomial generated by Lagrange formula. Thus, the error "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "E_n",
                expression: "'E_n'"
              }
            ]
          }),
          _vm._v(" is the same': "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "E_n(x) = f(x) - P_n(x) =\\frac{(x - x_0)(x - x_1)\\cdots  (x - x_n)}{(n + 1)!}f^{(n+1)}(\\xi)",
                expression:
                  "'E_n(x) = f(x) - P_n(x) =\\\\frac{(x - x_0)(x - x_1)\\\\cdots  (x - x_n)}{(n + 1)!}f^{(n+1)}(\\\\xi)'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The absolute value "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "|E_n(x)|",
                expression: "'|E_n(x)|'"
              }
            ]
          }),
          _vm._v(" is known as the "),
          _c("deep", [_vm._v("error bound")]),
          _vm._v("."),
          _c("br"),
          _c("deep", [_vm._v("Example:")]),
          _vm._v(" Find the error bound "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "E_1",
                expression: "'E_1'"
              }
            ]
          }),
          _vm._v(" when the function "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "f(x) = x^2e^{-x/2}",
                expression: "'f(x) = x^2e^{-x/2}'"
              }
            ]
          }),
          _vm._v(
            " is approximated using the Newton's divided difference formula using the points "
          ),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "x_0 = 1.1,\\;\\; x_1 = 2,\\;\\; x_2 = 3.5,\\;\\; x_3 = 5,\\;\\; x_4 = 7.1 ",
                expression:
                  "'x_0 = 1.1,\\\\;\\\\; x_1 = 2,\\\\;\\\\; x_2 = 3.5,\\\\;\\\\; x_3 = 5,\\\\;\\\\; x_4 = 7.1 '",
                arg: "display"
              }
            ]
          }),
          _c("deep", [_vm._v("Solution:")]),
          _vm._v(" The error of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "P_1(x)",
                expression: "'P_1(x)'"
              }
            ]
          }),
          _vm._v(" is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned}E_1  &= \\frac{f''(\\xi)}{2!}(x - x_0)(x - x_1)\\\\     &= \\frac{f''(\\xi)}{2!}(x - 1.1)(x - 2)\\\\ \\end{aligned}",
                expression:
                  "'\\\\begin{aligned}E_1  \\&= \\\\frac{f\\'\\'(\\\\xi)}{2!}(x - x_0)(x - x_1)\\\\\\\\     \\&= \\\\frac{f\\'\\'(\\\\xi)}{2!}(x - 1.1)(x - 2)\\\\\\\\ \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The second derivative is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "f''(x) = e^{-\\frac{x}{2}} \\left(\\frac{x^2}{4}-2 x+2\\right) ",
                expression:
                  "'f\\'\\'(x) = e^{-\\\\frac{x}{2}} \\\\left(\\\\frac{x^2}{4}-2 x+2\\\\right) '",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The maximum of the second derivative is (see graph below) "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "Max~|f''(x)| \\leq |f''(2)| = 0.367879",
                expression:
                  "'Max~|f\\'\\'(x)| \\\\leq |f\\'\\'(2)| = 0.367879'",
                arg: "display"
              }
            ]
          }),
          _c(
            "div",
            {
              staticClass: "my-3 red-text text-center p-4",
              staticStyle: { border: "2px solid blue" }
            },
            [_vm._v(" Space for figure ")]
          ),
          _vm._v(" The maximum of "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "(x-1.1)(x-2)",
                expression: "'(x-1.1)(x-2)'"
              }
            ]
          }),
          _vm._v(" is attained at the critical point "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "x = 1.55",
                expression: "'x = 1.55'"
              }
            ]
          }),
          _vm._v(". Thus, "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "|(x-1.1)(x-2)| \\leq |(1.55-1.1)(1.55-2)| = 0.2025",
                expression:
                  "'|(x-1.1)(x-2)| \\\\leq |(1.55-1.1)(1.55-2)| = 0.2025'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The error bound is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "\\begin{aligned} |E_1|  & = \\left|\\frac{f''(\\xi)}{2!}(x - 1.1)(x - 2)\\right|\\\\ & \\leq  \\frac{0.367879}{2}0.2025  = 0.0372477  \\end{aligned}",
                expression:
                  "'\\\\begin{aligned} |E_1|  \\& = \\\\left|\\\\frac{f\\'\\'(\\\\xi)}{2!}(x - 1.1)(x - 2)\\\\right|\\\\\\\\ \\& \\\\leq  \\\\frac{0.367879}{2}0.2025  = 0.0372477  \\\\end{aligned}'",
                arg: "display"
              }
            ]
          }),
          _c(
            "div",
            { staticClass: "my-3" },
            [
              _c("h5", { staticClass: "h5-responsive font-weight-bold" }, [
                _vm._v("4.4.1 Error estimation when "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "f(x)",
                      expression: "'f(x)'"
                    }
                  ]
                }),
                _vm._v(" is unknown")
              ]),
              _vm._v(
                " Recall that the the Mean Value Theorem (MVT) states that if "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" is continuous on the closed interval "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "[a,b]",
                    expression: "'[a,b]'"
                  }
                ]
              }),
              _vm._v(" , and differentiable on the open interval "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: " (a,b)",
                    expression: "' (a,b)'"
                  }
                ]
              }),
              _vm._v(" , then there exists a point "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "c",
                    expression: "'c'"
                  }
                ]
              }),
              _vm._v(" in "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "(a,b)",
                    expression: "'(a,b)'"
                  }
                ]
              }),
              _vm._v(" such that "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "f'(c) = \\frac{f(b)-f(a)}{b-a}.",
                    expression: "'f\\'(c) = \\\\frac{f(b)-f(a)}{b-a}.'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Notice that the first divided difference is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "f[x_0,x_1] = \\frac{f(x_1) - f(x_0)}{x_1 - x_0}.",
                    expression:
                      "'f[x_0,x_1] = \\\\frac{f(x_1) - f(x_0)}{x_1 - x_0}.'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Thus, by the MVT, if "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f'(x)",
                    expression: "'f\\'(x)'"
                  }
                ]
              }),
              _vm._v(" exists, then "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "f[x_0,x_1] = f'(\\xi)  ",
                    expression: "'f[x_0,x_1] = f\\'(\\\\xi)  '",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" for some "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "\\xi \\in (x_0,x_1)",
                    expression: "'\\\\xi \\\\in (x_0,x_1)'"
                  }
                ]
              }),
              _vm._v("."),
              _c("br"),
              _vm._v(" The following theorem generalises this observation "),
              _c(
                "div",
                { staticClass: "theorem my-3 p-3 " },
                [
                  _c("theorem-color", [_vm._v("Theorem 4.4 ")]),
                  _vm._v(" Suppose "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "f",
                        expression: "'f'"
                      }
                    ]
                  }),
                  _vm._v(" has "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "n",
                        expression: "'n'"
                      }
                    ]
                  }),
                  _vm._v(" continuous derivatives and "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "x_0,x_1,\\ldots,x_n",
                        expression: "'x_0,x_1,\\\\ldots,x_n'"
                      }
                    ]
                  }),
                  _vm._v(" are distinct numbers in "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "[a,b]",
                        expression: "'[a,b]'"
                      }
                    ]
                  }),
                  _vm._v(". Then "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "\\xi",
                        expression: "'\\\\xi'"
                      }
                    ]
                  }),
                  _vm._v(" in "),
                  _c("span", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex",
                        value: "(a,b)",
                        expression: "'(a,b)'"
                      }
                    ]
                  }),
                  _vm._v(" exists with "),
                  _c("div", {
                    directives: [
                      {
                        name: "katex",
                        rawName: "v-katex:display",
                        value:
                          "f[x_0,x_1,\\ldots,x_n] = \\frac{f^{(n)}(\\xi)}{n!} ",
                        expression:
                          "'f[x_0,x_1,\\\\ldots,x_n] = \\\\frac{f^{(n)}(\\\\xi)}{n!} '",
                        arg: "display"
                      }
                    ]
                  })
                ],
                1
              ),
              _vm._v(
                " This theorem is used to bound the error in cases where the "
              ),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f(x)",
                    expression: "'f(x)'"
                  }
                ]
              }),
              _vm._v(" and its "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "n",
                    expression: "'n'"
                  }
                ]
              }),
              _vm._v(
                "th derivative is not known. The error is approximated using the "
              ),
              _c("deep", [_vm._v("next term rule")]),
              _vm._v(" defined as "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\begin{aligned}E_n(x) &= f^{(n+1)}(\\xi) \\frac{(x - x_0)(x - x_1)\\cdots  (x - x_n)}{(n + 1)!}\\\\ &\\approx f[x_0,x_1,\\ldots,x_n,x_{n+1}] (x - x_0)(x - x_1)\\cdots  (x - x_n) \\end{aligned}",
                    expression:
                      "'\\\\begin{aligned}E_n(x) \\&= f^{(n+1)}(\\\\xi) \\\\frac{(x - x_0)(x - x_1)\\\\cdots  (x - x_n)}{(n + 1)!}\\\\\\\\ \\&\\\\approx f[x_0,x_1,\\\\ldots,x_n,x_{n+1}] (x - x_0)(x - x_1)\\\\cdots  (x - x_n) \\\\end{aligned}'",
                    arg: "display"
                  }
                ]
              })
            ],
            1
          )
        ],
        1
      )
    ])
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "section",
      {
        staticClass: "py-3 px-3 mx-4",
        staticStyle: { "background-color": "#fff3e0" }
      },
      [
        _c("h3", { staticClass: " h3-responsive font-weight-bold" }, [
          _vm._v(" 4.Interpolation")
        ])
      ]
    )
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}