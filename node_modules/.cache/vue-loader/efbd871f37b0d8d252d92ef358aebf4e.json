{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit2.vue?vue&type=template&id=855692f8&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit2.vue","mtime":1599940614316},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9InVuaXQyIj4KICAgIDxzZWN0aW9uIGNsYXNzPSJweS0zIHB4LTMgbXgtNCIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6I2ZmZjNlMCI+CiAgICAgICAgPGgzIGNsYXNzPSIgaDMtcmVzcG9uc2l2ZSBmb250LXdlaWdodC1ib2xkIj4gMi4gTnVtYmVyIFJlcHJlc2VudGF0aW9uPC9oMz4KICAgIDwvc2VjdGlvbj4KICAgIDwhLS1TZWN0aW9uIDIuMSAtLT4KICAgIDxzZWN0aW9uIGNsYXNzPSJkYXJrLWdyZXktdGV4dCBtYi00IHB0LTMgcHgtMyBteC00Ij4KICAgICAgICA8aDQgY2xhc3M9Img0LXJlc3BvbnNpdmUgcHQtMiBmb250LXdlaWdodC1ib2xkIGJsdWUtdGV4dCI+CiAgICAgICAgICAgIDIuMSBEZWNpbWFsIGFuZCBCaW5hcnkgc3lzdGVtCiAgICAgICAgPC9oND4KICAgICAgICA8aHIgY2xhc3M9ImJsdWUgbWItNCBtdC0wICI+CiAgICAgICAgPGRpdj4KICAgICAgICAgICAgVGhlIG51bWJlciBzeXN0ZW0gdXNlZCBvbiBhIGRhaWx5IGJhc2lzIGlzIGNhbGxlZCBhIDxzdHJvbmc+ZGVjaW1hbCBzeXN0ZW08L3N0cm9uZz4uCiAgICAgICAgICAgIEluIGRlY2ltYWwgcmVwcmVzZW50YXRpb24gb2YgaW50ZWdlcnMgd2UgaWRlbnRpZnkgYW4gaW50ZWdlcgoKICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuMS0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ2RfbmRfe24tMX1cXGNkb3RzIGRfMWRfMCciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuMSknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gMi4xLS0+CiAgICAgICAgICAgIHdpdGgKCiAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjItLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidkX24xMF5uICsgZF97bi0xfTEwXntuLTF9ICsgXFxjZG90cyArIGRfMSAxMF4xICsgZF8wIDEwXjAnIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjIpJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL0VxdWF0aW9uIDIuMi0tPgogICAgICAgICAgICBTaW1pbGFybHksIGFuIGluZmluaXRlIGRlY2ltYWwgb2YgdGhlIGZvcm0KCiAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjMtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidkX25kX3tuLTF9XFxjZG90cyBkXzFkXzAuZF97LTF9ZF97LTJ9ZF97LTN9XFxsZG90cyciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuMyknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gMi4zLS0+CiAgICAgICAgICAgIGNhbiBiZSByZXByZXNlbnRlZCBhcwoKICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuNC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ2RfbjEwXm4gKyBkX3tuLTF9MTBee24tMX0gKyBcXGNkb3RzICsgZF8xIDEwXjEgKyBkXzAgMTBeMCArIGRfey0xfTEwXnstMX0gKyBkX3stMn0xMF57LTJ9ICsgXFxsZG90cyciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuNCknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwhLS0uL0VxdWF0aW9uIDIuNC0tPgogICAgICAgICAgICB3aGVyZSA8c3BhbiB2LWthdGV4PSInZF9rJyI+PC9zcGFuPiBpcyBhbiBpbnRlZ2VyIGZyb20gPHNwYW4gdi1rYXRleD0iJzAnIj48L3NwYW4+IHRvIDxzcGFuIHYta2F0ZXg9Iic5JyI+PC9zcGFuPiwgd2l0aCA8c3BhbiB2LWthdGV4PSInZF9uIFxcbmVxIDAnIj48L3NwYW4+LiBGb3IgZXhhbXBsZSwKCiAgICAgICAgICAgIDxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNlMmUzZTUiIGNsYXNzPSJtdC0zIG1iLTQgcC0zIj4KICAgICAgICAgICAgICAgIDxkZWVwPkV4YW1wbGUgMi4xPC9kZWVwPgoKICAgICAgICAgICAgICAgIDwhLS1FcXVhdGlvbnMgMi41ICYgMi42LS0+CgoKICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRhYmxlLXJlc3BvbnNpdmUiIHN0eWxlPSJ3aWR0aDoxMDAlOyI+CgogICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9MjM0NTYgXCY9IDJcXHRpbWVzIDEwXjQgKyAzXFx0aW1lcyAxMF4zICsgNFxcdGltZXMgMTBeMiArIDVcXHRpbWVzIDEwXjEgKyA2IFxcdGltZXMgMTBeMCB+fn5+fn5+fn5+flwmKDIuNSlcXFxcIDIzNC41NiBcJj0gMlxcdGltZXMgMTBeMiArIDNcXHRpbWVzIDEwXjEgKyA0XFx0aW1lcyAxMF4wICsgNVxcdGltZXMgMTBeey0xfSArIDYgXFx0aW1lcyAxMF57LTJ9XCYoMi42KVxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aD4KCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KCiAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPCEtLS4vRXF1YXRpb25zIDIuNSAmIDIuNi0tPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIEluIGdlbmVyYWwsIGFuIDxzcGFuIHYta2F0ZXg9IicobisxKSciPjwvc3Bhbj4gZGlnaXQgaW50ZWdlciA8c3BhbiB2LWthdGV4PSInSSciPjwvc3Bhbj4gY2FuIGJlIGV4cHJlc3NlZCBpbiBiYXNlIDxzcGFuIHYta2F0ZXg9IidiJyI+PC9zcGFuPiBhcwoKCiAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjctLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidJID0gKGFfbmFfe24tMX1hX3tuLTJ9XFxsZG90c1xcbGRvdHMgYV8yYV8xYV8wKV9iJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi43KSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjctLT4KICAgICAgICAgICAgSWYgPHNwYW4gdi1rYXRleD0iJ2IgPSAxMCciPjwvc3Bhbj4gdGhlIGRpZ2l0cyA8c3BhbiB2LWthdGV4PSInYV9qJyI+PC9zcGFuPiBjYW4gdGFrZSB2YWx1ZXMgYmV0d2VlbiA8c3BhbiB2LWthdGV4PSInMCciPjwvc3Bhbj4gYW5kIDxzcGFuIHYta2F0ZXg9Iic5IFxcc3BhY2UgKGFfbiBcbmVxIDApJyI+PC9zcGFuPgoKICAgICAgICAgICAgPHVsIHN0eWxlPSJsaXN0LXN0eWxlOm5vbmUiPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgIElmIDxzcGFuIHYta2F0ZXg9IidiID0gMiciPjwvc3Bhbj4gdGhlIGRpZ2l0cyA8c3BhbiB2LWthdGV4PSInYV9qJyI+PC9zcGFuPiBjYW4gZWl0aGVyIGJlIDAgb3IgMS4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgVGhlIGRlY2ltYWwgdmFsdWUgb2YgdGhlIG51bWJlciAod2l0aCBiYXNlIDxzcGFuIHYta2F0ZXg9IidiJyI+PC9zcGFuPikgZ2l2ZW4gaW4gZXF1YXRpb24gKDIuNykgaXMKCiAgICAgICAgICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuOC0tPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ0kgPSBiXm5cXHRpbWVzIGFfbiArIGJee24tMX1cXHRpbWVzIGFfe24tMX0gKyBcXGNkb3RzICsgYl4xIFxcdGltZXMgYV8xICsgYl4wIFxcdGltZXMgYV8wLiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuOCknIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gMi44LS0+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgoKICAgICAgICAgICAgTW9zdCBjb21wdXRlcnMgcmVwcmVzZW50IG51bWJlcnMgYXMgc3VtcyBvZiBtdWx0aXBsZSBwb3dlcnMgb2YgMiAoYSA8aT5iaW5hcnk8L2k+IHN5c3RlbSkuIEluIGEgYmluYXJ5IHN5c3RlbSwgdGhlIG1hdGhlbWF0aWNhbCBleHByZXNzaW9uIG9mIGFuIGludGVnZXIgaXMKCiAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjktLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidJID0gKGFfbmFfe24tMX1hX3tuLTJ9XFxsZG90c1xcbGRvdHMgYV8yYV8xYV8wKV8yJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi45KSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjktLT4KICAgICAgICAgICAgd2hlcmUgPHNwYW4gdi1rYXRleD0iJ2FfaSciPjwvc3Bhbj4gaXMgYSA8aT5iaW5hcnkgYml0PC9pPiwgdGhhdCBpcyAwIG9yIDEuIFRoZSBkZWNpbWFsIHZhbHVlIG9mIGEgYmluYXJ5IG51bWJlciBpcwogICAgICAgICAgICA8IS0tRXF1YXRpb24gMi4xMC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJyBJID0gMl5uYV9uICsgMl57bi0xfWFfe24tMX0gKyBcXGNkb3RzICsgMl4xYV8xICsgMl4wYV8wID0gXFxzdW1fe2s9MH1ee259IDJea2FfayAuJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi4xMCknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gMi4xMC0tPgogICAgICAgICAgICBJZiB0aGUgYmluYXJ5IG51bWJlciBjb250YWlucyBhIGZyYWN0aW9uYWwgcGFydCwgaS5lIGlzIG9mIHRoZSBmb3JtCgogICAgICAgICAgICA8IS0tRXF1YXRpb24gMi4xMS0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ0kgPSAoYV9uYV97bi0xfWFfe24tMn1cXGxkb3RzXFxsZG90cyBhXzJhXzFhXzAuYV97LTF9YV97LTJ9YV97LTN9XFxsZG90cylfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuMTEpJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL0VxdWF0aW9uIDIuMTEtLT4KICAgICAgICAgICAgaXQgY2FuIGJlIHJlcHJlc2VudGVkIGFzCgogICAgICAgICAgICA8IS0tRXF1YXRpb24gMi4xMi0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ0kgPSAyXm5hX24gKyAyXntuLTF9YV97bi0xfSArIFxcY2RvdHMgKyAyXjFhXzEgKyAyXjBhXzAgKyAyXnstMX1hX3stMX0rMl57LTJ9YV97LTJ9ICsgMl57LTN9YV97LTN9ICsgXFxsZG90cyAnIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjEyKSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjEyLS0+CiAgICAgICAgICAgIDwhLS1FeGFwbWxlIDIuMi0tPgogICAgICAgICAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlM2U1IiBjbGFzcz0ibXQtMyBtYi00IHAtMyI+CiAgICAgICAgICAgICAgICA8ZGVlcD5FeGFtcGxlIDIuMjwvZGVlcD4KCgogICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9KDExMDAxKV8yXCY9IDJeNFxcY2RvdCAxICsgMl4zXFxjZG90IDEgKyAyXjJcXGNkb3QgMCArIDJeMSBcXGNkb3QgMCArIDJeMFxcY2RvdCAxIFxcXFwgICAgICAgIFwmPSAxNiArOCArIDAgKyAwICsgMSA9ICgyNSlfezEwfVxcXFwgICAgICAgICBcJiBcXFxcICgwLjAxMTEpXzJcJj0gMl57LTF9XFxjZG90IDAgKyAyXnstMn1cXGNkb3QgMSArIDJeey0zfVxcY2RvdCAxICsgMl57LTR9XFxjZG90IDEgXFxcXCAgICAgICAgXCY9IDAgKyAwLjI1ICsgMC4xMjUgKyAwLjA2MjUgPSAoMC40Mzc1KV97MTB9IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL0V4YW1wbGUgMi4yLS0+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0icHktMyI+CiAgICAgICAgICAgIDxoNCBjbGFzcz0iaDQtcmVzcG9uc2l2ZSBweS0yIGZvbnQtd2VpZ2h0LWJvbGQiPgogICAgICAgICAgICAgICAgMi4xLjEgQ29udmVyc2lvbiBmcm9tIGRlY2ltYWwgbnVtYmVyIHRvIGJpbmFyeSBudW1iZXIKICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHB5LTIiPkNvbnZlcnRpbmcgb2YgdGhlIGludGVnZXIgcGFydDwvaDU+CiAgICAgICAgICAgIEEgZGVjaW1hbCBudW1iZXIgPHNwYW4gdi1rYXRleD0iJ0lfezEwfSciPjwvc3Bhbj4gIGNhbiBiZSByZXByZXNlbnRlZCBpbiBiaW5hcnkgZm9ybSBhcwoKICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuMTMtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidJX3sxMH0gPSAoYV9uYV97bi0xfVxcbGRvdHMgYV8xYV8wKV8yID0gMl5uIGFfbiArIDJee24tMX1hX3tuLTF9K1xcbGRvdHMgKzJeMWFfMSArIDJeMGFfMCA9IChhX25hX3tuLTF9YV97bi0yfVxcbGRvdHNcXGxkb3RzIGFfMmFfMWFfMClfMi4nIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjEzKSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjEyLS0+CiAgICAgICAgICAgIEZvciBleGFtcGxlCiAgICAgICAgICAgIDxkaXYgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNlMmUzZTUiIGNsYXNzPSJtdC0zIG1iLTQgcC0zIj4KICAgICAgICAgICAgICAgIDxkZWVwPkV4YW1wbGUgMi4zPC9kZWVwPgoKICAgICAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjE0ICAmIDIuMTUtLT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfTcgXCY9IDQgKyAyICsgMSA9IDJeMiArMl4xICsgMl4wID0gKDExMSlfMn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+flwmKDIuMTQpXFxcXCAyNVwmPSAxNiArIDggKyAxID0gMl40ICsgMl4zICsgMFxcY2RvdCAyXjIgKyAwIFxcY2RvdCAyXjEgKyAyXjAgPSAoMTEwMDEpXzIgXCYoMi4xNSlcXGVuZHthbGlnbmVkfSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8IS0tRXF1YXRpb24gMi4xNCAgJiAyLjE1LS0+CgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIFRoZSBmb2xsb3dpbmcgcHJvY2VkdXJlIGlzIGEgbW9yZSBnZW5lcmFsIGFwcHJvYWNoIHRoYXQgY2FuIGJlCiAgICAgICAgICAgIHVzZWQgdG8gY29udmVydCBkZWNpbWFsIGludGVnZXJzIHRvIGJpbmFyeSBmb3JtLjxicj4KCiAgICAgICAgICAgIEdpdmVuIGFuIGludGVnZXIgPHNwYW4gdi1rYXRleD0iJ0lfezEwfSciPjwvc3Bhbj4sIGRldGVybWluZSB0aGUgcXVvdGllbnRzIDxzcGFuIHYta2F0ZXg9IidRX2knIj48L3NwYW4+IGFuZCB0aGUgcmVtYWluZGVycyA8c3BhbiB2LWthdGV4PSInUl9pJyI+PC9zcGFuPiBzdWNoIHRoYXQKICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9IElfezEwfVwmPVwmIDJRXzAgKyBSXzBcXFxcICBRXzAgXCY9XCYyUV8xICsgUl8xIFxcXFwgIFFfMSBcJj1cJiAyUV8yICsgUl8yIFxcXFwgXFx2ZG90c1wmIFwmXFx2ZG90cyBcXFxcIFFfe24tMX0gXCY9XCYgMlFfbiArIFJfbiBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgoKCiAgICAgICAgICAgIFRoZSByZW1haW5kZXJzIGFyZSAwcyBhbmQgMXMgYW5kIHRoZSBiaW5hcnkgZm9ybSBmb3IgdGhlIG51bWJlciA8c3BhbiB2LWthdGV4PSInSV97MTB9JyI+PC9zcGFuPiBpcwoKICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuMTYtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidSX25SX3tuLTF9Ul97bi0yfVxcbGRvdHMgUl8xUl8wJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi4xNiknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gMi4xNi0tPgogICAgICAgICAgICBJdCBzaG91bGQgYmUgbm90ZWQgdGhhdAoKICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuMTctLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidSX25SX3tuLTF9Ul97bi0yfVxcbGRvdHMgUl8xUl8wICA9IGFfbmFfe24tMX1hX3tuLTJ9XFxsZG90cyBhXzFhXzAnIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjE3KSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjE3LS0+CiAgICAgICAgICAgIDwhLS1FeGFtcGxlIDIuNC0tPgogICAgICAgICAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlM2U1IiBjbGFzcz0ibXQtMyBtYi00IHAtMyI+CiAgICAgICAgICAgICAgICA8ZGVlcD5FeGFtcGxlIDIuNDwvZGVlcD4KICAgICAgICAgICAgICAgIENvbnZlcnQgdGhlIGZvbGxvd2luZyBkZWNpbWFsIG51bWJlcnMgaW50byBiaW5hcnkgZm9ybQogICAgICAgICAgICAgICAgPG9sIHN0eWxlPSJsaXN0LXN0eWxlOmxvd2VyLWxhdGluIj4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJyg1MylfezEwfSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1rYXRleD0iJygzMTUpX3sxMH0nIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICA8L29sPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXhhcG1sZSAyLjQtLT4KICAgICAgICAgICAgQW5zd2VyOgoKICAgICAgICAgICAgPG9sIHN0eWxlPSJsaXN0LXN0eWxlOmxvd2VyLWxhdGluIj4KICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWthdGV4PSInXFx0ZXh0YmZ7VGhpcyByZXF1aXJlcyBzcGVjaWFsIGF0dGVudGlvbn0gXFx0ZXh0aXR7YXJvdW5kIGxpbmUgNDAwIGluIHRoZSB0ZXggZmlsZX0nIj48L3NwYW4+CgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e2N8cmNjY30gXFxtdWx0aWNvbHVtbnsyfXtyfXtcXHJtIFF1b3RpZW50c31cJiBcJiB7XFxybSBSZW1haW5kZXJzfSBcXFxcIDJcJjUzXCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7XCYgIFxcXFwgXFxjbGluZXsyLTJ9IDJcJjI2XCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7XCYgMSA9IGFfMCBcXFxcIFxcY2xpbmV7Mi0yfSAyXCYxM1wmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcO1wmIDAgPSBhXzEgXFxcXCBcXGNsaW5lezItMn0gMlwmNlwmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcO1wmICAxID0gYV8yIFxcXFwgXFxjbGluZXsyLTJ9IDJcJjNcJiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDtcJiAgMCA9IGFfMyBcXFxcIFxcY2xpbmV7Mi0yfSAyXCYxXCYgXFw7XFw7XDtcXDtcXDtcXDtcXDtcXDtcJiAgMSA9IGFfNCBcXFxcIFxcY2xpbmV7Mi0yfSAyXCYwXCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7XCYgIDEgPSBhXzUgXFxcXCBcXGNsaW5lezItMn0gXFxlbmR7YXJyYXl9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIFRodXMgPHNwYW4gdi1rYXRleD0iJyg1MylfezEwfSciPjwvc3Bhbj4gPSA8c3BhbiB2LWthdGV4PSInKDExMDEwMSlfezJ9JyI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1rYXRleD0iJ1xcdGV4dGJme0hlbmNlIEkgd2lsbCBnaXZlIGl0IHRoYXQgYXR0ZW50aW9uIGxhdGVyfSciPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FycmF5fXtjfHJjY2N9ICBcXG11bHRpY29sdW1uezJ9e3J9e1xccm0gUXVvdGllbnRzfVwmIFwmIHtcXHJtIFJlbWFpbmRlcnN9IFxcXFwgMlwmMzE1XCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7XCYgIFxcXFwgXFxjbGluZXsyLTJ9IDJcJjE1N1wmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcO1wmIDEgPSBhXzAgXFxcXCBcXGNsaW5lezItMn0gMlwmNzhcJiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDtcJiAgMSA9IGFfMSBcXFxcIFxcY2xpbmV7Mi0yfSAyXCYzOVwmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcO1wmICAwID0gYV8yIFxcXFwgXFxjbGluZXsyLTJ9IDJcJjE5XCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7XCYgIDEgPSBhXzMgXFxcXCBcXGNsaW5lezItMn0gMlwmOVwmIFxcO1xcO1xcO1xcO1xcO1xcO1xcO1xcO1wmICAgMSA9IGFfNCBcXFxcIFxcY2xpbmV7Mi0yfSAyXCY0XCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7XCYgICAxID0gYV81IFxcXFwgXFxjbGluZXsyLTJ9IDJcJjJcJiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDtcJiAgMCA9IGFfNiBcXFxcIFxcY2xpbmV7Mi0yfSAyXCYxXCYgXFw7XFw7XFw7XFw7XFw7XFw7XFw7XFw7XCYgICAwID0gYV83IFxcXFwgXFxjbGluZXsyLTJ9IDJcJjBcJiBcXDtcXDtcXDtcXDtcXDtcXDtcXDtcXDtcJiAgIDEgPSBhXzggXFxcXCBcXGNsaW5lezItMn0gXFxlbmR7YXJyYXl9JyI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgIFRodXMgPHNwYW4gdi1rYXRleD0iJygzMTUpX3sxMH0nIj48L3NwYW4+ID0gPHNwYW4gdi1rYXRleD0iJygxMDAxMTEwMTEpX3syfSciPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICA8L29sPgoKICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIHB5LTIiPkNvbnZlcnRpbmcgdGhlIGZyYWN0aW9uYWwgcGFydCAoYmluYXJ5IGZyYWN0aW9uKTwvaDU+CiAgICAgICAgICAgIEluIHRoZSBjYXNlIG9mIGEgZGVjaW1hbCBmcmFjdGlvbiA8c3BhbiB2LWthdGV4PSInSSciPjwvc3Bhbj4gc3VjaCB0aGF0IDxzcGFuIHYta2F0ZXg9IicgMCA8IEkgPCAxJyI+PC9zcGFuPiwKICAgICAgICAgICAgd2Ugbm90ZSB0aGF0IHRoZSBiaW5hcnkgZm9ybSBpcwoKICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuMTgtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidJID0gKDAuZF8xZF8yZF8zXFxsZG90cyBkX3tuLTF9ZF97bn0pXzIgPSBcXGZyYWN7ZF8xfXsyfSArIFxcZnJhY3tkXzJ9ezJeMn0gKyBcXGZyYWN7ZF8zfXsyXjN9ICsgXFxsZG90cyArIFxcZnJhY3tkX259ezJebn0nIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjE4KSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjE4LS0+CiAgICAgICAgICAgIHRoZW4KCiAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjE5LS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInMkkgPSAgZF8xICsgXFxsZWZ0KFxcZnJhY3tkXzJ9ezJ9ICsgXFxmcmFje2RfM317Ml4yfSArIFxcbGRvdHMgKyBcXGZyYWN7ZF9ufXsyXntuLTF9fVxccmlnaHQpJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi4xOSknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gMi4xOS0tPgogICAgICAgICAgICBUaGUgcXVhbnRpdHkgaW4gcGFyZW50aGVzaXMgb24gdGhlIHJpZ2h0IHNpZGUgb2YgZXF1YXRpb24gKDIuMTkpIGlzIGEgcG9zaXRpdmUgbnVtYmVyIGFuZCBpcyBsZXNzIHRoYW4gMS4gVGhlcmVmb3JlIDxzcGFuIHYta2F0ZXg9IidkXzEnIj48L3NwYW4+IGlzCiAgICAgICAgICAgIHRoZSBpbnRlZ2VyIHBhcnQgb2YgPHNwYW4gdi1rYXRleD0iJzJJJyI+PC9zcGFuPiwgZGVub3RlZCA8c3BhbiB2LWthdGV4PSInZF8xPWludCgySSknIj48L3NwYW4+LiBUbyBjb250aW51ZSB0aGUgcHJvY2VzcywgdGFrZSB0aGUgZnJhY3Rpb25zIHBhcnQgb2YgKDIuMTkpIGFuZCB3cml0ZQoKCiAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjIwLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInRl8xID0gZnJhYygySSkgID0gIFxcZnJhY3tkXzJ9ezJ9ICsgXFxmcmFje2RfM317Ml4yfSArIFxcbGRvdHMgKyBcXGZyYWN7ZF9ufXsyXntuLTF9fSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuMjApJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL0VxdWF0aW9uIDIuMjAtLT4KICAgICAgICAgICAgd2hlcmUgPHNwYW4gdi1rYXRleD0iJ2ZyYWMoMkkpJyI+PC9zcGFuPiBpcyB0aGUgZnJhY3Rpb25hbCBwYXJ0IG9mIHRoZSByZWFsCiAgICAgICAgICAgIG51bWJlciA8c3BhbiB2LWthdGV4PSInMkknIj48L3NwYW4+LiBNdWx0aXBseWluZyBib3RoIHNpZGVzIG9mIGVxdWF0aW9uICgyLjIwKSBieSAyIHJlc3VsdHMgaW4KICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuMjEtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicyRl8xID0gZF8yICsgXFxsZWZ0KFxcZnJhY3tkXzN9ezJ9ICsgXFxsZG90cyArIFxcZnJhY3tkX259ezJee24tMn19XFxyaWdodCknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjIxKSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjIxLS0+CiAgICAgICAgICAgIE5vdywgdGFrZSB0aGUgaW50ZWdlciBwYXJ0IG9mIGVxdWF0aW9uICgyLjIxKSBhbmQgb2J0YWluIDxzcGFuIHYta2F0ZXg9IidkXzIgPSBpbnQoMkZfMSknIj48L3NwYW4+LiBUaGlzIHByb2Nlc3MgaXMKICAgICAgICAgICAgY29udGludWVkIGFuZCB0d28gc2VxdWVuY2VzIDxzcGFuIHYta2F0ZXg9Iidce2RfayBcfSciPjwvc3Bhbj4gYW5kIDxzcGFuIHYta2F0ZXg9Iidce0ZfayBcfSciPjwvc3Bhbj4gYXJlIHJlY3Vyc2l2ZWx5IGdlbmVyYXRlZCBzdWNoIHRoYXQKCgogICAgICAgICAgICA8IS0tRXF1YXRpb24gMi4yMi0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ2RfayA9IGludCgyRl97ay0xfSksXFw7XFw7XFw7XFw7XFw7Rl9rID0gZnJhYygyRl97ay0xfSknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjIyKSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjIyLS0+CgoKICAgICAgICAgICAgd2hlcmUgPHNwYW4gdi1rYXRleD0iJ2RfMSA9IGludCgySSknIj48L3NwYW4+IGFuZCA8c3BhbiB2LWthdGV4PSInRl8xID0gZnJhYygySSknIj48L3NwYW4+LgoKCiAgICAgICAgICAgIDwhLS1FeGFtcGxlIDIuNS0tPgogICAgICAgICAgICA8ZGl2IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjZTJlM2U1IiBjbGFzcz0ibXQtMyBtYi00IHAtMyI+CiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+RXhhbXBsZSAyLjU8L3NwYW4+CiAgICAgICAgICAgICAgICBDb252ZXJ0IHRoZSBmb2xsb3dpbmcgZGVjaW1hbCBudW1iZXJzIHRvIGJpbmFyeSBudW1iZXJzCiAgICAgICAgICAgICAgICA8b2wgc3R5bGU9Imxpc3Qtc3R5bGU6bG93ZXItbGF0aW4iPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1rYXRleD0iJygwLjQzNzUpX3sxMH0nIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWthdGV4PSInKDAuNilfezEwfSciPjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgIDwvb2w+CgogICAgICAgICAgICAgICAgQW5zd2VyCiAgICAgICAgICAgICAgICA8b2wgc3R5bGU9Imxpc3Qtc3R5bGU6bG93ZXItbGF0aW4iPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgTGV0IDxzcGFuIHYta2F0ZXg9IidJID0gMC40Mzc1JyI+PC9zcGFuPiwgdGhlbgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YXJyYXl9e2xsbGxsfSAySSA9IDAuODc1IFwmIFxcO1xcO1xcO1xcO1xcO1xcO1wmIGRfMSA9IGludCgwLjg3NSkgPSAwIFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgRl8xID0gZnJhYygwLjg3NSkgPSAwLjg3NSBcXFxcIDJGXzEgPSAxLjc1IFwmIFxcO1xcO1xcO1xcO1xcO1xcO1wmIGRfMiA9IGludCgxLjc1KSAgPSAxXCYgIFxcO1xcO1xcO1xcO1xcO1xcOyBcJiBGXzIgPSBmcmFjKDEuNzUpID0gMC43NSBcXFxcIDJGXzIgPSAxLjUgXCYgXFw7XFw7XFw7XFw7XFw7XFw7XCYgZF8zID0gaW50KDEuNSkgID0gMVwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgRl8zID0gZnJhYygxLjUpID0gMC41IFxcXFwgMkZfMyA9IDEuMCBcJiBcXDtcXDtcXDtcXDtcXDtcXDtcJiBkXzQgPSBpbnQoMS4wKSAgPSAxXCYgIFxcO1xcO1xcO1xcO1xcO1xcOyBcJiBGXzQgPSBmcmFjKDEuMCkgPSAwIFxcXFwgXFxlbmR7YXJyYXl9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgIFRodXMsIDxzcGFuIHYta2F0ZXg9IicoMC40Mzc1KV97MTB9ID0gKDAuMDExMSlfMiciPjwvc3Bhbj4gPGJyPjxicj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIExldCA8c3BhbiB2LWthdGV4PSInSSA9IDAuNiciPjwvc3Bhbj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthcnJheX17bGxsbGx9IDJJID0gMS4yICAgXCYgIFxcO1xcO1xcO1xcO1xcO1xcOyBcJiBkXzEgPSBpbnQoMS4yKSAgPSAxXCYgIFxcO1xcO1xcO1xcO1xcO1xcOyBcJiBGXzEgPSBmcmFjKDEuMikgPSAwLjIgXFxcXCAyRl8xID0gMC40IFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgZF8yID0gaW50KDAuNCkgID0gMFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgRl8yID0gZnJhYygwLjQpID0gMC40XFxcXCAyRl8yID0gMC44IFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgZF8zID0gaW50KDAuOCkgID0gMFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgRl8zID0gZnJhYygwLjgpID0gMC44IFxcXFwgMkZfMyA9IDEuNiBcJiAgXFw7XFw7XFw7XFw7XFw7XFw7IFwmIGRfNCA9IGludCgxLjYpICA9IDFcJiAgXFw7XFw7XFw7XFw7XFw7XFw7IFwmIEZfNCA9IGZyYWMoMS42KSA9IDAuNiBcXFxcIDJGXzQgPSAxLjIgXCYgIFxcO1xcO1xcO1xcO1xcO1xcOyBcJiBkXzUgPSBpbnQoMS4yKSAgPSAxXCYgIFxcO1xcO1xcO1xcO1xcO1xcOyBcJiBGXzUgPSBmcmFjKDEuMikgPSAwLjIgXFxcXCAyRl81ID0gMC40IFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgZF82ID0gaW50KDAuNCkgID0gMFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgRl82ID0gZnJhYygwLjQpID0gMC40XFxcXCAyRl82ID0gMC44IFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgZF83ID0gaW50KDAuOCkgID0gMFwmICBcXDtcXDtcXDtcXDtcXDtcXDsgXCYgRl83ID0gZnJhYygwLjgpID0gMC44IFxcXFwgMkZfNyA9IDEuNiBcJiAgXFw7XFw7XFw7XFw7XFw7XFw7IFwmIGRfOCA9IGludCgxLjYpICA9IDFcJiAgXFw7XFw7XFw7XFw7XFw7XFw7IFwmIEZfOCA9IGZyYWMoMS42KSA9IDAuNiBcXFxcIFxcZW5ke2FycmF5fSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgVGh1cywgPHNwYW4gdi1rYXRleD0iJygwLjYpX3sxMH0gPSAoMC4xMDAxMTAwMVxcbGRvdHMpXzIgPSAoMC5cXG92ZXJsaW5lezEwMDF9KV8yJyI+PC9zcGFuPgoKICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FeGFwbWxlIDIuNS0tPgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0uL1NlY3Rpb24gMi4xLjEtLT4KICAgICAgICA8IS0tU2VjdGlvbiAyLjEuMi0tPgogICAgICAgIDxkaXYgY2xhc3M9InB5LTMiPgogICAgICAgICAgICA8aDQgY2xhc3M9Img0LXJlc3BvbnNpdmUgcHktMiBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgIDIuMS4yIEJpbmFyeSBzaGlmdGluZwogICAgICAgICAgICA8L2g0PgoKICAgICAgICAgICAgQ29uc2lkZXIgdGhlIGJpbmFyeSBudW1iZXIKCiAgICAgICAgICAgIDwhLS1FcXVhdGlvbiAyLjIzLS0+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInUyA9ICgwLjAwMDAwXFxvdmVybGluZXsxMTAwMH0pXzInIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjIzKSciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tLi9FcXVhdGlvbiAyLjIzLS0+CiAgICAgICAgICAgIE11bHRpcGx5aW5nIGJvdGggc2lkZXMgb2YgKDIuMjMpIGJ5ICA8c3BhbiB2LWthdGV4PSInMl41JyI+PC9zcGFuPiBzaGlmdHMgdGhlIGJpbmFyeSBwb2ludCBmaXZlIHBsYWNlcyB0byB0aGUgcmlnaHQgdG8gb2J0YWluCgogICAgICAgICAgICA8IS0tRXF1YXRpb24gMi4yNC0tPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJzMyUyA9ICgwLlxcb3ZlcmxpbmV7MTEwMDB9KV8yJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi4yNCknIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPCEtLS4vRXF1YXRpb24gMi4yNC0tPgogICAgICAgICAgICBNdWx0aXBseWluZyBlcXVhdGlvbiAoMi4yMykgYnkgPHNwYW4gdi1rYXRleD0iJzJeezEwfSciPjwvc3Bhbj4gc2hpZnRzIHRoZSBiaW5hcnkgcG9pbnQgdGVuIHBsYWNlcyB0byB0aGUgcmlnaHQgdG8gZ2l2ZQoKICAgICAgICAgICAgPCEtLUVxdWF0aW9uIDIuMjUtLT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicxMDI0UyA9ICgxMTAwMC5cXG92ZXJsaW5lezExMDAwfSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuMjUpJyI+PC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL0VxdWF0aW9uIDIuMjUtLT4KCgogICAgICAgICAgICBTdWJ0cmFjdGluZyBlcXVhdGlvbiAoMi4yMykgZnJvbSAoMi4yNSkgZ2l2ZXMKCiAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSA5OTJTXCY9KDExMDAwKV8yIFxcXFwgOTkyU1wmPSAyNCBcXFxcICAgU1wmPVxcZnJhY3syNH17OTkyfSA9IFxcZnJhY3szfXsxMjR9IFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CiAgICAgICAgICAgIAoKICAgICAgICAgICAgVGh1cywgPHNwYW4gdi1rYXRleD0iJ1xcIFMgPSAoMC4wMDAwMFxcb3ZlcmxpbmV7MTEwMDB9KV8yICA9IFxcZGlzcGxheXN0eWxle1xcZnJhY3szfXsxMjR9fSciPjwvc3Bhbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tLi9TZWN0aW9uIDIuMS4yLS0+CiAgICA8L3NlY3Rpb24+CiAgICA8IS0tLi9TZWN0aW9uIDIuMSAtLT4KICAgIDwhLS1FeGVyY2ljZSAyLjEtLT4KICAgIDxzZWN0aW9uIGNsYXNzPSJkYXJrLWdyZXktdGV4dCBtYi00IHB0LTMgcHgtMyBteC00IiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjojZmZmM2UwIiBpZD0iZXgtMSI+CiAgICAgICAgPGg0IGNsYXNzPSJoNC1yZXNwb25zaXZlIj5FeGVyY2lzZSAyLjEgIDxzdHJvbmc+RGVjaW1hbCBhbmQgQmluYXJ5IHN5c3RlbTwvc3Ryb25nPjwvaDQ+CiAgICAgICAgPG9sPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICBDb252ZXJ0IHRoZSBmb2xsb3dpbmcgYmluYXJ5IG51bWJlcnMgdG8gdGhlaXIgZGVjaW1hbCBlcXVpdmFsZW50CiAgICAgICAgICAgICAgICA8b2wgc3R5bGU9Imxpc3Qtc3R5bGUtdHlwZTpsb3dlci1sYXRpbjsiPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1hLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzExMDAxJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNlY29uZCBSb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicyNSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1iLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzEwMDAuMDAxJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNlY29uZCBSb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9Iic4LjEyNSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1jLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzExMDExLjAxJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNlY29uZCBSb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicyNy4yNSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1kLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzEwMTEwLjAxMDEnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tU2Vjb25kIFJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzIyLjMxMjUnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tZS0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicxMDAwMTAuMDExJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNlY29uZCBSb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IiczNC40Mzc1JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWYtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgKDEwMTAxLjEwMSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInMjEuNjI1MCciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1nLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJ1xcZGlzcGxheXN0eWxlICguMTAxMDEwMTAxXFxsZG90cylfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgXFxmcmFjezJ9ezN9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWgtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgKC4wMDAxMTAwMTEwMDExMDAxMVxcbGRvdHMpXzInIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tU2Vjb25kIFJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJ1xcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXsxMH0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0taS0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGRpc3BsYXlzdHlsZSAoMTExMTExLi4uMSlfMiwgXFx0ZXh0e3dpdGggcGFyZW50aGVzZXMgZW5jbG9zaW5nIH0gbiBcXHRleHR7MXN9LiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgMl5uIC0gMSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJyPjxicj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC9vbD4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgVXNlIGJpbmFyeSBzaGlmdGluZyB0byBjb252ZXJ0IHRoZSBmb2xsb3dpbmcgYmluYXJ5IG51bWJlcnMgdG8gdGhlaXIgZGVjaW1hbCBlcXVpdmFsZW50CiAgICAgICAgICAgICAgICA8b2wgc3R5bGU9Imxpc3Qtc3R5bGUtdHlwZTpsb3dlci1sYXRpbjsiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgKDAuMFxcb3ZlcmxpbmV7MDAxMX0pXzInIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tU2Vjb25kIFJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJ1xcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXsxMH0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tYi0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGRpc3BsYXlzdHlsZSAoMC5cXG92ZXJsaW5lezEwfSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgXFxmcmFjezJ9ezN9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWMtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgKDAuXFxvdmVybGluZXsxMDAxfSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgXFxmcmFjezN9ezV9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgKDAuMDAwMDBcXG92ZXJsaW5lezExMDAwfSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgXFxmcmFjezN9ezEyNH0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tZS0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGRpc3BsYXlzdHlsZSAoMC4wXFxvdmVybGluZXsxfSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgXGZyYWN7MX17M30nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tZi0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGRpc3BsYXlzdHlsZSAoMC4wXFxvdmVybGluZXsxfSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgXFxmcmFjezF9ezN9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8YnI+PGJyPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L29sPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICBDb252ZXJ0IHRoZSBmb2xsb3dpbmcgZGVjaW1hbCBudW1iZXJzIHRvIHRoZWlyIGJpbmFyeSBlcXVpdmFsZW50CiAgICAgICAgICAgICAgICA8b2wgc3R5bGU9Imxpc3Qtc3R5bGUtdHlwZTpsb3dlci1sYXRpbjsiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWEtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInIDE5MyciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInMTEwMDAwMDEpXzInIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tYi0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicgMzc4MSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInKDExMTAxMTAwMDEwMSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1jLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzAuNSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInKDAuMSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1kLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzAuODEyNSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInKDAuMTEwMSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1lLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzIyLjMxMjUnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tU2Vjb25kIFJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJygxMDExMC4wMTAxKV8yJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWYtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInIDAuNjQwNjI1JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNlY29uZCBSb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicoMC4xMDEwMDEpXzInIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tZy0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicwLjMzMjAzMTI1JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVNlY29uZCBSb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicoMC4wMTAxMDEwMSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1oLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJ1xcZGlzcGxheXN0eWxle1xcZnJhY3szfXs1fX0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tU2Vjb25kIFJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJygwLlxcb3ZlcmxpbmV7MTAwMX0pXzInIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tai0tPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tQ29udGFpbmVyIGZsdWlkLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lci1mbHVpZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1GaXJzdCByb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGRpc3BsYXlzdHlsZXtcXGZyYWN7N317MTZ9fSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1TZWNvbmQgUm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInKDAuMDExMSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1rLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Db250YWluZXIgZmx1aWQtLT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS1Sb3ctLT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUZpcnN0IHJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJ1xcZGlzcGxheXN0eWxle1xcZnJhY3s1fXs4fX0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tU2Vjb25kIFJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJygwLjEwMSlfMiciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgoKCgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLWstLT4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLUNvbnRhaW5lciBmbHVpZC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLVJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tRmlyc3Qgcm93LS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGV7XFxmcmFjezd9ezEwfX0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tU2Vjb25kIFJvdy0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJygwLjFcXG92ZXJsaW5lezAxMTB9KV8yJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CgoKICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgPC9vbD4KCiAgICA8L3NlY3Rpb24+CgogICAgPCEtLS4vRXhlcmNpc2UgMi4xLS0+CiAgICA8IS0tc2VjdGlvbiAyLjItLT4KICAgIDxzZWN0aW9uIGNsYXNzPSJkYXJrLWdyZXktdGV4dCBtYi00IHB0LTMgcHgtMyBteC00Ij4KICAgICAgICA8aDQgY2xhc3M9Img0LXJlc3BvbnNpdmUgcHQtMiBmb250LXdlaWdodC1ib2xkIGJsdWUtdGV4dCI+CiAgICAgICAgICAgIDIuMiBSZXByZXNlbnRpbmcgTnVtYmVycwogICAgICAgIDwvaDQ+CiAgICAgICAgPGhyIGNsYXNzPSJibHVlIG1iLTQgbXQtMCAiPgogICAgICAgIEluIHRoaXMgY2hhcHRlciB3ZSBleHBsYWluIHRoZSBkaWZmZXJlbnQgd2F5cyBpbiB3aGljaCBudW1iZXJzCiAgICAgICAgY2FuIGJlIHJlcHJlc2VudGVkIGFuZCBob3cgY29tcHV0ZXJzIHN0b3JlIG51bWJlcnMgYW5kIHdlIGRldmVsb3AKICAgICAgICB0aGUgYmFzaWMgaWRlYXMgb2Ygcm91bmRvZmYgZXJyb3JzLgoKICAgICAgICA8IS0tU2VjdGlvbiAyLjIuMS0tPgogICAgICAgIDxkaXYgY2xhc3M9InB5LTMiPgogICAgICAgICAgICA8aDQgY2xhc3M9Img0LXJlc3BvbnNpdmUgcHktMiBmb250LXdlaWdodC1ib2xkIj4KICAgICAgICAgICAgICAgIDIuMS4yIEZsb2F0aW5nLVBvaW50IFJlcHJlc2VudGF0aW9uIGFuZCBFcnJvcnMKICAgICAgICAgICAgPC9oND4KCiAgICAgICAgICAgIFRoZSBzdGFuZGFyZCB3YXkgb2YgcmVwcmVzZW50aW5nIGEgcG9zaXRpdmUgcmVhbAogICAgICAgICAgICBudW1iZXIgaW4gZGVjaW1hbCBmb3JtIGlzIHdpdGggYW4gaW50ZWdlciBwYXJ0LAogICAgICAgICAgICBhIGZyYWN0aW9uYWwgcGFydCwgYW5kIGEgZGVjaW1hbCBwb2ludCBiZXR3ZWVuCiAgICAgICAgICAgIHRoZW0gZS5nIDEyLjQ4NDU3NCwgMC4wMDQ4NTg1LCAzOTQ3MC45ODIzMzEuCiAgICAgICAgICAgIEluIDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5TY2llbnRpZmljIG5vdGF0aW9uPC9zcGFuPiwgbnVtYmVycwogICAgICAgICAgICBhcmUgcmVwcmVzZW50ZWQgaW4gdGVybXMgb2YgYSA8aT5zaWduPC9pPiwKICAgICAgICAgICAgYW4gPGk+ZXhwb25lbnQ8L2k+LCBhbmQgYSA8aT5tYW50aXNzYTwvaT4uCiAgICAgICAgICAgIEZvciBleGFtcGxlLCBhbnkgbm9uemVybyBkZWNpbWFsIG51bWJlciA8c3BhbiB2LWthdGV4PSIneCciPjwvc3Bhbj4gY2FuIGJlIHdyaXR0ZW4gaW4gYSB1bmlxdWUgd2F5IGFzCgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ3ggPSBcXHNpZ21hXFxjZG90XFxiYXJ7eH0gXFx0aW1lcyAxMF5lLFxcO1xcO1xcO1xcO1xcOyAxIFxcbGVxIFxcYmFye3h9IDwgMTAnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjI2KSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CgoKCiAgICAgICAgICAgIHdoZXJlIDxzcGFuIHYta2F0ZXg9IidcXHNpZ21hJyI+PC9zcGFuPiByZXByZXNlbnRzIHRoZQogICAgICAgICAgICBzaWduIChpLmUgKzEgb3IgLTEpLCA8c3BhbiB2LWthdGV4PSInXFxiYXJ7eH0nIj48L3NwYW4+IGlzIHRoZQogICAgICAgICAgICBtYW50aXNzYSwgYW5kIDxzcGFuIHYta2F0ZXg9IidlJyI+PC9zcGFuPiBpcyB0aGUgZXhwb25lbnQuCgogICAgICAgICAgICA8IS0tRXhhbXBsZSAyLjYtLT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNSIgY2xhc3M9Im10LTMgbWItNCBwLTMiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkV4YW1wbGUgMi42PC9zcGFuPgogICAgICAgICAgICAgICAgUmVwcmVzZW50IHRoZSBmb2xsb3dpbmcgbnVtYmVycyAxMi40ODQ1NzQsIDAuMDA0ODU4NSwgMzk0NzAuOTgyMzMxIGluIHNjaWVudGlmaWMgbm90YXRpb24KCiAgICAgICAgICAgICAgICA8YnI+PGJyPgoKICAgICAgICAgICAgICAgIEFuc3dlcjogV2Ugc2hpZnQgdGhlIGRlY2ltYWwgcG9pbnQgaW4gc3VjaCBhIHdheSB0aGF0IHRoZSBtYW50aXNzYSBmYWxscyBiZXR3ZWVuIDEgYW5kIDEwLgogICAgICAgICAgICAgICAgPGJyPjxicj4KCiAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGJlZ2lue2FsaWduZWR9IDEyLjQ4NDU3NCBcJj0gKzEuMjQ4NDU3NCBcXHRpbWVzIDEwXjEsXFw7XFw7XFw7KFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgb25jZX0pIFxcXFwgMC4wMDQ4NTg1IFwmPSArNC44NTg1IFxcdGltZXMgMTBeey0zfSxcXDtcXDtcXDsoXFx0ZXh0cm17U2hpZnQgZGVjaW1hbCB0byB0aGUgcmlnaHQgdGhyZWUgdGltZXN9KSBcXFxcIDM5NDcwLjk4MjMzMVwmPSszLjk0NzA5ODIzMzEgXFx0aW1lcyAxMF57NH0sXFw7XFw7XFw7KFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgZm91ciB0aW1lc30pIFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CiAgICAgICAgICAgICAgCgogICAgICAgICAgICAgICAgPGJyPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL0V4YW1wbGUgMi42LS0+CiAgICAgICAgICAgIEFub3RoZXIgZm9ybSwgY2FsbGVkIHRoZSA8c3BhbiBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICBub3JtYWxpemVkCiAgICAgICAgICAgICAgICBzY2llbnRpZmljIG5vdGF0aW9uCiAgICAgICAgICAgIDwvc3Bhbj4sIGlzIG9idGFpbmVkIGJ5IHNoaWZ0aW5nIHRoZSBkZWNpbWFsCiAgICAgICAgICAgIHBvaW50IGFuZCBzdXBwbHlpbmcgdGhlIGFwcHJvcHJpYXRlIHBvd2VycyBvZiAxMC4gSW4gdGhpcyB0eXBlCiAgICAgICAgICAgIG9mIHJlcHJlc2VudGF0aW9uLCB0aGUgbnVtYmVyIGlzIHJlcHJlc2VudGVkIGJ5IGEgZnJhY3Rpb24KICAgICAgICAgICAgbXVsdGlwbGllZCBieSA8c3BhbiB2LWthdGV4PSInMTBebiciPjwvc3Bhbj4sIGFuZCB0aGUgbGVhZGluZwogICAgICAgICAgICBkaWdpdCBpbiB0aGUgZnJhY3Rpb24gaXMgbm90IHplcm8uCgogICAgICAgICAgICBGb3IgZXhhbXBsZSwgYW55IG5vbnplcm8gZGVjaW1hbCBudW1iZXIgPHNwYW4gdi1rYXRleD0iJ3gnIj48L3NwYW4+IGNhbgogICAgICAgICAgICBiZSB3cml0dGVuIGluIGEgdW5pcXVlIHdheSBhcwogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ3ggPSBcXHNpZ21hXFxjZG90XFxiYXJ7eH0gXFx0aW1lcyAxMF5lLFxcO1xcO1xcO1xcO1xcOyBcXGZyYWN7MX17MTB9IFxcbGVxIFxcYmFye3h9IDwgMSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuMjcpJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIFRodXMsIHRoZSBudW1iZXJzIGluIGV4YW1wbGUgMi42IGhhdmUgdGhlIGZvbGxvd2luZyByZXByZXNlbnRhdGlvbnMKICAgICAgICAgICAgPGJyIC8+IDxiciAvPgogICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGJlZ2lue2FsaWduZWR9IDEyLjQ4NDU3NCBcJj0gMC4xMjQ4NDU3NCBcXHRpbWVzIDEwXjIsXFw7XFw7XFw7KFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgdHdvIHRpbWVzfSkgXFxcXCAwLjAwNDg1ODUgXCY9IDAuNDg1ODUgXFx0aW1lcyAxMF57LTJ9LFxcO1xcO1xcOyhcXHRleHRybXtTaGlmdCBkZWNpbWFsIHRvIHRoZSByaWdodCB0d28gdGltZXN9KSBcXFxcIDM5NDcwLjk4MjMzMVwmPTAuMzk0NzA5ODIzMzEgXFx0aW1lcyAxMF57NX0sXFw7XFw7XFw7KFxcdGV4dHJte1NoaWZ0IGRlY2ltYWwgdG8gdGhlIGxlZnQgZml2ZSB0aW1lc30pIFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CiAgICAgICAgIAogICAgICAgICAgICA8YnIgLz48YnIgLz4KICAgICAgICAgICAgSW4gdGhlIGNvbnRleHQgb2YgY29tcHV0ZXIgc2NpZW5jZSwgbm9ybWFsaXplZCBzY2llbnRpZmljCiAgICAgICAgICAgIG5vdGF0aW9uIGlzIGFsc28gY2FsbGVkIDxzcGFuIGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj4gbm9ybWFsaXplZCBmbG9hdGluZyBwb2ludC1yZXByZXNlbnRhdGlvbjwvc3Bhbj4uCiAgICAgICAgICAgIEluIGEgY29tcHV0ZXIncyBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiwgYWxsIG5vbnplcm8gZmxvYXRpbmctcG9pbnQgbnVtYmVyCiAgICAgICAgICAgIGFyZSBub3JtYWxpc2VkIHdpdGggYmFzZXMgb2YgMiwgaS5lIHVzaW5nIHRoZSA8aT5iaW5hcnkgc3lzdGVtPC9pPi4KICAgICAgICAgICAgVGhlIGZsb2F0aW5nIHBvaW50IHJlcHJlc2VudGF0aW9uIGluIHRoZSBiaW5hcnkgc3lzdGVtIGlzIHNpbWlsYXIgdG8KICAgICAgICAgICAgdGhhdCBpbiB0aGUgZGVjaW1hbCBzeXN0ZW0uIElmIDxzcGFuIHYta2F0ZXg9Iid4JyI+PC9zcGFuPiBpcyBhIG5vbi16ZXJvIG51bWJlciwKICAgICAgICAgICAgaXQgY2FuIGJlIHdyaXR0ZW4gYXMKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSIneCA9IFxccG0gcSBcXHRpbWVzIDJebSxcXDtcXDtcXDtcXDtcXDtcXDsgXFxsZWZ0KFxcZnJhY3sxfXsyfSBcXGxlcSBxIDwgMSBcXHJpZ2h0KSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDIuMjgpJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIFRoZSBtYW50aXNzYSA8c3BhbiB2LWthdGV4PSIncSciPjwvc3Bhbj4gaXMgZXhwcmVzc2VkIGFzIGEKICAgICAgICAgICAgc2VxdWVuY2Ugb2YgemVyb3Mgb3Igb25lcyBpbiB0aGUgZm9ybQogICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJyBxID0gMC5iXzFiXzJiXzMnIj48L2Rpdj4KCiAgICAgICAgICAgIHdoZXJlIDxzcGFuIHYta2F0ZXg9IidiXzEgXFxuZXEgMCciPjwvc3Bhbj4uCgogICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgIFRvIGEgY29tcHV0ZXIsIHRoZSBhYmlsaXR5IHRvIGNvbXBsZXRlbHkgcmVwcmVzZW50CiAgICAgICAgICAgICAgICBhIG51bWJlcidzIG1hbnRpc3NhIGFuZCBleHBvbmVudCBpcyBsaW1pdGVkLgogICAgICAgICAgICAgICAgQXMgYSByZXN1bHQgbW9zdCByZWFsIG51bWJlcnMgY2Fubm90IGJlIHJlcHJlc2VudGVkCiAgICAgICAgICAgICAgICBleGFjdGx5IGluIGEgY29tcHV0ZXIuIEZ1cnRoZXJtb3JlLCBudW1iZXJzIG1heSBiZQogICAgICAgICAgICAgICAgZWl0aGVyIHRvbyBsYXJnZSBvciB0b28gc21hbGwgdG8gYmUgcmVwcmVzZW50YWJsZS4KICAgICAgICAgICAgICAgIFRoZSByZWFsIG51bWJlcnMgdGhhdCBhcmUgcmVwcmVzZW50YWJsZSBpbiBhIGNvbXB1dGVyCiAgICAgICAgICAgICAgICBhcmUgY2FsbGVkIDxkZWVwPm1hY2hpbmUgbnVtYmVyczwvZGVlcD4uIEEgY29tcHV0ZXIgd2lsbAogICAgICAgICAgICAgICAgZGVzaWduYXRlIGEgZmluaXRlIG51bWJlciBvZiBiaW5hcnkgImJpdHMiIHRvCiAgICAgICAgICAgICAgICByZXByZXNlbnQgYSBudW1iZXIgKGkuZSBpdCB1c2VzIGEgZGlzY3JldGUgc2V0CiAgICAgICAgICAgICAgICBvZiBudW1iZXJzIG5vdCBhIGNvbnRpbnV1bSkuIFRvIGlsbHVzdHJhdGUsIGxldCB1cwogICAgICAgICAgICAgICAgdGFrZSBhbiBleGFtcGxlLCBpbiB3aGljaCB0aGUgZmxvYXRpbmctcG9pbnQgbnVtYmVycwogICAgICAgICAgICAgICAgbXVzdCBiZSBvZiB0aGUgZm9ybSA8c3BhbiB2LWthdGV4PSIneCA9IFxccG0gKDAuYl8xYl8yKSBcXHRpbWVzIDJee1xccG0gbX0nIj48L3NwYW4+LAogICAgICAgICAgICAgICAgd2hlcmUgPHNwYW4gdi1rYXRleD0iJ2JfMSciPjwvc3Bhbj4sIDxzcGFuIHYta2F0ZXg9IidiXzInIj48L3NwYW4+IGFuZCA8c3BhbiB2LWthdGV4PSInbSciPjwvc3Bhbj4gYXJlIGFsbG93ZWQgdG8gaGF2ZSBvbmx5IHRoZSB2YWx1ZQogICAgICAgICAgICAgICAgMCBvciAxLgogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICA8IS0tRXhhbXBsZSAyLjctLT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNSIgY2xhc3M9Im10LTMgbWItNCBwLTMiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkV4YW1wbGUgMi43PC9zcGFuPgoKICAgICAgICAgICAgICAgIExpc3QgYWxsIHRoZSBmbG9hdGluZy1wb2ludCBudW1iZXJzIHRoYXQgY2FuIGJlIGV4cHJlc3NlZCBpbiB0aGUgZm9ybQogICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9Iid4ID0gXFxwbSAoMC5iXzFiXzIpXzIgXFx0aW1lcyAyXntcXHBtIGt9LFxcO1xcO1xcO1xcO1xcO1xcOyhrLGJfaSBcXGluIFxceyAwLCAxXFx9KSciPjwvZGl2PgoKCgogICAgICAgICAgICAgICAgQW5zd2VyOiBUaGVyZSBhcmUgdHdvIGNob2ljZXMgZm9yIHRoZSA8c3BhbiB2LWthdGV4PSInXFxwbSciPjwvc3Bhbj4sIHR3byBjaG9pY2VzCiAgICAgICAgICAgICAgICBmb3IgPHNwYW4gdi1rYXRleD0iJ2JfMSciPjwvc3Bhbj4sIHR3byBjaG9pY2VzIGZvciA8c3BhbiB2LWthdGV4PSInYl8yJyI+PC9zcGFuPiBhbmQgdGhyZWUgY2hvaWNlcyBmb3IKICAgICAgICAgICAgICAgIHRoZSBleHBvbmVudC4gVGh1cywgYXQgZmlyc3Qgb25lIHdvdWxkCiAgICAgICAgICAgICAgICBleHBlY3QgPHNwYW4gdi1rYXRleD0iJzIgXFx0aW1lcyAyIFxcdGltZXMgMiBcXHRpbWVzIDM9MjQnIj48L3NwYW4+IGRpZmZlcmVudAogICAgICAgICAgICAgICAgbnVtYmVycy4gSG93ZXZlciwgdGhlcmUgaXMgc29tZSBkdXBsaWNhdGlvbi4gRm9yCiAgICAgICAgICAgICAgICBleGFtcGxlLCB0aGUgcG9zaXRpdmUgbnVtYmVycyBhcmUgYXMgZm9sbG93cwoKICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthcnJheX17Y2NjY2NjY2NjY2NjY30gMC4wMCBcXHRpbWVzIDJeMCBcJj1cJjAgXCZ+flwmfn5cJjAuMDAgXFx0aW1lcyAyXjEgXCYgPSBcJiAwIFwmfn5cJn5+MC4wMCBcXHRpbWVzIDJeey0xfSA9IDAgXFxcXCBcXFxcIDAuMDEgXFx0aW1lcyAyXjAgXCY9XCYgIFxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXs0fSBcJn5+XCZ+flwmMC4wMSBcXHRpbWVzIDJeMSBcJiA9IFwmIFxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXsyfSBcJn5+XCZ+fjAuMDEgXFx0aW1lcyAyXnstMX0gPSBcXGRpc3BsYXlzdHlsZSAgXFxmcmFjezF9ezh9IFxcXFwgXFxcXCAwLjEwIFxcdGltZXMgMl4wIFwmPVwmIFxcZGlzcGxheXN0eWxlIFxcZnJhY3sxfXsyfSBcJn5+XCZ+flwmMC4xMCBcXHRpbWVzIDJeMSBcJiA9IFwmMSBcJn5+XCZ+fjAuMTAgXFx0aW1lcyAyXnstMX0gPSBcXGRpc3BsYXlzdHlsZSBcXGZyYWN7MX17NH0gXFxcXCBcXFxcIDAuMTEgXFx0aW1lcyAyXjAgXCY9XCYgXFxkaXNwbGF5c3R5bGUgXFxmcmFjezN9ezR9IFwmfn5cJn5+XCYwLjExIFxcdGltZXMgMl4xIFwmID0gXCYgXFxkaXNwbGF5c3R5bGUgXFxmcmFjezN9ezJ9IFwmfn5cJn5+MC4xMSBcXHRpbWVzIDJeey0xfSAgPSBcXGRpc3BsYXlzdHlsZSBcXGZyYWN7M317OH1cXFxcIFxcZW5ke2FycmF5fSciPjwvZGl2PgogICAgICAgICAgICAgICAgVGhlIHBvc2l0aXZlIG51bWJlcnMgb2J0YWluZWQgYXJlIHNob3duIG9uIHRoZSBsaW5lIGJlbG93CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPCEtLVJlbWVtYmVyIHRvIGluc2VydCB0aGUgbGluZSBiZWxvdy0tPgogICAgICAgICAgICA8IS0tYWZ0ZXIgaW5zZXRpbmcgdGhlIGxpbmUgcmVtb3ZlIHRoaXMgcGFyYWdyYXBoLS0+CiAgICAgICAgICAgIDxwIHN0eWxlPSJmb250LXNpemU6MzBweDsgYmFja2dyb3VuZC1jb2xvcjpjb3JhbCI+CiAgICAgICAgICAgICAgICB3ZSBzaG91bGQgYmUgaGF2aW5nIGEKICAgICAgICAgICAgICAgIGxpbmUgaGVyZSAsIHdlIHdpbGwgZGVhbCB3aXRoIHRoYXQgbGF0ZXIKICAgICAgICAgICAgPC9wPgoKCiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgQWx0b2dldGhlciB0aGVyZSBhcmUgdGhpcnRlZW4gZGlzdGluY3QgbnVtYmVycwogICAgICAgICAgICAgICAgaW4gdGhlIHN5c3RlbS4gT25lIGRyYXdiYWNrIGFzc29jaWF0ZWQgd2l0aCB0aGUKICAgICAgICAgICAgICAgIHJlcHJlc2VudGFibGUgbnVtYmVycyBiZWluZyBhIGZpbml0ZSBzZXQgaXMgdGhhdAogICAgICAgICAgICAgICAgaXQgaXMgYWxzbyA8aT5ib3VuZGVkPC9pPi4gSWYgaW4gdGhlIGNvdXJzZSBvZgogICAgICAgICAgICAgICAgYSBjb21wdXRhdGlvbiwgYSBudW1iZXIgPHNwYW4gdi1rYXRleD0iJ3gnIj48L3NwYW4+IGlzIHByb2R1Y2VkIGluIHRoZQogICAgICAgICAgICAgICAgZm9ybSA8c3BhbiB2LWthdGV4PSIneFxccG0gcSBcXHRpbWVzIDJebSciPjwvc3Bhbj4sIHRoZW4gd2UgaGF2ZSA8ZGVlcD5vdmVyZmxvdzwvZGVlcD4KICAgICAgICAgICAgICAgIHdoZW4gPHNwYW4gdi1rYXRleD0iJ20nIj48L3NwYW4+IGlzIG91dHNpZGUgdGhlIHBvc2l0aXZlIGVuZCBvZiB0aGUgY29tcHV0ZXIncwogICAgICAgICAgICAgICAgcGVybWlzc2libGUgcmFuZ2UgYW5kIGFuIDxkZWVwPnVuZGVyZmxvdzwvZGVlcD4gd2hlbiA8c3BhbiB2LWthdGV4PSInbSciPjwvc3Bhbj4gaXMKICAgICAgICAgICAgICAgIGJleW9uZCB0aGUgbmVnYXRpdmUgZW5kIG9mIHRoZSBleHBvbmVudGlhbCByYW5nZS4KICAgICAgICAgICAgICAgIEdlbmVyYWxseSBhbiA8aT5vdmVyZmxvdzwvaT4gcmVzdWx0cyBpbgogICAgICAgICAgICAgICAgYSA8aT5mYXRhbCBlcnJvcjwvaT4gKG9yIDxpPiBleGNlcHRpb248L2k+KSBhbmQKICAgICAgICAgICAgICAgIG5vcm1hbCBleGVjdXRpb24gb2YgdGhlIHByb2dyYW0gc3RvcHMuIEFuIHVuZGVyZmxvdywKICAgICAgICAgICAgICAgIGhvd2V2ZXIsIGlzIHRyZWF0ZWQgYXV0b21hdGljYWxseSBieSBzZXR0aW5nIDxzcGFuIHYta2F0ZXg9Iid4JyI+PC9zcGFuPiB0bwogICAgICAgICAgICAgICAgemVybyB3aXRob3V0IGFueSBpbnRlcnJ1cHRpb24gb2YgdGhlIHByb2dyYW0uCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgSW4gYSBjb21wdXRlciB3aG9zZSBmbG9hdGluZyBwb2ludCBudW1iZXJzCiAgICAgICAgICAgIGFyZSByZXN0cmljdGVkIHRvIHRoZSBmb3JtIGluIGV4YW1wbGUgMi43LCBhbnkKICAgICAgICAgICAgbnVtYmVyIGNsb3NlciB0byB6ZXJvIHRoYW4gIDxzcGFuIHYta2F0ZXg9IidcXGZyYWN7MX17OH0nIj48L3NwYW4+IHdvdWxkIHVuZGVyZmxvdwogICAgICAgICAgICB0byB6ZXJvLCBhbmQgYW55IG51bWJlciBvdXRzaWRlIHRoZSByYW5nZSAtMS41IHRvIDEuNSB3b3VsZAogICAgICAgICAgICBvdmVyZmxvdyB0byBtYWNoaW5lIGluZmluaXR5LgogICAgICAgIDwvZGl2PgogICAgICAgIDwhLS0uL1NlY3Rpb24gMi4yLjEtLT4KICAgICAgICA8IS0tU2VjdGlvbiAyLjIuMi0tPgogICAgICAgIDxkaXYgY2xhc3M9InB5LTMiPgogICAgICAgICAgICA8aDQgY2xhc3M9Img0LXJlc3BvbnNpdmUgZm9udC13ZWlnaHQtYm9sZCI+CiAgICAgICAgICAgICAgICAyLjIuMiBTaW5nbGUtUHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50IGZvcm0KICAgICAgICAgICAgPC9oND4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICBUaGUgSUVFRSAoSW5zdGl0dXRlIG9mIEVsZWN0cmljYWwgYW5kIEVsZWN0cm9uaWNzIEVuZ2luZWVycykKICAgICAgICAgICAgICAgIGhhcyBwcm9kdWNlZCBhIHN0YW5kYXJkIGZvciBmbG9hdGluZyBwb2ludCBhcml0aG1ldGljLgogICAgICAgICAgICAgICAgVGhpcyBzdGFuZGFyZCBzcGVjaWZpZXMgaG93IHNpbmdsZSBwcmVjaXNpb24gKDMyIGJpdCkKICAgICAgICAgICAgICAgIGFuZCBkb3VibGUgcHJlY2lzaW9uICg2NCBiaXQpIGZsb2F0aW5nIHBvaW50IG51bWJlcnMKICAgICAgICAgICAgICAgIGFyZSB0byBiZSByZXByZXNlbnRlZCwgYXMgd2VsbCBhcyBob3cgYXJpdGhtZXRpYwogICAgICAgICAgICAgICAgc2hvdWxkIGJlIGNhcnJpZWQgb3V0IG9uIHRoZW0uCgogICAgICAgICAgICA8L3A+CgogICAgICAgICAgICBUaGUgSUVFRSBzaW5nbGUgcHJlY2lzaW9uIGZsb2F0aW5nIHBvaW50CiAgICAgICAgICAgIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uIHJlcXVpcmVzIGEgMzIgYml0IHdvcmQsCiAgICAgICAgICAgIHdoaWNoIG1heSBiZSByZXByZXNlbnRlZCBhcyBudW1iZXJlZCBmcm9tIDAgdG8gMzEsCiAgICAgICAgICAgIGxlZnQgdG8gcmlnaHQuIFRoZSBmaXJzdCBiaXQgaXMgdGhlIDxpPnNpZ24gYml0PC9pPiwKICAgICAgICAgICAgPHNwYW4gdi1rYXRleD0iJ3MnIj48L3NwYW4+LCB0aGUgbmV4dCBlaWdodCBiaXRzIGFyZSB0aGUgPGk+ZXhwb25lbnQgYml0czwvaT4sCiAgICAgICAgICAgIDxpPmU8L2k+LCBhbmQgdGhlIGZpbmFsIDIzIGJpdHMgYXJlIHRoZSBmcmFjdGlvbiA8aT5mPC9pPi4KICAgICAgICAgICAgSW4gc2luZ2xlLXByZWNpc2lvbiBmbG9hdGluZyBwb2ludCBhICBtYWNoaW5lIG51bWJlciBjYW4KICAgICAgICAgICAgYmUgcmVwcmVzZW50ZWQgYXMKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKC0xKV5zIFxcdGltZXMgMl57ZS0xMjd9XFx0aW1lcyAoMS5mKV8yJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi4yOSknIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgTm90ZSB0aGF0IDxzcGFuIHYta2F0ZXg9IidzID0gMCciPjwvc3Bhbj4gY29ycmVzcG9uZHMgdG8gYSBwb3NpdGl2ZSBtYW50aXNzYQogICAgICAgICAgICBhbmQgPHNwYW4gdi1rYXRleD0iJ3M9MSciPjwvc3Bhbj4gY29ycmVzcG9uZHMgdG8gYSBuZWdhdGl2ZSBtYW50aXNzYS4gRWFjaAogICAgICAgICAgICBmbG9hdGluZyBwb2ludCBzaW5nbGUgcHJlY2lzaW9uIHdvcmQgaXMgcGFydGl0aW9uZWQKICAgICAgICAgICAgYXMgaW4gdGhlIGRpYWdyYW0gYmVsb3c6CgogICAgICAgICAgICA8IS0tYWZ0ZXIgZGVmaW5pbmcgdGhlIGRpYWdyYW0gcmVtb3ZlIHRoaXMgcGFyYWdyYXBoLS0+CiAgICAgICAgICAgIDxwIHN0eWxlPSJmb250LXNpemU6MzBweDsgYmFja2dyb3VuZC1jb2xvcjpjb3JhbCI+CiAgICAgICAgICAgICAgICB3ZSBzaG91bGQgYmUKICAgICAgICAgICAgICAgIGhhdmluZyBhIGRpYWdyYW0gaGVyZSAsIHdlIHdpbGwgZGVhbCB3aXRoIHRoYXQgbGF0ZXIKICAgICAgICAgICAgPC9wPgoKCiAgICAgICAgICAgIFRoZSBsYXJnZXN0IHZhbHVlIG9mIHRoZSBleHBvbmVudCA8c3BhbiB2LWthdGV4PSInZSciPjwvc3Bhbj4gIGluIHRoZSBzaW5nbGUgcHJlY2lzaW9uIHJlcHJlc2VudGF0aW9uIGlzCiAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInKDExfjExMX4xMTEpXzIgPSAyXjcgKyAyXjYgKyAyXjUgKyAyXjQgICsgMl4zICsgMl4yICsgMl4xICsgMl4wID0gMjU1JyI+PC9kaXY+CgogICAgICAgICAgICBUaHVzIHZhbHVlIG9mIHRoZSBleHBvbmVudCAgPHNwYW4gdi1rYXRleD0iJ2UnIj48L3NwYW4+ICBpcyByZXN0cmljdGVkIGJ5IHRoZSBpbmVxdWFsaXR5CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInMCA8IGUgPCAoMTF+MTExfjExMSlfMiA9ICAyNTUnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjMwKSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICBUaGUgdmFsdWVzIDAgYW5kIDI1NSBhcmUgcmVzZXJ2ZWQgZm9yIHNwZWNpYWwgY2FzZXMsIGluY2x1ZGluZyAgPHNwYW4gdi1rYXRleD0iJ1xccG0gMCciPjwvc3Bhbj4gYW5kIDxzcGFuIHYta2F0ZXg9IidcXHBtIFxcaW5mdHknIj48L3NwYW4+LCByZXNwZWN0aXZlbHkuCiAgICAgICAgICAgIEhlbmNlLCB0aGUgYWN0dWFsIGV4cG9uZW50IG9mIHRoZSBudW1iZXIgaXMgcmVzdHJpY3RlZCBieSB0aGUgaW5lcXVhbGl0eQoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IictMTI2IFxcbGVxIGUgLSAxMjcgIFxcbGVxIDEyNy4nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJygyLjMxKSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICBTaW1pbGFybHksIGl0IGNhbiBiZSBzaG93biB0aGF0IHRoZSBtYW50aXNzYSBvZiBlYWNoIG5vbnplcm8gbnVtYmVyIGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGluZXF1YWxpdHkKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInMSBcXGxlcSAoMS5mKV8yIFxcbGVxICgxLjExMX4xMTF+MTExfjExMX4xMTF+MTExfjExMX4xMSlfMiA9IDIgLSAyXnstMjN9JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMi4zMiknIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgTm90ZSB0aGF0CiAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInXFxiZWdpbnthbGlnbmVkfSAxLjExMX4xMTF+MTExfjExMX4xMTF+MTExfjExMX4xMSBcJj0gMl4wICsgXFxvdmVyYnJhY2V7Ml57LTF9ICsgMl57LTJ9ICsgXFxjZG90cyArIDJeey0yM319XntcXHJtIDIzfiB0ZXJtc31cXFxcIFwmPSBcXGRpc3BsYXlzdHlsZSAxICsgMl57LTF9XFxmcmFje1sxIC0gKDJeey0xfSleezIzfV19eygxLTJeey0xfSl9XFxcXCBcJj0gMiAtIDJeey0yM30gXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KICAgICAgICAgICAgCgogICAgICAgICAgICBUaGUgbGFyZ2VzdCBudW1iZXIgcmVwcmVzZW50YWJsZSBpcyB0aGVyZWZvcmUKICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicoMiAtIDJeey0yM30pMl57MTI3fSBcXGFwcHJveCAyXnsxMjh9IFxcYXBwcm94IDMuNCBcXHRpbWVzIDEwXnszOH0nIj48L2Rpdj4KCiAgICAgICAgICAgIGFuZCB0aGUgc21hbGxlc3QgcG9zaXRpdmUgbnVtYmVyIGlzCgogICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJzJeey0xMjZ9IFxcYXBwcm94IDEuMiBcXHRpbWVzIDEwXnstMzh9JyI+PC9kaXY+CgogICAgICAgICAgICBUaGUgYmluYXJ5IG1hY2hpbmUgZmxvYXRpbmctcG9pbnQKICAgICAgICAgICAgbnVtYmVyIDxzcGFuIHYta2F0ZXg9IidcXHZhcmVwc2lsb24gPSAyXnstMjN9JyI+PC9zcGFuPiBpcwogICAgICAgICAgICBjYWxsZWQgdGhlIDxkZWVwPm1hY2hpbmUgZXBzaWxvbjwvZGVlcD4gd2hlbgogICAgICAgICAgICB1c2luZyBzaW5nbGUgcHJlY2lzaW9uLiBJdCBpcyB0aGUgc21hbGxlc3QKICAgICAgICAgICAgcG9zaXRpdmUgbWFjaGluZSBudW1iZXIgPHNwYW4ga2F0ZXg9IidcXHZhcmVwc2lsb24nIj48L3NwYW4+IHN1Y2gKICAgICAgICAgICAgdGhhdCA8c3BhbiB2LWthdGV4PSInMSArIFxcdmFyZXBzaWxvbiBcXG5lcSAxJyI+PC9zcGFuPi48YnIgLz4KCgogICAgICAgICAgICA8IS0tRXhhbXBsZSAyLjgtLT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNSIgY2xhc3M9Im15LTMgbWItNCBwLTMiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkV4YW1wbGUgMi44PC9zcGFuPgogICAgICAgICAgICAgICAgRGV0ZXJtaW5lIHRoZSBkZWNpbWFsIG51bWJlciB0aGF0IGhhcyB0aGUgZm9sbG93aW5nIHNpbmdsZS1wcmVjaXNpb24gcmVwcmVzZW50YXRpb24KCiAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1swfjEwMH4wMTB+MTB+MDEwfjAwMX4wMDB+MTExfjAxMH4wMDB+MDAwfjAwXV8yJyI+PC9kaXY+CgogICAgICAgICAgICAgICAgQW5zd2VyOiBUaGUgc3RvcmVkIHNpZ24gaXMgPHNwYW4gdi1rYXRleD0iJ3MgPSAwJyI+PC9zcGFuPi4gVGh1cyB0aGUgbnVtYmVyIGlzIHBvc2l0aXZlLgogICAgICAgICAgICAgICAgVGhlIHN0b3JlZCBleHBvbmVudCBpcwoKCiAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH0gKDEwMH4wMTB+MTApXzJcJj0gMl57MX0gKyAyXnszfSArIDJeezd9IFxcXFwgICAgICAgICAgICAgIFwmPSAyICsgOCArIDEyOCA9IDEzOCBcXFxcIFxcdGV4dHJte1RodXN9XFw7XFw7XFw7ZS0xMjdcJj0gMTM4IC0gMTI3ID0gMTEgICAgICAgICAgICAgIFxcZW5ke2FsaWduZWR9JyI+PC9kaXY+CiAgICAgICAgICAgCgogICAgICAgICAgICAgICAgVGhlIGZyYWN0aW9uYWwgcGFydCA8c3BhbiB2LWthdGV4PSInZiciPjwvc3Bhbj4gaXMgPHNwYW4ga2F0ZXg9IicwLjAxMH4wMDF+MDAwfjExMX4wMSciPjwvc3Bhbj4uCiAgICAgICAgICAgICAgICBUaGUgZGVjaW1hbCBudW1iZXIgPHNwYW4gdi1rYXRleD0iJ04nIj48L3NwYW4+IGlzCgogICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IidcXGJlZ2lue2FsaWduZWR9IE4gXCY9ICgtMSlecyBcXHRpbWVzIDJee2UgLSAxMjd9IFxcdGltZXMgKDEuZilfMlxcXFwgIFwmPSAgKDEuMDEwfjAwMX4wMDB+MTExfjAxKVxcdGltZXMgMl57MTF9IFxcXFwgIFwmPSAgIDEwMTB+MDAxfjAwMH4xMS4xfjAxIFxcXFwgIFwmPSAgIDJeey0zfSArIDJeey0xfSArIDJeMCArIDJeMSArIDJeNSArIDJeOSArIDJeezExfSA9IDI1OTUuNjI1ICBcXGVuZHthbGlnbmVkfSciPjwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwhLS0uL0V4YW1wbGUgMi44LS0+CgogICAgICAgICAgICA8IS0tRXhhbXBsZSAyLjktLT4KICAgICAgICAgICAgPGRpdiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI2UyZTNlNSIgY2xhc3M9Im15LTMgbWItNCBwLTMiPgogICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPkV4YW1wbGUgMi45PC9zcGFuPgoKICAgICAgICAgICAgICAgIERldGVybWluZSB0aGUgc2luZ2xlLXByZWNpc2lvbiByZXByZXNlbnRhdGlvbiBvZiB0aGUgZGVjaW1hbCAtNTIuMjM0Mzc1Ljxicj48YnI+CgogICAgICAgICAgICAgICAgQW5zd2VyOiBXZSBzdGFydCBieSBjb252ZXJ0aW5nIHRoZSBkZWNpbWFsIGludG8gYmluYXJ5IGZvcm0uCiAgICAgICAgICAgICAgICBDb252ZXJ0aW5nIHRoZSBpbnRlZ2VyIGFuZCBmcmFjdGlvbmFsIHBhcnQgd2UgaGF2ZSwKCiAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg6ZGlzcGxheT0iJ1xcYmVnaW57YWxpZ25lZH01MlwmPSAoMTEwfjEwMClfMlxcXFwgMC4yMzQzNzVcJj0oMC4wMDF+MTExKV8yXFxcXCBcXHRleHRybXtUaHVzfVxcO1xcO1xcO1xcOzUyLjIzNDM3NVwmPSgxMTB+MTAwLjAwMX4xMTEpXzJcXFxcICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwmPSAoMS4xMDF+MDAwfjAxMX4xMSlfMiBcXHRpbWVzIDJeNVxcXFwgXFxlbmR7YWxpZ25lZH0nIj48L2Rpdj4KCgoKICAgICAgICAgICAgICAgIFRoZSBzaWduIGlzIDxzcGFuIHYta2F0ZXg9IidzID0gMSciPjwvc3Bhbj4gYW5kCiAgICAgICAgICAgICAgICB0aGUgZnJhY3Rpb25hbCBwYXJ0IDxzcGFuIHYta2F0ZXg9IidmJyI+PC9zcGFuPiBpcyA8c3BhbiB2LWthdGV4PSInMC4xMDF+MDAwfjAxMX4xMSciPjwvc3Bhbj4gYW5kCiAgICAgICAgICAgICAgICB0aGUgZXhwb25lbnQgaXMgPHNwYW4gdi1rYXRleD0iJ2UnIj48L3NwYW4+IGlzCgogICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4OmRpc3BsYXk9IicgZSAtIDEyNyA9IDUgXFxMb25ncmlnaHRhcnJvdyBlID0gMTMyID0gKDEwMH4wMDF+MDApXzIgJyI+PC9kaXY+CgoKICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICBUaGUgMzItYml0IHJlcHJlc2VudGF0aW9uIG9mIHRoZSBudW1iZXIgaXMKCiAgICAgICAgICAgIDxkaXYgdi1rYXRleDpkaXNwbGF5PSInIFsxfjEwMH4wMDF+MDB+MTAxfjAwMH4wMTF+MTEwfjAwMH4wMDB+MDAwfjAwXV8yJyI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPCEtLS4vU2VjdGlvbiAyLjIuMiBlbmQgaGVyZS0tPgoKICAgIDwvc2VjdGlvbj4KICAgIDwhLS0uL3NlY3Rpb24gMi4yIGVuZCBoZXJlLS0+CgoKICAgIDwhLS1FeGVyY2ljZSAyLjEgc3RhcnQgaGVyZS0tPgogICAgPHNlY3Rpb24gY2xhc3M9ImRhcmstZ3JleS10ZXh0IG1iLTQgcHQtMyBweC0zIG14LTQiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiNmZmYzZTAiIGlkPSJleC0xIj4KICAgICAgICA8aDQgY2xhc3M9Img0LXJlc3BvbnNpdmUiPkV4ZXJjaXNlIDIuMiAgPGRlZXA+U2luZ2xlLVByZWNpc2lvbiBmbG9hdGluZyBwb2ludCBmb3JtPC9kZWVwPjwvaDQ+CgogICAgICAgIDxvbD4KICAgICAgICAgICAgPGxpPgoKICAgICAgICAgICAgICAgIERldGVybWluZSB0aGUgbWFjaGluZSByZXByZXNlbnRhdGlvbiBpbiBzaW5nbGUgcHJlY2lzaW9uIG9uIGEgMzItYml0IHdvcmQKICAgICAgICAgICAgICAgIGxlbmd0aCBjb21wdXRlciAoTWFyYy0zMikgZm9yIHRoZSBmb2xsb3dpbmcgZGVjaW1hbCBudW1iZXJzCgogICAgICAgICAgICAgICAgPG9sIHN0eWxlPSJsaXN0LXN0eWxlLXR5cGU6bG93ZXItbGF0aW47Ij4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzc3MTInIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInLTI4NS43NSAnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInIC0yNzUyJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzY0LjAxNTYyNSAnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInICAwLjAzMTI1JyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJyAgMC4yMzQzNzUnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInLTggXFx0aW1lcyAyXnstMjR9ICciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IidcXGRpc3BsYXlzdHlsZSAyXnstMTI3fSArIDJeey0xMjh9ICciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicgXFxkaXNwbGF5c3R5bGUgMl57LTEyN30gKyAyXnstMTMwfSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicgXFxkaXNwbGF5c3R5bGUgMl57LTEyN30gKyAyXnstMTUwfSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L29sPgogICAgICAgICAgICAgICAgPGJyPjxicj4KICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgIERldGVybWluZSB0aGUgZGVjaW1hbCBudW1iZXJzIHRoYXQgaGFzIHRoZSBmb2xsb3dpbmcgTWFyYy0zMgogICAgICAgICAgICAgICAgcmVwcmVzZW50YXRpb24uCiAgICAgICAgICAgICAgICA8b2wgc3R5bGU9Imxpc3Qtc3R5bGUtdHlwZTpsb3dlci1sYXRpbjsiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInMX4xMTExfjAwMDB+MDExfjAwMDB+MDAwMH4wMDAwfjAwMDB+MDAwMCciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicwfjEwMDB+MTAxMH4wMTB+MDAxMH4wMDExfjEwMTB+MDAwMH4wMDAwJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJzB+MTAwMH4wMTAxfjAwMH4wMDAwfjAwMDB+MTAwMH4wMDAwfjAwMDAnIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInMH4xMDAwfjAwMDB+MTExfjEwMDB+MDAwMH4wMDAwfjAwMDB+MDAwMCciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IHYta2F0ZXg9IicxfjEwMDB+MDEwMH4xMDF+MDAwMH4xMTExfjAwMDB+MDAwMH4wMDAwJyI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgICAgICAgICA8YnI+PGJyPgogICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgQXJlIHRoZXNlIG1hY2hpbmUgbnVtYmVycyBpbiB0aGUgTWFyYy0zMj8gV2h5PwogICAgICAgICAgICAgICAgPG9sIHN0eWxlPSJsaXN0LXN0eWxlLXR5cGU6bG93ZXItbGF0aW47Ij4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdi1rYXRleD0iJ1xcZGlzcGxheXN0eWxlIDEwXns0MH0nIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB2LWthdGV4PSInXFxkaXNwbGF5c3R5bGUgMl57LTF9ICsgMl57LTI2fSciPjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L29sPgogICAgICAgICAgICA8L2xpPgogICAgICAgIDwvb2w+CiAgICA8L3NlY3Rpb24+CjwvZGl2PgoK"},null]}