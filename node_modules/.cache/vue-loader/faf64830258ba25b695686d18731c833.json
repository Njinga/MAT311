{"remainingRequest":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit2.vue?vue&type=template&id=855692f8&","dependencies":[{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\src\\views\\unit2.vue","mtime":1597895765269},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\PC\\Desktop\\New Project Documents\\MAT311\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "unit2" }, [
    _vm._m(0),
    _c("section", { staticClass: "dark-grey-text mb-4 pt-3 px-3 mx-4" }, [
      _c(
        "h4",
        { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
        [_vm._v(" 2.1 Decimal and Binary system ")]
      ),
      _c("hr", { staticClass: "blue mb-4 mt-0 " }),
      _c("div", [
        _vm._v(" The number system used on a daily basis is called a "),
        _c("strong", [_vm._v("decimal system")]),
        _vm._v(
          ". In decimal representation of integers we identify an integer "
        ),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "d_nd_{n-1}\\cdots d_1d_0",
                  expression: "'d_nd_{n-1}\\\\cdots d_1d_0'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.1)",
                  expression: "'(2.1)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" with "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "d_n10^n + d_{n-1}10^{n-1} + \\cdots + d_1 10^1 + d_0 10^0",
                  expression:
                    "'d_n10^n + d_{n-1}10^{n-1} + \\\\cdots + d_1 10^1 + d_0 10^0'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.2)",
                  expression: "'(2.2)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" Similarly, an infinite decimal of the form "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "d_nd_{n-1}\\cdots d_1d_0.d_{-1}d_{-2}d_{-3}\\ldots",
                  expression:
                    "'d_nd_{n-1}\\\\cdots d_1d_0.d_{-1}d_{-2}d_{-3}\\\\ldots'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.3)",
                  expression: "'(2.3)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" can be represented as "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "d_n10^n + d_{n-1}10^{n-1} + \\cdots + d_1 10^1 + d_0 10^0 + d_{-1}10^{-1} + d_{-2}10^{-2} + \\ldots",
                  expression:
                    "'d_n10^n + d_{n-1}10^{n-1} + \\\\cdots + d_1 10^1 + d_0 10^0 + d_{-1}10^{-1} + d_{-2}10^{-2} + \\\\ldots'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.4)",
                  expression: "'(2.4)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" where "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "d_k",
              expression: "'d_k'"
            }
          ]
        }),
        _vm._v(" is an integer from "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "0", expression: "'0'" }
          ]
        }),
        _vm._v(" to "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "9", expression: "'9'" }
          ]
        }),
        _vm._v(", with "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "d_n \\neq 0",
              expression: "'d_n \\\\neq 0'"
            }
          ]
        }),
        _vm._v(". For example, "),
        _c(
          "div",
          {
            staticClass: "mt-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("deep", [_vm._v("Example 2.1")]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col col-sm-6" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "23456 = 2\\times 10^4 + 3\\times 10^3 + 4\\times 10^2 + 5\\times 10^1 + 6 \\times 10^0~~~~~ ",
                      expression:
                        "'23456 = 2\\\\times 10^4 + 3\\\\times 10^3 + 4\\\\times 10^2 + 5\\\\times 10^1 + 6 \\\\times 10^0~~~~~ '",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.5)",
                      expression: "'(2.5)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "234.56 = 2\\times 10^2 + 3\\times 10^1 + 4\\times 10^0 + 5\\times 10^{-1} + 6 \\times 10^{-2}",
                      expression:
                        "'234.56 = 2\\\\times 10^2 + 3\\\\times 10^1 + 4\\\\times 10^0 + 5\\\\times 10^{-1} + 6 \\\\times 10^{-2}'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.6)",
                      expression: "'(2.6)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ],
          1
        ),
        _vm._v(" In general, an "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "(n+1)",
              expression: "'(n+1)'"
            }
          ]
        }),
        _vm._v(" digit integer "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "I", expression: "'I'" }
          ]
        }),
        _vm._v(" can be expressed in base "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "b", expression: "'b'" }
          ]
        }),
        _vm._v(" as "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "I = (a_na_{n-1}a_{n-2}\\ldots\\ldots a_2a_1a_0)_b",
                  expression:
                    "'I = (a_na_{n-1}a_{n-2}\\\\ldots\\\\ldots a_2a_1a_0)_b'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.7)",
                  expression: "'(2.7)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" If "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "b = 10",
              expression: "'b = 10'"
            }
          ]
        }),
        _vm._v(" the digits "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "a_j",
              expression: "'a_j'"
            }
          ]
        }),
        _vm._v(" can take values between "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "0", expression: "'0'" }
          ]
        }),
        _vm._v(" and "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "9 \\space (a_n \neq 0)",
              expression: "'9 \\\\space (a_n \\neq 0)'"
            }
          ]
        }),
        _c("ul", { staticStyle: { "list-style": "none" } }, [
          _c("li", [
            _vm._v(" If "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "b = 2",
                  expression: "'b = 2'"
                }
              ]
            }),
            _vm._v(" the digits "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "a_j",
                  expression: "'a_j'"
                }
              ]
            }),
            _vm._v(" can either be 0 or 1. ")
          ]),
          _c("li", [
            _vm._v(" The decimal value of the number (with base "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "b",
                  expression: "'b'"
                }
              ]
            }),
            _vm._v(") given in equation (2.7) is "),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "I = b^n\\times a_n + b^{n-1}\\times a_{n-1} + \\cdots + b^1 \\times a_1 + b^0 \\times a_0.",
                      expression:
                        "'I = b^n\\\\times a_n + b^{n-1}\\\\times a_{n-1} + \\\\cdots + b^1 \\\\times a_1 + b^0 \\\\times a_0.'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.8)",
                      expression: "'(2.8)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ])
        ]),
        _vm._v(
          " Most computers represent numbers as sums of multiple powers of 2 (a "
        ),
        _c("i", [_vm._v("binary")]),
        _vm._v(
          " system). In a binary system, the mathematical expression of an integer is "
        ),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "I = (a_na_{n-1}a_{n-2}\\ldots\\ldots a_2a_1a_0)_2",
                  expression:
                    "'I = (a_na_{n-1}a_{n-2}\\\\ldots\\\\ldots a_2a_1a_0)_2'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.9)",
                  expression: "'(2.9)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" where "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "a_i",
              expression: "'a_i'"
            }
          ]
        }),
        _vm._v(" is a "),
        _c("i", [_vm._v("binary bit")]),
        _vm._v(", that is 0 or 1. The decimal value of a binary number is "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    " I = 2^na_n + 2^{n-1}a_{n-1} + \\cdots + 2^1a_1 + 2^0a_0 = \\sum_{k=0}^{n} 2^ka_k .",
                  expression:
                    "' I = 2^na_n + 2^{n-1}a_{n-1} + \\\\cdots + 2^1a_1 + 2^0a_0 = \\\\sum_{k=0}^{n} 2^ka_k .'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.10)",
                  expression: "'(2.10)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(
          " If the binary number contains a fractional part, i.e is of the form "
        ),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "I = (a_na_{n-1}a_{n-2}\\ldots\\ldots a_2a_1a_0.a_{-1}a_{-2}a_{-3}\\ldots)_2",
                  expression:
                    "'I = (a_na_{n-1}a_{n-2}\\\\ldots\\\\ldots a_2a_1a_0.a_{-1}a_{-2}a_{-3}\\\\ldots)_2'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.11)",
                  expression: "'(2.11)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" it can be represented as "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "I = 2^na_n + 2^{n-1}a_{n-1} + \\cdots + 2^1a_1 + 2^0a_0 + 2^{-1}a_{-1}+2^{-2}a_{-2} + 2^{-3}a_{-3} + \\ldots ",
                  expression:
                    "'I = 2^na_n + 2^{n-1}a_{n-1} + \\\\cdots + 2^1a_1 + 2^0a_0 + 2^{-1}a_{-1}+2^{-2}a_{-2} + 2^{-3}a_{-3} + \\\\ldots '",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.12)",
                  expression: "'(2.12)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _c(
          "div",
          {
            staticClass: "mt-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("deep", [_vm._v("Example 2.2")]),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "(11001)_2 = 2^4\\cdot 1 + 2^3\\cdot 1 + 2^2\\cdot 0 + 2^1 \\cdot 0 + 2^0\\cdot 1~~",
                  expression:
                    "'(11001)_2 = 2^4\\\\cdot 1 + 2^3\\\\cdot 1 + 2^2\\\\cdot 0 + 2^1 \\\\cdot 0 + 2^0\\\\cdot 1~~'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: " = 16 +8 + 0 + 0 + 1 = (25)_{10}",
                  expression: "' = 16 +8 + 0 + 0 + 1 = (25)_{10}'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "(0.0111)_2 = 2^{-1}\\cdot 0 + 2^{-2}\\cdot 1 + 2^{-3}\\cdot 1 + 2^{-4}\\cdot 1~~~~~ ",
                  expression:
                    "'(0.0111)_2 = 2^{-1}\\\\cdot 0 + 2^{-2}\\\\cdot 1 + 2^{-3}\\\\cdot 1 + 2^{-4}\\\\cdot 1~~~~~ '",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "~~~~~~~~~~~~~~~~~~~~~~=0 + 0.25 + 0.125 + 0.0625 = (0.4375)_{10}",
                  expression:
                    "'~~~~~~~~~~~~~~~~~~~~~~=0 + 0.25 + 0.125 + 0.0625 = (0.4375)_{10}'",
                  arg: "display"
                }
              ]
            })
          ],
          1
        )
      ]),
      _c("div", { staticClass: "py-3" }, [
        _c("h4", { staticClass: "h4-responsive py-2 font-weight-bold" }, [
          _vm._v(" 2.1.1 Conversion from decimal number to binary number ")
        ]),
        _c("h5", { staticClass: "font-weight-bold py-2" }, [
          _vm._v("Converting of the integer part")
        ]),
        _vm._v(" A decimal number "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "I_{10}",
              expression: "'I_{10}'"
            }
          ]
        }),
        _vm._v(" can be represented in binary form as "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "I_{10} = (a_na_{n-1}\\ldots a_1a_0)_2 = 2^n a_n + 2^{n-1}a_{n-1}+\\ldots +2^1a_1 + 2^0a_0 = (a_na_{n-1}a_{n-2}\\ldots\\ldots a_2a_1a_0)_2.",
                  expression:
                    "'I_{10} = (a_na_{n-1}\\\\ldots a_1a_0)_2 = 2^n a_n + 2^{n-1}a_{n-1}+\\\\ldots +2^1a_1 + 2^0a_0 = (a_na_{n-1}a_{n-2}\\\\ldots\\\\ldots a_2a_1a_0)_2.'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.13)",
                  expression: "'(2.13)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" For example "),
        _c(
          "div",
          {
            staticClass: "mt-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("deep", [_vm._v("Example 2.3")]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "7 = 4 + 2 + 1 = 2^2 +2^1 + 2^0 = (111)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                      expression:
                        "'7 = 4 + 2 + 1 = 2^2 +2^1 + 2^0 = (111)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.14)",
                      expression: "'(2.14)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "25 = 16 + 8 + 1 = 2^4 + 2^3 + 0\\cdot 2^2 + 0 \\cdot 2^1 + 2^0 = (11001)_2",
                      expression:
                        "'25 = 16 + 8 + 1 = 2^4 + 2^3 + 0\\\\cdot 2^2 + 0 \\\\cdot 2^1 + 2^0 = (11001)_2'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.15)",
                      expression: "'(2.15)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ],
          1
        ),
        _vm._v(
          " The following procedure is a more general approach that can be used to convert decimal integers to binary form."
        ),
        _c("br"),
        _vm._v(" Given an integer "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "I_{10}",
              expression: "'I_{10}'"
            }
          ]
        }),
        _vm._v(", determine the quotients "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "Q_i",
              expression: "'Q_i'"
            }
          ]
        }),
        _vm._v(" and the remainders "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "R_i",
              expression: "'R_i'"
            }
          ]
        }),
        _vm._v(" such that "),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: "I_{10} = 2Q_0 + R_0",
              expression: "'I_{10} = 2Q_0 + R_0'",
              arg: "display"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: "Q_0 = 2Q_1 + R_1",
              expression: "'Q_0 = 2Q_1 + R_1'",
              arg: "display"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: "Q_1 = 2Q_2 + R_",
              expression: "'Q_1 = 2Q_2 + R_'",
              arg: "display"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: "\\vdots  \\vdots",
              expression: "'\\\\vdots  \\\\vdots'",
              arg: "display"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: " Q_{n-1} = 2Q_n + R_n ",
              expression: "' Q_{n-1} = 2Q_n + R_n '",
              arg: "display"
            }
          ]
        }),
        _vm._v(
          " The remainders are 0s and 1s and the binary form for the number "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "I_{10}",
              expression: "'I_{10}'"
            }
          ]
        }),
        _vm._v(" is "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "R_nR_{n-1}R_{n-2}\\ldots R_1R_0",
                  expression: "'R_nR_{n-1}R_{n-2}\\\\ldots R_1R_0'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.16)",
                  expression: "'(2.16)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" It should be noted that "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "R_nR_{n-1}R_{n-2}\\ldots R_1R_0  = a_na_{n-1}a_{n-2}\\ldots a_1a_0",
                  expression:
                    "'R_nR_{n-1}R_{n-2}\\\\ldots R_1R_0  = a_na_{n-1}a_{n-2}\\\\ldots a_1a_0'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.17)",
                  expression: "'(2.17)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _c(
          "div",
          {
            staticClass: "mt-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("deep", [_vm._v("Example 2.4")]),
            _vm._v(" Convert the following decimal numbers into binary form "),
            _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(53)_{10}",
                      expression: "'(53)_{10}'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(315)_{10}",
                      expression: "'(315)_{10}'"
                    }
                  ]
                })
              ])
            ])
          ],
          1
        ),
        _vm._v(" Answer: "),
        _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
          _c("li", [
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value:
                    "\\textbf{This requires special attention} \\textit{around line 400 in the tex file}",
                  expression:
                    "'\\\\textbf{This requires special attention} \\\\textit{around line 400 in the tex file}'"
                }
              ]
            })
          ]),
          _c("li", [
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\textbf{Hence I will give it that attention later}",
                  expression:
                    "'\\\\textbf{Hence I will give it that attention later}'"
                }
              ]
            })
          ])
        ]),
        _c("h5", { staticClass: "font-weight-bold py-2" }, [
          _vm._v("Converting the fractional part (binary fraction)")
        ]),
        _vm._v(" In the case of a decimal fraction "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "I", expression: "'I'" }
          ]
        }),
        _vm._v(" such that "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: " 0 < I < 1",
              expression: "' 0 < I < 1'"
            }
          ]
        }),
        _vm._v(", we note that the binary form is "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "I = (0.d_1d_2d_3\\ldots d_{n-1}d_{n})_2 = \\frac{d_1}{2} + \\frac{d_2}{2^2} + \\frac{d_3}{2^3} + \\ldots + \\frac{d_n}{2^n}",
                  expression:
                    "'I = (0.d_1d_2d_3\\\\ldots d_{n-1}d_{n})_2 = \\\\frac{d_1}{2} + \\\\frac{d_2}{2^2} + \\\\frac{d_3}{2^3} + \\\\ldots + \\\\frac{d_n}{2^n}'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.18)",
                  expression: "'(2.18)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" then "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "2I =  d_1 + \\left(\\frac{d_2}{2} + \\frac{d_3}{2^2} + \\ldots + \\frac{d_n}{2^{n-1}}\\right)",
                  expression:
                    "'2I =  d_1 + \\\\left(\\\\frac{d_2}{2} + \\\\frac{d_3}{2^2} + \\\\ldots + \\\\frac{d_n}{2^{n-1}}\\\\right)'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.19)",
                  expression: "'(2.19)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(
          " The quantity in parenthesis on the right side of equation (2.19) is a positive number and is less than 1. Therefore "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "d_1",
              expression: "'d_1'"
            }
          ]
        }),
        _vm._v(" is the integer part of "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "2I",
              expression: "'2I'"
            }
          ]
        }),
        _vm._v(", denoted "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "d_1=int(2I)",
              expression: "'d_1=int(2I)'"
            }
          ]
        }),
        _vm._v(
          ". To continue the process, take the fractions part of (2.19) and write "
        ),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "F_1 = frac(2I)  =  \\frac{d_2}{2} + \\frac{d_3}{2^2} + \\ldots + \\frac{d_n}{2^{n-1}}",
                  expression:
                    "'F_1 = frac(2I)  =  \\\\frac{d_2}{2} + \\\\frac{d_3}{2^2} + \\\\ldots + \\\\frac{d_n}{2^{n-1}}'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.20)",
                  expression: "'(2.20)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" where "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "frac(2I)",
              expression: "'frac(2I)'"
            }
          ]
        }),
        _vm._v(" is the fractional part of the real number "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "2I",
              expression: "'2I'"
            }
          ]
        }),
        _vm._v(". Multiplying both sides of equation (2.20) by 2 results in "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "2F_1 = d_2 + \\left(\\frac{d_3}{2} + \\ldots + \\frac{d_n}{2^{n-2}}\\right)",
                  expression:
                    "'2F_1 = d_2 + \\\\left(\\\\frac{d_3}{2} + \\\\ldots + \\\\frac{d_n}{2^{n-2}}\\\\right)'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.21)",
                  expression: "'(2.21)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" Now, take the integer part of equation (2.21) and obtain "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "d_2 = int(2F_1)",
              expression: "'d_2 = int(2F_1)'"
            }
          ]
        }),
        _vm._v(". This process is continued and two sequences "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "{d_k }",
              expression: "'\\{d_k \\}'"
            }
          ]
        }),
        _vm._v(" and "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "{F_k }",
              expression: "'\\{F_k \\}'"
            }
          ]
        }),
        _vm._v(" are recursively generated such that "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "d_k = int(2F_{k-1}),\\;\\;\\;\\;\\;F_k = frac(2F_{k-1})",
                  expression:
                    "'d_k = int(2F_{k-1}),\\\\;\\\\;\\\\;\\\\;\\\\;F_k = frac(2F_{k-1})'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.22)",
                  expression: "'(2.22)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" where "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "d_1 = int(2I)",
              expression: "'d_1 = int(2I)'"
            }
          ]
        }),
        _vm._v(" and "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "F_1 = frac(2I)",
              expression: "'F_1 = frac(2I)'"
            }
          ]
        }),
        _vm._v(". "),
        _c(
          "div",
          {
            staticClass: "mt-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Example 2.5")
            ]),
            _vm._v(" Convert the following decimal numbers to binary numbers "),
            _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
              _c("li", [
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(0.4375)_{10}",
                      expression: "'(0.4375)_{10}'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(0.6)_{10}",
                      expression: "'(0.6)_{10}'"
                    }
                  ]
                })
              ])
            ]),
            _vm._v(" Answer "),
            _c("ol", { staticStyle: { "list-style": "lower-latin" } }, [
              _c("li", [
                _vm._v(" Let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "I = 0.4375",
                      expression: "'I = 0.4375'"
                    }
                  ]
                }),
                _vm._v(", then "),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2I = 0.875  \\;\\;\\;\\;\\;\\; d_1 = int(0.875) = 0   \\;\\;\\;\\;\\;\\;  F_1 = frac(0.875) = 0.875 ",
                      expression:
                        "'2I = 0.875  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_1 = int(0.875) = 0   \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_1 = frac(0.875) = 0.875 '",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_1 = 1.75  \\;\\;\\;\\;\\;\\; d_2 = int(1.75)  = 1  \\;\\;\\;\\;\\;\\;  F_2 = frac(1.75) = 0.75",
                      expression:
                        "'2F_1 = 1.75  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_2 = int(1.75)  = 1  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_2 = frac(1.75) = 0.75'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_2 = 1.5  \\;\\;\\;\\;\\;\\; d_3 = int(1.5)  = 1  \\;\\;\\;\\;\\;\\;  F_3 = frac(1.5) = 0.5",
                      expression:
                        "'2F_2 = 1.5  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_3 = int(1.5)  = 1  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_3 = frac(1.5) = 0.5'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_3 = 1.0  \\;\\;\\;\\;\\;\\; d_4 = int(1.0)  = 1  \\;\\;\\;\\;\\;\\;  F_4 = frac(1.0) = 0",
                      expression:
                        "'2F_3 = 1.0  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_4 = int(1.0)  = 1  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_4 = frac(1.0) = 0'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Thus, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "(0.4375)_{10} = (0.0111)_2",
                      expression: "'(0.4375)_{10} = (0.0111)_2'"
                    }
                  ]
                }),
                _vm._v(" "),
                _c("br"),
                _c("br")
              ]),
              _c("li", [
                _vm._v(" Let "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "I = 0.6",
                      expression: "'I = 0.6'"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2I = 1.2    \\;\\;\\;\\;\\;\\; d_1 = int(1.2)  = 1  \\;\\;\\;\\;\\;\\;  F_1 = frac(1.2) = 0.2",
                      expression:
                        "'2I = 1.2    \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_1 = int(1.2)  = 1  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_1 = frac(1.2) = 0.2'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_1 = 0.4  \\;\\;\\;\\;\\;\\; d_2 = int(0.4)  = 0  \\;\\;\\;\\;\\;\\;  F_2 = frac(0.4) = 0.4",
                      expression:
                        "'2F_1 = 0.4  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_2 = int(0.4)  = 0  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_2 = frac(0.4) = 0.4'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_2 = 0.8  \\;\\;\\;\\;\\;\\; d_3 = int(0.8)  = 0  \\;\\;\\;\\;\\;\\;  F_3 = frac(0.8) = 0.8",
                      expression:
                        "'2F_2 = 0.8  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_3 = int(0.8)  = 0  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_3 = frac(0.8) = 0.8'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_3 = 1.6  \\;\\;\\;\\;\\;\\; d_4 = int(1.6)  = 1  \\;;\\;\\;\\;\\;  F_4 = frac(1.6) = 0.6 ",
                      expression:
                        "'2F_3 = 1.6  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_4 = int(1.6)  = 1  \\\\;\\;\\\\;\\\\;\\\\;\\\\;  F_4 = frac(1.6) = 0.6 '",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_4 = 1.2  \\;\\;\\;\\;\\;\\; d_5 = int(1.2)  = 1  \\;\\;\\;\\;\\;\\;  F_5 = frac(1.2) = 0.2 ",
                      expression:
                        "'2F_4 = 1.2  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_5 = int(1.2)  = 1  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_5 = frac(1.2) = 0.2 '",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_5 = 0.4  \\;\\;\\;\\;\\;\\; d_6 = int(0.4)  = 0  \\;\\;\\;\\;\\;\\;  F_6 = frac(0.4) = 0.4",
                      expression:
                        "'2F_5 = 0.4  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_6 = int(0.4)  = 0  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_6 = frac(0.4) = 0.4'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_6 = 0.8  \\;\\;\\;\\;\\;\\; d_7 = int(0.8)  = 0  \\;\\;\\;\\;\\;\\;  F_7 = frac(0.8) = 0.8",
                      expression:
                        "'2F_6 = 0.8  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_7 = int(0.8)  = 0  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_7 = frac(0.8) = 0.8'",
                      arg: "display"
                    }
                  ]
                }),
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "2F_7 = 1.6  \\;\\;\\;\\;\\;\\; d_8 = int(1.6)  = 1  \\;\\;\\;\\;\\;\\;  F_8 = frac(1.6) = 0.6",
                      expression:
                        "'2F_7 = 1.6  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\; d_8 = int(1.6)  = 1  \\\\;\\\\;\\\\;\\\\;\\\\;\\\\;  F_8 = frac(1.6) = 0.6'",
                      arg: "display"
                    }
                  ]
                }),
                _vm._v(" Thus, "),
                _c("span", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value:
                        "(0.6)_{10} = (0.10011001\\ldots)_2 = (0.\\overline{1001})_2",
                      expression:
                        "'(0.6)_{10} = (0.10011001\\\\ldots)_2 = (0.\\\\overline{1001})_2'"
                    }
                  ]
                })
              ])
            ])
          ]
        )
      ]),
      _c("div", { staticClass: "py-3" }, [
        _c("h4", { staticClass: "h4-responsive py-2 font-weight-bold" }, [
          _vm._v(" 2.1.2 Binary shifting ")
        ]),
        _vm._v(" Consider the binary number "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "S = (0.00000\\overline{11000})_2",
                  expression: "'S = (0.00000\\\\overline{11000})_2'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.23)",
                  expression: "'(2.23)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" Multiplying both sides of (2.23) by "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "2^5",
              expression: "'2^5'"
            }
          ]
        }),
        _vm._v(" shifts the binary point five places to the right to obtain "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "32S = (0.\\overline{11000})_2",
                  expression: "'32S = (0.\\\\overline{11000})_2'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.24)",
                  expression: "'(2.24)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" Multiplying equation (2.23) by "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "2^{10}",
              expression: "'2^{10}'"
            }
          ]
        }),
        _vm._v(" shifts the binary point ten places to the right to give "),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "1024S = (11000.\\overline{11000})_2",
                  expression: "'1024S = (11000.\\\\overline{11000})_2'",
                  arg: "display"
                }
              ]
            })
          ]),
          _c("div", { staticClass: "col" }, [
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value: "(2.25)",
                  expression: "'(2.25)'",
                  arg: "display"
                }
              ]
            })
          ])
        ]),
        _vm._v(" Subtracting equation (2.23) from (2.25) gives "),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: "992S = (11000)_2~~~~~~~~~~",
              expression: "'992S = (11000)_2~~~~~~~~~~'",
              arg: "display"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: "992S = 24~~~~~~~~~~~~~~~~~~~~",
              expression: "'992S = 24~~~~~~~~~~~~~~~~~~~~'",
              arg: "display"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: "S= \\frac{24}{992} = \\frac{3}{124}",
              expression: "'S= \\\\frac{24}{992} = \\\\frac{3}{124}'",
              arg: "display"
            }
          ]
        }),
        _vm._v(" Thus, "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value:
                "\\ S = (0.00000\\overline{11000})_2  = \\displaystyle{\\frac{3}{124}}",
              expression:
                "'\\\\ S = (0.00000\\\\overline{11000})_2  = \\\\displaystyle{\\\\frac{3}{124}}'"
            }
          ]
        })
      ])
    ]),
    _c(
      "section",
      {
        staticClass: "dark-grey-text mb-4 pt-3 px-3 mx-4",
        staticStyle: { "background-color": "#fff3e0" },
        attrs: { id: "ex-1" }
      },
      [
        _vm._m(1),
        _c("ol", [
          _c("li", [
            _vm._v(
              " Convert the following binary numbers to their decimal equivalent "
            ),
            _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "11001",
                            expression: "'11001'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "25",
                            expression: "'25'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "1000.001",
                            expression: "'1000.001'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "8.125",
                            expression: "'8.125'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "11011.01",
                            expression: "'11011.01'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "27.25",
                            expression: "'27.25'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "10110.0101",
                            expression: "'10110.0101'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "22.3125",
                            expression: "'22.3125'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "100010.011",
                            expression: "'100010.011'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "34.4375",
                            expression: "'34.4375'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle (10101.101)_2",
                            expression: "'\\\\displaystyle (10101.101)_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "21.6250",
                            expression: "'21.6250'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle (.101010101\\ldots)_2",
                            expression:
                              "'\\\\displaystyle (.101010101\\\\ldots)_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \\frac{2}{3}",
                            expression: "'\\\\displaystyle \\\\frac{2}{3}'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "\\displaystyle (.00011001100110011\\ldots)_2",
                            expression:
                              "'\\\\displaystyle (.00011001100110011\\\\ldots)_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \\frac{1}{10}",
                            expression: "'\\\\displaystyle \\\\frac{1}{10}'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "\\displaystyle (111111...1)_2, \\text{with parentheses enclosing } n \\text{1s}.",
                            expression:
                              "'\\\\displaystyle (111111...1)_2, \\\\text{with parentheses enclosing } n \\\\text{1s}.'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle 2^n - 1",
                            expression: "'\\\\displaystyle 2^n - 1'"
                          }
                        ]
                      })
                    ])
                  ])
                ]),
                _c("br"),
                _c("br")
              ])
            ])
          ]),
          _c("li", [
            _vm._v(
              " Use binary shifting to convert the following binary numbers to their decimal equivalent "
            ),
            _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle (0.0\\overline{0011})_2",
                            expression:
                              "'\\\\displaystyle (0.0\\\\overline{0011})_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \\frac{1}{10}",
                            expression: "'\\\\displaystyle \\\\frac{1}{10}'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle (0.\\overline{10})_2",
                            expression:
                              "'\\\\displaystyle (0.\\\\overline{10})_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \\frac{2}{3}",
                            expression: "'\\\\displaystyle \\\\frac{2}{3}'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle (0.\\overline{1001})_2",
                            expression:
                              "'\\\\displaystyle (0.\\\\overline{1001})_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \\frac{3}{5}",
                            expression: "'\\\\displaystyle \\\\frac{3}{5}'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value:
                              "\\displaystyle (0.00000\\overline{11000})_2",
                            expression:
                              "'\\\\displaystyle (0.00000\\\\overline{11000})_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \\frac{3}{124}",
                            expression: "'\\\\displaystyle \\\\frac{3}{124}'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle (0.0\\overline{1})_2",
                            expression:
                              "'\\\\displaystyle (0.0\\\\overline{1})_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \frac{1}{3}",
                            expression: "'\\\\displaystyle \\frac{1}{3}'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle (0.0\\overline{1})_2",
                            expression:
                              "'\\\\displaystyle (0.0\\\\overline{1})_2'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle \\frac{1}{3}",
                            expression: "'\\\\displaystyle \\\\frac{1}{3}'"
                          }
                        ]
                      })
                    ])
                  ])
                ]),
                _c("br"),
                _c("br")
              ])
            ])
          ]),
          _c("li", [
            _vm._v(
              " Convert the following decimal numbers to their binary equivalent "
            ),
            _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: " 193",
                            expression: "' 193'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "11000001)_2",
                            expression: "'11000001)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: " 3781",
                            expression: "' 3781'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(111011000101)_2",
                            expression: "'(111011000101)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "0.5",
                            expression: "'0.5'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.1)_2",
                            expression: "'(0.1)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "0.8125",
                            expression: "'0.8125'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.1101)_2",
                            expression: "'(0.1101)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "22.3125",
                            expression: "'22.3125'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(10110.0101)_2",
                            expression: "'(10110.0101)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: " 0.640625",
                            expression: "' 0.640625'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.101001)_2",
                            expression: "'(0.101001)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "0.33203125",
                            expression: "'0.33203125'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.01010101)_2",
                            expression: "'(0.01010101)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle{\\frac{3}{5}}",
                            expression: "'\\\\displaystyle{\\\\frac{3}{5}}'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.\\overline{1001})_2",
                            expression: "'(0.\\\\overline{1001})_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle{\\frac{7}{16}}",
                            expression: "'\\\\displaystyle{\\\\frac{7}{16}}'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.0111)_2",
                            expression: "'(0.0111)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle{\\frac{5}{8}}",
                            expression: "'\\\\displaystyle{\\\\frac{5}{8}}'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.101)_2",
                            expression: "'(0.101)_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ]),
              _c("li", [
                _c("div", { staticClass: "container-fluid" }, [
                  _c("div", { staticClass: "row" }, [
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "\\displaystyle{\\frac{7}{10}}",
                            expression: "'\\\\displaystyle{\\\\frac{7}{10}}'"
                          }
                        ]
                      })
                    ]),
                    _c("div", { staticClass: "col" }, [
                      _c("div", {
                        directives: [
                          {
                            name: "katex",
                            rawName: "v-katex",
                            value: "(0.1\\overline{0110})_2",
                            expression: "'(0.1\\\\overline{0110})_2'"
                          }
                        ]
                      })
                    ])
                  ])
                ])
              ])
            ])
          ])
        ])
      ]
    ),
    _c("section", { staticClass: "dark-grey-text mb-4 pt-3 px-3 mx-4" }, [
      _c(
        "h4",
        { staticClass: "h4-responsive pt-2 font-weight-bold blue-text" },
        [_vm._v(" 2.2 Representing Numbers ")]
      ),
      _c("hr", { staticClass: "blue mb-4 mt-0 " }),
      _vm._v(
        " In this chapter we explain the different ways in which numbers can be represented and how computers store numbers and we develop the basic ideas of roundoff errors. "
      ),
      _c("div", { staticClass: "py-3" }, [
        _c("h4", { staticClass: "h4-responsive py-2 font-weight-bold" }, [
          _vm._v(" 2.1.2 Floating-Point Representation and Errors ")
        ]),
        _vm._v(
          " The standard way of representing a positive real number in decimal form is with an integer part, a fractional part, and a decimal point between them e.g 12.484574, 0.0048585, 39470.982331. In "
        ),
        _c("span", { staticClass: "font-weight-bold" }, [
          _vm._v("Scientific notation")
        ]),
        _vm._v(", numbers are represented in terms of a "),
        _c("i", [_vm._v("sign")]),
        _vm._v(", an "),
        _c("i", [_vm._v("exponent")]),
        _vm._v(", and a "),
        _c("i", [_vm._v("mantissa")]),
        _vm._v(". For example, any nonzero decimal number "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "x", expression: "'x'" }
          ]
        }),
        _vm._v(" can be written in a unique way as "),
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "x = \\sigma\\cdot\\bar{x} \\times 10^e,\\;\\;\\;\\;\\; 1 \\leq \\bar{x} < 10",
                    expression:
                      "'x = \\\\sigma\\\\cdot\\\\bar{x} \\\\times 10^e,\\\\;\\\\;\\\\;\\\\;\\\\; 1 \\\\leq \\\\bar{x} < 10'",
                    arg: "display"
                  }
                ]
              })
            ]),
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "(2.26)",
                    expression: "'(2.26)'",
                    arg: "display"
                  }
                ]
              })
            ])
          ])
        ]),
        _vm._v(" where "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "\\sigma",
              expression: "'\\\\sigma'"
            }
          ]
        }),
        _vm._v(" represents the sign (i.e +1 or -1), "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "\\bar{x}",
              expression: "'\\\\bar{x}'"
            }
          ]
        }),
        _vm._v(" is the mantissa, and "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "e", expression: "'e'" }
          ]
        }),
        _vm._v(" is the exponent. "),
        _c(
          "div",
          {
            staticClass: "mt-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Example 2.6")
            ]),
            _vm._v(
              " Represent the following numbers 12.484574, 0.0048585, 39470.982331 in scientific notation "
            ),
            _c("br"),
            _c("br"),
            _vm._v(
              " Answer: We shift the decimal point in such a way that the mantissa falls between 1 and 10. "
            ),
            _c("br"),
            _c("br"),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value:
                    "~~~~~~12.484574 = +1.2484574 \\times 10^1,\\;\\;\\;(\\text{Shift decimal to the left once})",
                  expression:
                    "'~~~~~~12.484574 = +1.2484574 \\\\times 10^1,\\\\;\\\\;\\\\;(\\\\text{Shift decimal to the left once})'"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value:
                    "~~~~~~0.0048585 = +4.8585 \\times 10^{-3},\\;\\;\\;(\\text{Shift decimal to the right three times}) ",
                  expression:
                    "'~~~~~~0.0048585 = +4.8585 \\\\times 10^{-3},\\\\;\\\\;\\\\;(\\\\text{Shift decimal to the right three times}) '"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value:
                    "39470.982331 = +3.9470982331 \\times 10^{4},\\;\\;\\;(\\text{Shift decimal to the left four times}) ",
                  expression:
                    "'39470.982331 = +3.9470982331 \\\\times 10^{4},\\\\;\\\\;\\\\;(\\\\text{Shift decimal to the left four times}) '"
                }
              ]
            }),
            _c("br")
          ]
        ),
        _vm._v(" Another form, called the "),
        _c("span", { staticClass: "font-weight-bold" }, [
          _vm._v(" normalized scientific notation ")
        ]),
        _vm._v(
          ", is obtained by shifting the decimal point and supplying the appropriate powers of 10. In this type of representation, the number is represented by a fraction multiplied by "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "10^n",
              expression: "'10^n'"
            }
          ]
        }),
        _vm._v(
          ", and the leading digit in the fraction is not zero. For example, any nonzero decimal number "
        ),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "x", expression: "'x'" }
          ]
        }),
        _vm._v(" can be written in a unique way as "),
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "x = \\sigma\\cdot\\bar{x} \\times 10^e,\\;\\;\\;\\;\\; \\frac{1}{10} \\leq \\bar{x} < 1",
                    expression:
                      "'x = \\\\sigma\\\\cdot\\\\bar{x} \\\\times 10^e,\\\\;\\\\;\\\\;\\\\;\\\\; \\\\frac{1}{10} \\\\leq \\\\bar{x} < 1'",
                    arg: "display"
                  }
                ]
              })
            ]),
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "(2.27)",
                    expression: "'(2.27)'",
                    arg: "display"
                  }
                ]
              })
            ])
          ])
        ]),
        _vm._v(
          " Thus, the numbers in example 2.6 have the following representations "
        ),
        _c("br"),
        _vm._v(" "),
        _c("br"),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value:
                "~~~~~~12.484574 = 0.12484574 \\times 10^2,\\;\\;\\;(\\text{Shift decimal to the left two times})",
              expression:
                "'~~~~~~12.484574 = 0.12484574 \\\\times 10^2,\\\\;\\\\;\\\\;(\\\\text{Shift decimal to the left two times})'"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value:
                "~~~~~~0.0048585 =  0.48585 \\times 10^{-2},\\;\\;\\;(\\text{Shift decimal to the right two times})",
              expression:
                "'~~~~~~0.0048585 =  0.48585 \\\\times 10^{-2},\\\\;\\\\;\\\\;(\\\\text{Shift decimal to the right two times})'"
            }
          ]
        }),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value:
                "39470.982331 = 0.39470982331 \\times 10^{5},\\;\\;\\;(\\text{Shift decimal to the left five times})",
              expression:
                "'39470.982331 = 0.39470982331 \\\\times 10^{5},\\\\;\\\\;\\\\;(\\\\text{Shift decimal to the left five times})'"
            }
          ]
        }),
        _c("br"),
        _c("br"),
        _vm._v(
          " In the context of computer science, normalized scientific notation is also called "
        ),
        _c("span", { staticClass: "font-weight-bold" }, [
          _vm._v(" normalized floating point-representation")
        ]),
        _vm._v(
          ". In a computer's internal representation, all nonzero floating-point number are normalised with bases of 2, i.e using the "
        ),
        _c("i", [_vm._v("binary system")]),
        _vm._v(
          ". The floating point representation in the binary system is similar to that in the decimal system. If "
        ),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "x", expression: "'x'" }
          ]
        }),
        _vm._v(" is a non-zero number, it can be written as "),
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "x = \\pm q \\times 2^m,\\;\\;\\;\\;\\;\\; \\left(\\frac{1}{2} \\leq q < 1 \\right)",
                    expression:
                      "'x = \\\\pm q \\\\times 2^m,\\\\;\\\\;\\\\;\\\\;\\\\;\\\\; \\\\left(\\\\frac{1}{2} \\\\leq q < 1 \\\\right)'",
                    arg: "display"
                  }
                ]
              })
            ]),
            _c("div", { staticClass: "col" }, [
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "(2.28)",
                    expression: "'(2.28)'",
                    arg: "display"
                  }
                ]
              })
            ])
          ])
        ]),
        _vm._v(" The mantissa "),
        _c("span", {
          directives: [
            { name: "katex", rawName: "v-katex", value: "q", expression: "'q'" }
          ]
        }),
        _vm._v(" is expressed as a sequence of zeros or ones in the form "),
        _c("div", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex:display",
              value: " q = 0.b_1b_2b_3",
              expression: "' q = 0.b_1b_2b_3'",
              arg: "display"
            }
          ]
        }),
        _vm._v(" where "),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "b_1 \\neq 0",
              expression: "'b_1 \\\\neq 0'"
            }
          ]
        }),
        _vm._v(". "),
        _c(
          "p",
          [
            _vm._v(
              " To a computer, the ability to completely represent a number's mantissa and exponent is limited. As a result most real numbers cannot be represented exactly in a computer. Furthermore, numbers may be either too large or too small to be representable. The real numbers that are representable in a computer are called "
            ),
            _c("deep", [_vm._v("machine numbers")]),
            _vm._v(
              '. A computer will designate a finite number of binary "bits" to represent a number (i.e it uses a discrete set of numbers not a continuum). To illustrate, let us take an example, in which the floating-point numbers must be of the form '
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x = \\pm (0.b_1b_2) \\times 2^{\\pm m}",
                  expression: "'x = \\\\pm (0.b_1b_2) \\\\times 2^{\\\\pm m}'"
                }
              ]
            }),
            _vm._v(", where "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "b_1",
                  expression: "'b_1'"
                }
              ]
            }),
            _vm._v(", "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "b_2",
                  expression: "'b_2'"
                }
              ]
            }),
            _vm._v(" and "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "m",
                  expression: "'m'"
                }
              ]
            }),
            _vm._v(" are allowed to have only the value 0 or 1. ")
          ],
          1
        ),
        _c(
          "div",
          {
            staticClass: "mt-3 mb-4 p-3",
            staticStyle: { "background-color": "#e2e3e5" }
          },
          [
            _c("span", { staticClass: "font-weight-bold" }, [
              _vm._v("Example 2.7")
            ]),
            _vm._v(
              " List all the floating-point numbers that can be expressed in the form "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "x = \\pm (0.b_1b_2)_2 \\times 2^{\\pm k},\\;\\;\\;\\;\\;\\;(k,b_i \\in \\{ 0, 1\\})",
                  expression:
                    "'x = \\\\pm (0.b_1b_2)_2 \\\\times 2^{\\\\pm k},\\\\;\\\\;\\\\;\\\\;\\\\;\\\\;(k,b_i \\\\in \\\\{ 0, 1\\\\})'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(" Answer: There are two choices for the "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "\\pm",
                  expression: "'\\\\pm'"
                }
              ]
            }),
            _vm._v(", two choices for "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "b_1",
                  expression: "'b_1'"
                }
              ]
            }),
            _vm._v(", two choices for "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "b_2",
                  expression: "'b_2'"
                }
              ]
            }),
            _vm._v(
              " and three choices for the exponent. Thus, at first one would expect "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "2 \\times 2 \\times 2 \\times 3=24",
                  expression: "'2 \\\\times 2 \\\\times 2 \\\\times 3=24'"
                }
              ]
            }),
            _vm._v(
              " different numbers. However, there is some duplication. For example, the positive numbers are as follows "
            ),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "0.00 \\times 2^0 =0 ~~~~~~~~0.00 \\times 2^1  =  0 ~~~~~~~~0.00 \\times 2^{-1} = 0",
                  expression:
                    "'0.00 \\\\times 2^0 =0 ~~~~~~~~0.00 \\\\times 2^1  =  0 ~~~~~~~~0.00 \\\\times 2^{-1} = 0'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "0.01 \\times 2^0 =  \\displaystyle \\frac{1}{4} ~~~~~~~~0.01 \\times 2^1  =  \\displaystyle \\frac{1}{2} ~~~~~~~~ 0.01 \\times 2^{-1} = \\displaystyle  \\frac{1}{8}",
                  expression:
                    "'0.01 \\\\times 2^0 =  \\\\displaystyle \\\\frac{1}{4} ~~~~~~~~0.01 \\\\times 2^1  =  \\\\displaystyle \\\\frac{1}{2} ~~~~~~~~ 0.01 \\\\times 2^{-1} = \\\\displaystyle  \\\\frac{1}{8}'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "0.10 \\times 2^0 = \\displaystyle \\frac{1}{2} ~~~~~~~~0.10 \\times 2^1  = 1 ~~~~~~~~0.10 \\times 2^{-1} = \\displaystyle \\frac{1}{4}",
                  expression:
                    "'0.10 \\\\times 2^0 = \\\\displaystyle \\\\frac{1}{2} ~~~~~~~~0.10 \\\\times 2^1  = 1 ~~~~~~~~0.10 \\\\times 2^{-1} = \\\\displaystyle \\\\frac{1}{4}'",
                  arg: "display"
                }
              ]
            }),
            _c("div", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex:display",
                  value:
                    "0.11 \\times 2^0 = \\displaystyle \\frac{3}{4} ~~~~~~~~0.11 \\times 2^1  =  \\displaystyle \\frac{3}{2} ~~~~~~~~0.11 \\times 2^{-1}  = \\displaystyle \\frac{3}{8}",
                  expression:
                    "'0.11 \\\\times 2^0 = \\\\displaystyle \\\\frac{3}{4} ~~~~~~~~0.11 \\\\times 2^1  =  \\\\displaystyle \\\\frac{3}{2} ~~~~~~~~0.11 \\\\times 2^{-1}  = \\\\displaystyle \\\\frac{3}{8}'",
                  arg: "display"
                }
              ]
            }),
            _vm._v(
              " The positive numbers obtained are shown on the line below "
            )
          ]
        ),
        _c(
          "p",
          { staticStyle: { "font-size": "30px", "background-color": "coral" } },
          [
            _vm._v(
              " we should be having a line here , we will deal with that later "
            )
          ]
        ),
        _c(
          "p",
          [
            _vm._v(
              " Altogether there are thirteen distinct numbers in the system. One drawback associated with the representable numbers being a finite set is that it is also "
            ),
            _c("i", [_vm._v("bounded")]),
            _vm._v(". If in the course of a computation, a number "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x",
                  expression: "'x'"
                }
              ]
            }),
            _vm._v(" is produced in the form "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x\\pm q \\times 2^m",
                  expression: "'x\\\\pm q \\\\times 2^m'"
                }
              ]
            }),
            _vm._v(", then we have "),
            _c("deep", [_vm._v("overflow")]),
            _vm._v(" when "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "m",
                  expression: "'m'"
                }
              ]
            }),
            _vm._v(
              " is outside the positive end of the computer's permissible range and an "
            ),
            _c("deep", [_vm._v("underflow")]),
            _vm._v(" when "),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "m",
                  expression: "'m'"
                }
              ]
            }),
            _vm._v(
              " is beyond the negative end of the exponential range. Generally an "
            ),
            _c("i", [_vm._v("overflow")]),
            _vm._v(" results in a "),
            _c("i", [_vm._v("fatal error")]),
            _vm._v(" (or "),
            _c("i", [_vm._v(" exception")]),
            _vm._v(
              ") and normal execution of the program stops. An underflow, however, is treated automatically by setting "
            ),
            _c("span", {
              directives: [
                {
                  name: "katex",
                  rawName: "v-katex",
                  value: "x",
                  expression: "'x'"
                }
              ]
            }),
            _vm._v(" to zero without any interruption of the program. ")
          ],
          1
        ),
        _vm._v(
          " In a computer whose floating point numbers are restricted to the form in example 2.7, any number closer to zero than "
        ),
        _c("span", {
          directives: [
            {
              name: "katex",
              rawName: "v-katex",
              value: "\\frac{1}{8}",
              expression: "'\\\\frac{1}{8}'"
            }
          ]
        }),
        _vm._v(
          " would underflow to zero, and any number outside the range -1.5 to 1.5 would overflow to machine infinity. "
        )
      ]),
      _c(
        "div",
        { staticClass: "py-3" },
        [
          _c("h4", { staticClass: "h4-responsive font-weight-bold" }, [
            _vm._v(" 2.2.2 Single-Precision floating point form ")
          ]),
          _c("p", [
            _vm._v(
              " The IEEE (Institute of Electrical and Electronics Engineers) has produced a standard for floating point arithmetic. This standard specifies how single precision (32 bit) and double precision (64 bit) floating point numbers are to be represented, as well as how arithmetic should be carried out on them. "
            )
          ]),
          _vm._v(
            " The IEEE single precision floating point standard representation requires a 32 bit word, which may be represented as numbered from 0 to 31, left to right. The first bit is the "
          ),
          _c("i", [_vm._v("sign bit")]),
          _vm._v(", "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "s",
                expression: "'s'"
              }
            ]
          }),
          _vm._v(", the next eight bits are the "),
          _c("i", [_vm._v("exponent bits")]),
          _vm._v(", "),
          _c("i", [_vm._v("e")]),
          _vm._v(", and the final 23 bits are the fraction "),
          _c("i", [_vm._v("f")]),
          _vm._v(
            ". In single-precision floating point a machine number can be represented as "
          ),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(-1)^s \\times 2^{e-127}\\times (1.f)_2",
                      expression:
                        "'(-1)^s \\\\times 2^{e-127}\\\\times (1.f)_2'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.29)",
                      expression: "'(2.29)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" Note that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "s = 0",
                expression: "'s = 0'"
              }
            ]
          }),
          _vm._v(" corresponds to a positive mantissa and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "s=1",
                expression: "'s=1'"
              }
            ]
          }),
          _vm._v(
            " corresponds to a negative mantissa. Each floating point single precision word is partitioned as in the diagram below: "
          ),
          _c(
            "p",
            {
              staticStyle: { "font-size": "30px", "background-color": "coral" }
            },
            [
              _vm._v(
                " we should be having a diagram here , we will deal with that later "
              )
            ]
          ),
          _vm._v(" The largest value of the exponent "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "e",
                expression: "'e'"
              }
            ]
          }),
          _vm._v(" in the single precision representation is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "(11~111~111)_2 = 2^7 + 2^6 + 2^5 + 2^4  + 2^3 + 2^2 + 2^1 + 2^0 = 255",
                expression:
                  "'(11~111~111)_2 = 2^7 + 2^6 + 2^5 + 2^4  + 2^3 + 2^2 + 2^1 + 2^0 = 255'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" Thus value of the exponent "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "e",
                expression: "'e'"
              }
            ]
          }),
          _vm._v(" is restricted by the inequality "),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "0 < e < (11~111~111)_2 =  255",
                      expression: "'0 < e < (11~111~111)_2 =  255'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.30)",
                      expression: "'(2.30)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(
            " The values 0 and 255 are reserved for special cases, including "
          ),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\pm 0",
                expression: "'\\\\pm 0'"
              }
            ]
          }),
          _vm._v(" and "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\pm \\infty",
                expression: "'\\\\pm \\\\infty'"
              }
            ]
          }),
          _vm._v(
            ", respectively. Hence, the actual exponent of the number is restricted by the inequality "
          ),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "-126 \\leq e - 127  \\leq 127.",
                      expression: "'-126 \\\\leq e - 127  \\\\leq 127.'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.31)",
                      expression: "'(2.31)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(
            " Similarly, it can be shown that the mantissa of each nonzero number is restricted by the inequality "
          ),
          _c("div", { staticClass: "container" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value:
                        "1 \\leq (1.f)_2 \\leq (1.111~111~111~111~111~111~111~11)_2 = 2 - 2^{-23}",
                      expression:
                        "'1 \\\\leq (1.f)_2 \\\\leq (1.111~111~111~111~111~111~111~11)_2 = 2 - 2^{-23}'",
                      arg: "display"
                    }
                  ]
                })
              ]),
              _c("div", { staticClass: "col" }, [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex:display",
                      value: "(2.32)",
                      expression: "'(2.32)'",
                      arg: "display"
                    }
                  ]
                })
              ])
            ])
          ]),
          _vm._v(" Note that "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "1.111~111~111~111~111~111~111~11 = 2^0 + \\overbrace{2^{-1} + 2^{-2} + \\cdots + 2^{-23}}^{\\rm 23~ terms}",
                expression:
                  "'1.111~111~111~111~111~111~111~11 = 2^0 + \\\\overbrace{2^{-1} + 2^{-2} + \\\\cdots + 2^{-23}}^{\\\\rm 23~ terms}'",
                arg: "display"
              }
            ]
          }),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ = \\displaystyle 1 + 2^{-1}\\frac{[1 - (2^{-1})^{23}]}{(1-2^{-1})}",
                expression:
                  "'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ = \\\\displaystyle 1 + 2^{-1}\\\\frac{[1 - (2^{-1})^{23}]}{(1-2^{-1})}'",
                arg: "display"
              }
            ]
          }),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "~~~~~~~~~~~~~~~~~~~~~~~~~~= 2 - 2^{-23}",
                expression: "'~~~~~~~~~~~~~~~~~~~~~~~~~~= 2 - 2^{-23}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The largest number representable is therefore "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value:
                  "(2 - 2^{-23})2^{127} \\approx 2^{128} \\approx 3.4 \\times 10^{38}",
                expression:
                  "'(2 - 2^{-23})2^{127} \\\\approx 2^{128} \\\\approx 3.4 \\\\times 10^{38}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" and the smallest positive number is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: "2^{-126} \\approx 1.2 \\times 10^{-38}",
                expression: "'2^{-126} \\\\approx 1.2 \\\\times 10^{-38}'",
                arg: "display"
              }
            ]
          }),
          _vm._v(" The binary machine floating-point number "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "\\varepsilon = 2^{-23}",
                expression: "'\\\\varepsilon = 2^{-23}'"
              }
            ]
          }),
          _vm._v(" is called the "),
          _c("deep", [_vm._v("machine epsilon")]),
          _vm._v(
            " when using single precision. It is the smallest positive machine number "
          ),
          _c("span", { attrs: { katex: "'\\\\varepsilon'" } }),
          _vm._v(" such that "),
          _c("span", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex",
                value: "1 + \\varepsilon \\neq 1",
                expression: "'1 + \\\\varepsilon \\\\neq 1'"
              }
            ]
          }),
          _vm._v("."),
          _c("br"),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 2.8")
              ]),
              _vm._v(
                " Determine the decimal number that has the following single-precision representation "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "[0~100~010~10~010~001~000~111~010~000~000~00]_2",
                    expression:
                      "'[0~100~010~10~010~001~000~111~010~000~000~00]_2'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" Answer: The stored sign is "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "s = 0",
                    expression: "'s = 0'"
                  }
                ]
              }),
              _vm._v(". Thus the number is positive. The stored exponent is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "(100~010~10)_2 = 2^{1} + 2^{3} + 2^{7}",
                    expression: "'(100~010~10)_2 = 2^{1} + 2^{3} + 2^{7}'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ = 2 + 8 + 128 = 138",
                    expression:
                      "' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ = 2 + 8 + 128 = 138'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: " ~~~~\\text{Thus}\\;\\;\\;e-127 = 138 - 127 = 11",
                    expression:
                      "' ~~~~\\\\text{Thus}\\\\;\\\\;\\\\;e-127 = 138 - 127 = 11'",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The fractional part "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f",
                    expression: "'f'"
                  }
                ]
              }),
              _vm._v(" is "),
              _c("span", { attrs: { katex: "'0.010~001~000~111~01'" } }),
              _vm._v(". The decimal number "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "N",
                    expression: "'N'"
                  }
                ]
              }),
              _vm._v(" is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "N = (-1)^s \\times 2^{e - 127} \\times (1.f)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    expression:
                      "'N = (-1)^s \\\\times 2^{e - 127} \\\\times (1.f)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "= (1.010~001~000~111~01)\\times 2^{11}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    expression:
                      "'= (1.010~001~000~111~01)\\\\times 2^{11}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "=1010~001~000~11.1~01~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    expression:
                      "'=1010~001~000~11.1~01~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "= 2^{-3} + 2^{-1} + 2^0 + 2^1 + 2^5 + 2^9 + 2^{11} = 2595.625 ",
                    expression:
                      "'= 2^{-3} + 2^{-1} + 2^0 + 2^1 + 2^5 + 2^9 + 2^{11} = 2595.625 '",
                    arg: "display"
                  }
                ]
              })
            ]
          ),
          _c(
            "div",
            {
              staticClass: "my-3 mb-4 p-3",
              staticStyle: { "background-color": "#e2e3e5" }
            },
            [
              _c("span", { staticClass: "font-weight-bold" }, [
                _vm._v("Example 2.9")
              ]),
              _vm._v(
                " Determine the single-precision representation of the decimal -52.234375."
              ),
              _c("br"),
              _c("br"),
              _vm._v(
                " Answer: We start by converting the decimal into binary form. Converting the integer and fractional part we have, "
              ),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "52 = (110~100)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    expression:
                      "'52 = (110~100)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " 0.234375 = (0.001~111)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    expression:
                      "' 0.234375 = (0.001~111)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      "\\text{Thus}\\;\\;\\;\\;52.234375 = (110~100.001~111)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
                    expression:
                      "'\\\\text{Thus}\\\\;\\\\;\\\\;\\\\;52.234375 = (110~100.001~111)_2~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'",
                    arg: "display"
                  }
                ]
              }),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value: "= (1.101~000~011~11)_2 \\times 2^5~~~~ ",
                    expression: "'= (1.101~000~011~11)_2 \\\\times 2^5~~~~ '",
                    arg: "display"
                  }
                ]
              }),
              _vm._v(" The sign is "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "s = 1",
                    expression: "'s = 1'"
                  }
                ]
              }),
              _vm._v(" and the fractional part "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "f",
                    expression: "'f'"
                  }
                ]
              }),
              _vm._v(" is "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "0.101~000~011~11",
                    expression: "'0.101~000~011~11'"
                  }
                ]
              }),
              _vm._v(" and the exponent is "),
              _c("span", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex",
                    value: "e",
                    expression: "'e'"
                  }
                ]
              }),
              _vm._v(" is "),
              _c("div", {
                directives: [
                  {
                    name: "katex",
                    rawName: "v-katex:display",
                    value:
                      " e - 127 = 5 \\Longrightarrow e = 132 = (100~001~00)_2 ",
                    expression:
                      "' e - 127 = 5 \\\\Longrightarrow e = 132 = (100~001~00)_2 '",
                    arg: "display"
                  }
                ]
              })
            ]
          ),
          _vm._v(" The 32-bit representation of the number is "),
          _c("div", {
            directives: [
              {
                name: "katex",
                rawName: "v-katex:display",
                value: " [1~100~001~00~101~000~011~110~000~000~000~00]_2",
                expression:
                  "' [1~100~001~00~101~000~011~110~000~000~000~00]_2'",
                arg: "display"
              }
            ]
          })
        ],
        1
      )
    ]),
    _c(
      "section",
      {
        staticClass: "dark-grey-text mb-4 pt-3 px-3 mx-4",
        staticStyle: { "background-color": "#fff3e0" },
        attrs: { id: "ex-1" }
      },
      [
        _c(
          "h4",
          { staticClass: "h4-responsive" },
          [
            _vm._v("Exercise 2.2 "),
            _c("deep", [_vm._v("Single-Precision floating point form")])
          ],
          1
        ),
        _c("ol", [
          _c("li", [
            _vm._v(
              " Determine the machine representation in single precision on a 32-bit word length computer (Marc-32) for the following decimal numbers "
            ),
            _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "7712",
                      expression: "'7712'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "-285.75 ",
                      expression: "'-285.75 '"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: " -2752",
                      expression: "' -2752'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "64.015625 ",
                      expression: "'64.015625 '"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "  0.03125",
                      expression: "'  0.03125'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "  0.234375",
                      expression: "'  0.234375'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "-8 \\times 2^{-24} ",
                      expression: "'-8 \\\\times 2^{-24} '"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle 2^{-127} + 2^{-128} ",
                      expression: "'\\\\displaystyle 2^{-127} + 2^{-128} '"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: " \\displaystyle 2^{-127} + 2^{-130}",
                      expression: "' \\\\displaystyle 2^{-127} + 2^{-130}'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: " \\displaystyle 2^{-127} + 2^{-150}",
                      expression: "' \\\\displaystyle 2^{-127} + 2^{-150}'"
                    }
                  ]
                })
              ])
            ]),
            _c("br"),
            _c("br")
          ]),
          _c("li", [
            _vm._v(
              " Determine the decimal numbers that has the following Marc-32 representation. "
            ),
            _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "1~1111~0000~011~0000~0000~0000~0000~0000",
                      expression: "'1~1111~0000~011~0000~0000~0000~0000~0000'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "0~1000~1010~010~0010~0011~1010~0000~0000",
                      expression: "'0~1000~1010~010~0010~0011~1010~0000~0000'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "0~1000~0101~000~0000~0000~1000~0000~0000",
                      expression: "'0~1000~0101~000~0000~0000~1000~0000~0000'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "0~1000~0000~111~1000~0000~0000~0000~0000",
                      expression: "'0~1000~0000~111~1000~0000~0000~0000~0000'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "1~1000~0100~101~0000~1111~0000~0000~0000",
                      expression: "'1~1000~0100~101~0000~1111~0000~0000~0000'"
                    }
                  ]
                })
              ])
            ]),
            _c("br"),
            _c("br")
          ]),
          _c("li", [
            _vm._v(" Are these machine numbers in the Marc-32? Why? "),
            _c("ol", { staticStyle: { "list-style-type": "lower-latin" } }, [
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle 10^{40}",
                      expression: "'\\\\displaystyle 10^{40}'"
                    }
                  ]
                })
              ]),
              _c("li", [
                _c("div", {
                  directives: [
                    {
                      name: "katex",
                      rawName: "v-katex",
                      value: "\\displaystyle 2^{-1} + 2^{-26}",
                      expression: "'\\\\displaystyle 2^{-1} + 2^{-26}'"
                    }
                  ]
                })
              ])
            ])
          ])
        ])
      ]
    )
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "section",
      {
        staticClass: "py-3 px-3 mx-4",
        staticStyle: { "background-color": "#fff3e0" }
      },
      [
        _c("h3", { staticClass: " h3-responsive font-weight-bold" }, [
          _vm._v(" 2. Number Representation")
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h4", { staticClass: "h4-responsive" }, [
      _vm._v("Exercise 2.1 "),
      _c("strong", [_vm._v("Decimal and Binary system")])
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}